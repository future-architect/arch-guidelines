import{_ as r,C as e,c as g,o as l,G as a,a4 as d,b as y,w as i,a as f,a8 as x}from"./chunks/framework.BJEXY-5A.js";const o="/arch-guidelines/assets/image1.ChUh0-Qz.png",h="/arch-guidelines/assets/image3.9khZqmiw.png",A=JSON.parse('{"title":"AWS設計ガイドライン","description":"","frontmatter":{"sidebarDepth":4,"title":"AWS設計ガイドライン","author":"フューチャー株式会社","head":[["meta",{"name":"keywords","content":"AWS"}]]},"headers":[],"relativePath":"documents/forAWS/aws_guidelines.md","filePath":"documents/forAWS/aws_guidelines.md"}'),p={name:"documents/forAWS/aws_guidelines.md"};function u(c,t,b,C,S,m){const s=e("page-title"),n=e("Mermaid");return l(),g("div",null,[a(s),t[1]||(t[1]=d(`<p>本ガイドラインは、世の中のシステム開発プロジェクトのために無償で提供する。<br> ただし、掲載内容および利用に際して発生した問題、それに伴う損害については、フューチャー株式会社（以下、フューチャー）は一切の責務を負わないものとする。<br> また、掲載している情報は予告なく変更する場合があるため、あらかじめご了承いただきたい。</p><div class="warning custom-block"><p class="custom-block-title">免責事項: 有志で作成したドキュメントである</p><ul><li>フューチャーには多様なプロジェクトが存在し、それぞれの状況に合わせて工夫された開発プロセスや高度な開発支援環境が存在する。本ガイドラインはフューチャーの全ての部署／プロジェクトで適用されているわけではなく、有志が観点を持ち寄って新たに整理したものである</li><li>相容れない部分があればその領域を書き換えて利用することを想定している <ul><li>プロジェクト固有の背景や要件への配慮は、ガイドライン利用者が最終的に判断すること</li></ul></li><li>本ガイドラインに必ず従うことは求めておらず、設計案の提示と、それらの評価観点を利用者に提供することを主目的としている</li></ul></div><h2 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h2><p>技術選定におけるクラウドファーストは標準となって久しく、新規開発・システム更改いずれにおいても、クラウド環境利用を検討しないシーンはない。一方、ほぼすべてのシステムがクラウド上に構築される中、毎回フルスクラッチで設計することは非効率的である。設計者は、そのシステムに固有の要件・特性をどう満たすのかの設計に心血を注ぐべきで、例えば、システム間差異が少ないコンポーネントの設計に時間を多く割くべきではない。</p><p>本ガイドラインは、設計者が車輪の再発明に陥らず、真に必要な設計に集中できることを目的にまとめられた。具体的には、システム間差異の少ない設計のベストプラクティスを提供することで、設計者が考慮しなければならない作業の多くを肩代わりし、設計品質の向上を支援する。</p><p>ただし、本ガイドラインは個別のシステム設計を代替するものではなく、あらゆる要件に適合する万能な解決策でもない。あくまで設計者が価値ある設計に注力するための判断材料を提供するツールである。</p><h2 id="前提条件" tabindex="-1">前提条件 <a class="header-anchor" href="#前提条件" aria-label="Permalink to &quot;前提条件&quot;">​</a></h2><p>本ガイドラインは、クラウドサービスのうち、AWSが採用されたシステムの設計で活用されることを想定している。また、利用するサービス選定には、できる限りマネージドサービスを利用することで、運用・保守のコストを下げるというポリシーがあるとする。</p><p>関連するドキュメントとして以下がある。適時参照すること。</p><ul><li><a href="https://future-architect.github.io/coding-standards/documents/forAWSResource/AWS%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E5%91%BD%E5%90%8D%E8%A6%8F%E7%B4%84.html#" target="_blank" rel="noreferrer">AWSインフラ命名規約</a></li></ul><p>また、以下のドキュメントにもAWS設計に関する項目がある。</p><ul><li><a href="/arch-guidelines/documents/forWebFrontend/web_frontend_guidelines.html">Webフロントエンド設計ガイドライン</a></li><li><a href="/arch-guidelines/documents/forWebAPI/web_api_guidelines.html">Web API設計ガイドライン</a></li><li><a href="/arch-guidelines/documents/forBatch/batch_guidelines.html">バッチ設計ガイドライン</a></li><li><a href="/arch-guidelines/documents/forDB/postgresql_guidelines.html">PostgreSQL設計ガイドライン</a></li></ul><h2 id="マルチアカウントを利用した環境分離パターン" tabindex="-1">マルチアカウントを利用した環境分離パターン <a class="header-anchor" href="#マルチアカウントを利用した環境分離パターン" aria-label="Permalink to &quot;マルチアカウントを利用した環境分離パターン&quot;">​</a></h2><p>AWSにおける最も強力かつ、基本的な環境境界がAWSアカウントである。</p><p>Well-architected Frameworkのセキュリティの柱においても、AWSアカウントの分離が強く推奨されている。</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/wellarchitected/latest/security-pillar/aws-account-management-and-separation.html" target="_blank" rel="noreferrer">AWS アカウントの管理と分離 - セキュリティの柱</a></li></ul><p>マルチアカウントの設計は、アカウント分離の単位が最も重要である。デプロイメント環境ごと（開発・検証・本番など）に分離することは大前提とした上で、アカウントを跨いで適用すべき施策・一部アカウントのみに適用すべき施策を特定し、各施策に応じた設計が必要である。当然すべてのシステムの要件を満たせる「銀の弾丸」パターンはないが、共通化したい・すべきコンポーネントはある程度パターンが決まっているため、どのような共通化コンポーネントがあるかを整理することで、必要な設計を導き出すことができる。</p><p>そのために考慮すべき要件例を以下に示す。</p><table tabindex="0"><thead><tr><th style="text-align:left;">項目</th><th style="text-align:left;">詳細</th></tr></thead><tbody><tr><td style="text-align:left;">各環境へのアクセス権付与</td><td style="text-align:left;">IAMユーザーをどのように集中管理させたいか？</td></tr><tr><td style="text-align:left;">監査・GRC（Governance Risk and Compliance）</td><td style="text-align:left;">内部・外部の監査人へのアクセス権付与や操作ログ・設定変更履歴の保全の仕組みそのものを共通化したいか？</td></tr><tr><td style="text-align:left;">セキュリティ監視</td><td style="text-align:left;">監視対象のログの連携や攻撃証跡保全の仕組みを共通化したいか？</td></tr><tr><td style="text-align:left;">既存NWとの接続</td><td style="text-align:left;">・社内NWや開発拠点、DC等から閉域接続やVPN接続が必要か？<br>・プライベートIPアドレスの空き状況やコスト面などの要請から接続に必要なリソース(DirectConnectやTransit Gateway)を共用が必要か？</td></tr><tr><td style="text-align:left;">外部NWとの接続</td><td style="text-align:left;">ライセンスやセキュリティ統制、コストの観点から、インターネットや外部システムへのアクセス点の作成や穴開けをFWなどで集中管理させたいか？</td></tr><tr><td style="text-align:left;">共通利用する資材</td><td style="text-align:left;">実行するバイナリやコンテナイメージを共通のレジストリに保管したいか？</td></tr></tbody></table><p>上記を考慮し、システム単体での共通化の要否の整理をすると共に、複数システムで共同利用すべきかを併せて検討する必要がある。特に、将来的に共通基盤化につなげる意図があるコンポーネントについては、分離・移行の難易度を下げるためにも、当初の段階からアカウントごと分離しておくべきである。</p><p>さらに、ガバナンスや法令・基準への適合範囲を狭めるために、あえて環境を一部切り出したい要件も存在する。そのような要件がある場合は、デプロイメント環境としては1つであっても複数アカウントに跨がってリソースを構築するパターンも考慮する。具体的には、下記のような要件がある。</p><table tabindex="0"><thead><tr><th style="text-align:left;">項目</th><th style="text-align:left;">詳細</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>データ・プライバシーの要件</strong></td><td style="text-align:left;">・PCI-DSSなどの基準への適合のため、決済処理などPCI-DSSの対象となるリソース群は『法令・基準適合アカウント』に分離して配置する必要がある場合<br>・国・地域のプライバシー法制(GDPR・CCPA・中国個人情報保護法など）に合わせて、特定の国や地域にあるリージョンから別のリージョンへのデータ持ち出しを禁止したい場合</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>Organizationのルートアカウント/Payerアカウントにはリソースは配置せず、Organizationの管理のみで利用する</li><li>開発・検証・本番などの環境面ごとにアカウントを分離する <ul><li>データ・プライバシー要件からデータ分離が必要な場合はアカウント単位でデータを分離する</li></ul></li><li>IAM管理アカウントを作成し、IAMユーザーはそのアカウント配下に作成する <ul><li>将来的な環境移管を見据え、Identity Centerは利用しない <ul><li>Identity Centerの構成を保ったまま環境移管するためには、Payerアカウントごとの移管を行う必要があり、移管先のAWSのパートナー資格によっては移管することができない場合がある。その場合、アカウント移管時はIdentity Centerからの移行が必要になるため、当初からIAMユーザーを作成するアカウントを作成すると良い</li></ul></li><li>各環境へはクロスアカウントで委任を設定したロールへスイッチする</li><li>IAM管理アカウント以外にはIAMユーザーは作成できないようSCPで制御する</li></ul></li><li>監査・ログ管理アカウントを作成する <ul><li>ログアクセスする際は各アカウントへのアクセス権を付与するのではなく、監査・ログ管理アカウントにアクセス権を付与する（AWSの仕様上クロスアカウントでのログ出力ができない場合は、個別にログ転送を行う）</li></ul></li><li>セキュリティサービス用アカウントを作成する <ul><li>AWS Organizationとの統合するためのアカウントを作成する</li><li>具体的に構築すべきサービスは <a href="#すべてのアカウントが対応すべきセキュリティ対策">すべてのアカウントが対応すべきセキュリティ対策</a> 章を参照</li></ul></li><li>必要に応じて既存NWやインターネット接続用のアカウントを作成する <ul><li>既存NWや運用拠点との接続はVPC毎に接続する構成は複雑になるため、ネットワーク用のアカウントを作成して、ハブアンドスポーク型のネットワークを構築する（メッシュ型のネットワークは構築しない）</li><li>同様に外部NWやインターネットへの接続に関しても、複数アカウントからドメインレベルでの制御やNAT利用がある場合はコスト面で優位性があるネットワーク用のアカウントを作成する</li></ul></li><li>アカウントを所属させるOUはできるだけネストした構成を避けること。ワークロード用でひとつ、共通コンポーネント毎にそれぞれのOUを作成する <ul><li>SCPは通常のポリシーとは異なり、アカウントに設定されたSCPとツリー上位のポリシーの論理和、かつコンフリクトを起こす条件についてはツリー上位のポリシ－が先勝ちする形で評価が行われる</li><li>設定の検証を簡易化するためにも、安易にOUをネストしないことを推奨する</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">マルチアカウントの作成パターン</p><p>推奨事項に則った標準的なマルチアカウントの作成パターンを以下に示す。</p><table tabindex="0"><thead><tr><th>OU</th><th>アカウント</th><th style="text-align:center;">必須</th><th>説明</th><th>代表的なリソース</th><th>備考</th></tr></thead><tbody><tr><td>ワークロード</td><td>開発</td><td style="text-align:center;">✅️</td><td>開発用リソースを配置する</td><td>VPC、ECS、RDS</td><td></td></tr><tr><td></td><td>検証</td><td style="text-align:center;">✅️</td><td>検証用リソースを配置する</td><td>同上</td><td></td></tr><tr><td></td><td>本番</td><td style="text-align:center;">✅️</td><td>本番用リソースを配置する</td><td>同上</td><td></td></tr><tr><td></td><td>法令・基準適合</td><td style="text-align:center;"></td><td>PCI-DSS、各国のプライバシー法制などの要件遵守のために関係するリソースのみを配置する</td><td>RDS、S3など</td><td>監査要件の対象を絞ることで、保管期間や監査対象を削減し、コスト最適化につながる また、適切なSCPを適用することでアカウント単位でのガードレールを適用する</td></tr><tr><td>ユーザー管理</td><td>IAM管理</td><td style="text-align:center;">✅️</td><td>他アカウントへAssumeRoleするIAMユーザーを作成する</td><td>IAMユーザー</td><td>IAM Identity Centerを利用しない場合</td></tr><tr><td>セキュリティ</td><td>監査・ログ管理</td><td style="text-align:center;">✅️</td><td>将来的な監査やトレーサビリティチェック、フォレンジックに必要なログを配置する</td><td>Cloudtrail、VPC Flow Log、Config</td><td>当該アカウントへのログ集積を許可するクロスアカウントポリシーを適用する</td></tr><tr><td></td><td>セキュリティサービス</td><td style="text-align:center;">✅️</td><td>アカウントまたぎで利用するセキュリティサービスを配置する</td><td>Security Hub、Macie、GuardDuty</td><td>当該アカウントからのアクセスを許可するクロスアカウントポリシーを適用する</td></tr><tr><td>共通サービス</td><td>ネットワーク</td><td style="text-align:center;"></td><td>既存のDCと接続するリソースや、インターネットへのアクセス制御を行うリソースを配置する</td><td>Transit Gateway、Direct Connect、NAT Gateway、Network Firewallなど</td><td>オンプレミス環境との専用線接続や、複数アカウントで共通のインターネット出口が必要な場合に作成する</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">Control Towerを使うべきか？</p><p>AWSマネージドでクロスアカウント構成を作成するサービスにControl Towerが存在する。詳細な設計を行わなくとも自動で必要なリソースが生成される一方で、一度Control Towerで管理を開始したOrganizationは、管理を解除する（廃止する）ための公式な手順が存在せず、元に戻すことが極めて困難である。そのためサンドボックス的な利用で、将来的なカスタマイズが不要な場合でのみ利用することを推奨する。</p><p>特に、環境構築後に環境そのものの引き渡しを想定する場合は、引き渡し先での統制とControl Towerにコンフリクトが生じる場合があり、利用すべきではない。</p><p>一方、共通基盤としてControl Towerを整備している企業や公共団体もあり、その場合は利用するアカウントの統制方法に合わせて環境を利用する。</p></div><h2 id="すべてのアカウントが対応すべきセキュリティ対策" tabindex="-1">すべてのアカウントが対応すべきセキュリティ対策 <a class="header-anchor" href="#すべてのアカウントが対応すべきセキュリティ対策" aria-label="Permalink to &quot;すべてのアカウントが対応すべきセキュリティ対策 {#すべてのアカウントが対応すべきセキュリティ対策}&quot;">​</a></h2><p>AWSのセキュリティ設計の指針として、セキュリティの柱 - AWS Well-Architected フレームワークや、CIS Amazon Web Services Foundations Benchmarkなど、有用なガイドラインが複数公開されている。そのため、システムの特性にそった適切なガイドラインを選択し、記載された対応を実施することで、技術的な観点でのセキュリティ対策は一定のレベルで実装できる。</p><p>本番環境に対しては、これらのガイドラインベースでリッチなセキュリティ対策を実装していても、開発環境や社内検証環境には十分なセキュリティ対策がとれていないシステムがあるのではないかとの思いから、「すべてのアカウントが対応すべきセキュリティ対策」と題して、システムの特性や規模によらず、リスク低減のために最低限行うべき「コスパの良い」対策とその実装方法を記す。なお、セキュリティに関して要件が別途定められている場合は、その要件への対応を優先すること。</p><h3 id="securityhubでの統合管理" tabindex="-1">SecurityHubでの統合管理 <a class="header-anchor" href="#securityhubでの統合管理" aria-label="Permalink to &quot;SecurityHubでの統合管理&quot;">​</a></h3><p>SecurityHubは、アカウントやリージョンを横断してセキュリティ状況を一元的に把握した管理が可能なサービスである。各セキュリティサービスの検知結果を集約して表示できるほか、AWS configに対して検知ルールを配布し、セキュリティグループの過剰な開放などリスクの高い設定値を検出できる。</p><p>主な考慮事項や論点としては以下がある。</p><ul><li><p>設定値評価のベースライン（セキュリティ基準）に何を選択すべきか</p><ul><li>パラメータ評価を有効化する際に、ベースラインとなるガイドラインをセキュリティ基準として設定できる。選択できるセキュリティ基準は次の通りで、要件に適したものを選択する必要がある</li></ul><table tabindex="0"><thead><tr><th style="text-align:left;">セキュリティ基準名</th><th style="text-align:left;">概要</th></tr></thead><tbody><tr><td style="text-align:left;">AWS 基礎セキュリティのベストプラクティス v1.0.0</td><td style="text-align:left;">AWSによって制定されたセキュリティ基準であり、組織の規模や領域にかかわらず、遵守すべき基準として作成されたもの</td></tr><tr><td style="text-align:left;">CIS AWS Foundations Benchmark v1.2.0</td><td style="text-align:left;">米国のCISによって策定されたガイドラインであり、業種業界を問わず広く活用されている</td></tr><tr><td style="text-align:left;">CIS AWS Foundations Benchmark v1.4.0</td><td style="text-align:left;">同上</td></tr><tr><td style="text-align:left;">CIS AWS Foundations Benchmark v3.0.0</td><td style="text-align:left;">同上</td></tr><tr><td style="text-align:left;">NIST Special Publication 800-53 Revision 5</td><td style="text-align:left;">米国政府が政府内の情報システム向けに作成したガイドライン</td></tr><tr><td style="text-align:left;">PCI DSS v3.2.1</td><td style="text-align:left;">クレジットカード業界における情報セキュリティ基準であり、カード所有者データを保存、処理、または送信する組織に適用される</td></tr><tr><td style="text-align:left;">PCI DSS v4.0.1</td><td style="text-align:left;">同上</td></tr><tr><td style="text-align:left;">AWS リソースタグ付け標準 v1.0.0</td><td style="text-align:left;">リソースにアタッチされたタグの設定状況のみをスコープとしたセキュリティ基準であり、タグが設定されていないリソースを検知する</td></tr></tbody></table></li><li><p>集約アカウントを設定するか</p><ul><li>Organizations配下の各アカウントの準拠状況を、1つのアカウントのSecurityHubコンソール上に集約して表示できる</li></ul></li><li><p>対応プロセスの定義</p><ul><li>SecurityHubの有効化後、検知結果に対して対応するかリスクを受容するか運用の中で判断する必要がある。検知結果は自動的に重要度が設定され、重要度は重大/高/中/低がある</li><li>重要度に応じて、対応期限を定めての実施が一般的である</li></ul><table tabindex="0"><thead><tr><th style="text-align:left;">重要度</th><th style="text-align:left;">AWSによる定義</th><th style="text-align:left;">検知ルールの例</th></tr></thead><tbody><tr><td style="text-align:left;">重要</td><td style="text-align:left;">この問題は、さらに悪化しないように<br>直ちに修復する必要があります</td><td style="text-align:left;">[EC2.19] セキュリティグループは、リスクの高いポートへの無制限アクセスを許可してはいけません</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">[S3.19] S3 アクセスポイントではブロックパブリックアクセス設定を有効にする必要があります</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">[RDS.2] RDS DB インスタンスは、PubliclyAccessible 設定によって判断される、パブリックアクセスを禁止する必要があります</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">[IAM.4] IAM ルートユーザーアクセスキーが存在してはいけません</td></tr><tr><td style="text-align:left;">高</td><td style="text-align:left;">この問題は短期的な優先事項として<br>対処する必要があります</td><td style="text-align:left;">[EC2.9] Amazon EC2 インスタンスは、パブリック IPv4 アドレスを未設定にすることをお勧めします</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">[EC2.2] VPC のデフォルトのセキュリティグループでは、インバウンドトラフィックまたはアウトバウンドトラフィックを許可しないようにすることをお勧めします</td></tr><tr><td style="text-align:left;">中</td><td style="text-align:left;">この問題は、中期的な優先事項として<br>対処する必要があります</td><td style="text-align:left;">[IAM.5] コンソールパスワードを使用するすべての IAM ユーザーに対して MFA を有効にする必要があります</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">[EC2.7] EBS のデフォルト暗号化を有効にすることをお勧めします</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">[EC2.6] すべての VPC で VPC フローログ記録を有効にすることをお勧めします</td></tr><tr><td style="text-align:left;">低</td><td style="text-align:left;">この問題には、独自のアクションは<br>必要ありません</td><td style="text-align:left;">[IAM.24] IAM ロールにはタグを付ける必要があります</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">[EC2.12] 未使用の Amazon EC2 EIP を削除することをお勧めします</td></tr></tbody></table></li></ul><p>推奨は以下の通り。</p><ul><li>Security Hubは全デプロイメント環境（開発、検証、本番など）で有効にする</li><li>セキュリティ基準は、求められる要件があればそれに従い選択する。明確な要件がない場合は、「AWS 基礎セキュリティのベストプラクティス v1.0.0」と「CIS AWS Foundations Benchmark v3.0.0」を有効化する <ul><li>前者は、組織の規模や領域にかかわらず遵守すべき基準としてAWSにより作成されており、監視対象の種別が幅広いため有効化する</li><li>後者は、第三者機関によって作成された基礎的なガイドラインであり、業種業界を問わず標準として利用されているため有効化する</li></ul></li><li>集約管理アカウントを設定し、Organizations内の全アカウントとリージョンのセキュリティ準拠状況を1つのコンソールで管理する。集約先はセキュリティ管理アカウントとする</li><li>重要度が「重要」 の検知結果が検知され、想定外の設定変更であった場合は、即座に修正対応を完了させる。重要度「高」の検知結果の場合は、翌営業日を目途に対応する</li><li>定期的な監視運用がされていない環境（開発環境など）では、重要度が「重要」 「高」 の検知はslackやチケット管理システムへ即時通知する。重要度が中、低の検知項目に対しては、月次などの頻度で内容を確認し、リスクを受容するか、バックログとして対応計画を立てるかの判断（棚卸し）を実施する</li></ul><h3 id="cloudtrailで監査ログを取得する" tabindex="-1">CloudTrailで監査ログを取得する <a class="header-anchor" href="#cloudtrailで監査ログを取得する" aria-label="Permalink to &quot;CloudTrailで監査ログを取得する&quot;">​</a></h3><p>CloudTrailは、AWSマネジメントコンソール、AWS CLI、AWS SDKs、AWS APIで実行されたアクションのログを記録するサービスである。監査対応やインシデント発生時の追跡調査において、CloudTrailが取得したログは必須となることが多い。CloudTraiの証跡機能を利用することで、長期間にわたってログをS3に保管することもできる。</p><p>主な考慮事項や論点としては以下がある。</p><ul><li><p>どのログを証跡として取得し保管するか</p><ul><li>CloudTrailが取得するログは、以下の4つのイベントに分類される。証跡作成画面でそれぞれのイベントを選択することで、証跡として保管される。</li><li>取得対象のログは、それぞれ調整ができる</li></ul><table tabindex="0"><thead><tr><th style="text-align:left;">イベント種別</th><th style="text-align:left;">概要</th><th style="text-align:left;">イベントの例</th><th style="text-align:left;">コスト</th></tr></thead><tbody><tr><td style="text-align:left;">管理イベント</td><td style="text-align:left;">AWS上のリソースに関するイベントを記録する</td><td style="text-align:left;">S3バケット自体の作成/削除</td><td style="text-align:left;">配信される管理イベント 100,000 あたり 2.00 USD</td></tr><tr><td style="text-align:left;">データイベント</td><td style="text-align:left;">リソース内で実行されるイベントを記録する</td><td style="text-align:left;">S3バケット内のオブジェクトの作成/削除</td><td style="text-align:left;">配信されたデータイベント 100,000 件あたり 0.10 USD</td></tr><tr><td style="text-align:left;">ネットワークアクティビティイベント</td><td style="text-align:left;">VPCエンドポイント経由で実行されたイベントを記録する</td><td style="text-align:left;">VPCエンドポイントを経由して、S3に対してAPIを実行する</td><td style="text-align:left;">配信されたネットワークアクティビティイベント 100,000 件のあたり 0.10 USD</td></tr><tr><td style="text-align:left;">Insightsイベント</td><td style="text-align:left;">通常時と比較し、イベント実行頻度やエラー率に異常があった場合記録する</td><td style="text-align:left;">大量のS3バケットの作成/削除</td><td style="text-align:left;">インサイトタイプごとに分析された 100,000 件のイベントあたり 0.35 USD</td></tr></tbody></table></li><li><p>取得したログをどのように管理すできる取得べきか</p><ul><li>改ざん防止をどのように実現するか</li><li>ログ保管バケットをどこに作成するか</li><li>ログの保管期間をどのように定めるか</li></ul></li></ul><p>推奨は以下の通り。</p><ul><li>管理イベント、データイベント、ネットワークアクティビティイベントを証跡として取得する <ul><li>データイベントについては、すべて取得するとログ量が膨大になりコストが増加することがある。必要に応じ、イベントセレクター機能を利用して取得するログ種別を調整する。AWSサービスが実行したイベントの除外、マネジメントコンソール経由でのイベントのみの記録など、柔軟に設定ができる</li><li>ネットワークアクティビティイベントについては、環境内に存在するVPCエンドポイントに対するログ記録を有効化する。データイベント同様に、イベントセレクターを用いて調整する</li></ul></li><li>ログの改ざん防止のため、以下の対策を実施する <ul><li>証跡作成時にログファイルの検証を有効化する <ul><li>定期的にログファイルのハッシュ値が自動的に記録され、改ざんされていないことの確認に利用できる</li></ul></li><li>証跡の保管先は、ログ保管用アカウントのS3バケットとする。ログ保管用アカウントの詳細は、 <a href="#マルチアカウントを利用した環境分離パターン">マルチアカウントを利用した環境分離パターン</a> を参照する</li></ul></li><li>ログ保管期間は、監査基準をもとに定める。明確な基準がない場合は、最低1年間の保管を推奨する。ログの保管期間については、<a href="#取り扱う情報の機密性や種別各種監査基準やセキュリティ基準への対応の仕方">取り扱う情報の機密性や種別、各種監査基準やセキュリティ基準への対応の仕方</a> を参照して検討する <ul><li>デフォルト推奨値の1年間の論拠はPCI-DSS。少なくとも1年の保管と規定されている(EUのプライバシー法であるGDPR準拠を基準にすると1年半である）</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">Insightsイベントの取得について</p><p>Insightsイベントは、イベントの実行頻度やエラー率の異常な増加を検出するサービスであり、監査ログの取得よりも攻撃/障害の検知において有効な機能である。 また、取得対象のログの細かな調整できず、環境によってはコストが大きくなる場合がある。そのため、監査ログの取得という観点では、有効化を推奨とはしない。</p></div><h3 id="guarddutyで脅威を検知する" tabindex="-1">GuardDutyで脅威を検知する <a class="header-anchor" href="#guarddutyで脅威を検知する" aria-label="Permalink to &quot;GuardDutyで脅威を検知する&quot;">​</a></h3><p>GuardDutyを有効化することでネットワークアクティビティやデータイベントを継続的に監視・分析し、悪意のあるアクティビティや不正な挙動を検知できる。</p><p>設定にあたっての考慮事項、論点として以下がある。</p><ul><li>保護プランの選定 <ul><li><p>保護プランを選択することで、検知対象を追加できる。例えば、RDSへの不正なログイン試行は、デフォルトでは検知対象ではないが、RDS Protectionを有効化することで検知できる</p><table tabindex="0"><thead><tr><th style="text-align:left;">保護プラン</th><th style="text-align:left;">機能</th></tr></thead><tbody><tr><td style="text-align:left;">S3 Protection</td><td style="text-align:left;">S3に対する不正な操作を検知する</td></tr><tr><td style="text-align:left;">EKS Protection</td><td style="text-align:left;">(確認中)</td></tr><tr><td style="text-align:left;">拡張脅威検出</td><td style="text-align:left;">複数のイベントの関連性を分析し、攻撃がどの段階まで進行しているかを検知する。<br>保護プランの中で唯一、重要度がCriticalの検知結果を出力する</td></tr><tr><td style="text-align:left;">ランタイムモニタリング</td><td style="text-align:left;">CloudTrailにログが出力されないECSやEC2上の操作を分析し脅威を検出する。<br>ただしエージェントレスではなく、EC2へのエージェント導入、ECSへのサイドカーコンテナ作成、VPCエンドポイントの作成などが必要</td></tr><tr><td style="text-align:left;">EC2 の Malware Protection</td><td style="text-align:left;">EC2において脅威が検知された際に、EBSボリュームのスキャンを行い、マルウェアを検出する</td></tr><tr><td style="text-align:left;">S3 の Malware Protection</td><td style="text-align:left;">S3上のファイルに対してマルウェアスキャンを行う</td></tr><tr><td style="text-align:left;">RDS Protection</td><td style="text-align:left;">RDSに対する不正なログイン試行を検知する</td></tr><tr><td style="text-align:left;">Lambda 保護</td><td style="text-align:left;">Lambdaが不審な通信先と通信を行っていることを検知する</td></tr></tbody></table></li></ul></li></ul><p>推奨は以下の通り。</p><ul><li>保護プランはすべて有効化する <ul><li>監視対象のサービスが存在しない場合や、別途対策がとられている場合は有効化不要</li><li>例えば、EC2やECSに別のアンチマルウェアサービスを導入している場合、ランタイムモニタリングは不要である</li></ul></li><li>Organizationsと統合し、管理アカウントから保護プランを設定する <ul><li>子アカウント上での保護プランの設定漏れを防ぐため</li></ul></li><li>検出結果はS3にエクスポートする <ul><li>S3に保管しない場合、90日で検知結果は削除されるため、監査の観点でS3に出力を推奨する</li></ul></li></ul><h3 id="inspectorで脆弱性管理を行う" tabindex="-1">Inspectorで脆弱性管理を行う <a class="header-anchor" href="#inspectorで脆弱性管理を行う" aria-label="Permalink to &quot;Inspectorで脆弱性管理を行う&quot;">​</a></h3><p>Inspectorには、自動スキャンとCISスキャンの2種類の機能がある。</p><p>自動スキャンは、EC2、ECR、Lambdaに対して、OSやライブラリに含まれる既知の脆弱性のスキャンを行う機能である。Lambdaに対しては、既知の脆弱性の検知に加えて、関数内のアプリケーションのコードをスキャンし、ユーザ自身のコード実装不備により生じた脆弱性を検知することもできる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">自動スキャン対象</th><th style="text-align:left;">脆弱性検知の対象</th><th style="text-align:left;">評価指標</th></tr></thead><tbody><tr><td style="text-align:left;">EC2(Linux)</td><td style="text-align:left;">OSパッケージ、プログラミング言語パッケージ</td><td style="text-align:left;">CVSS V3</td></tr><tr><td style="text-align:left;">EC2(Windows)</td><td style="text-align:left;">OSパッケージ</td><td style="text-align:left;">CVSS V3</td></tr><tr><td style="text-align:left;">ECR（標準スキャン）</td><td style="text-align:left;">OSパッケージ</td><td style="text-align:left;">CVSS V2</td></tr><tr><td style="text-align:left;">ECR（拡張スキャン）</td><td style="text-align:left;">OSパッケージ、プログラミング言語パッケージ</td><td style="text-align:left;">CVSS V2, V3</td></tr><tr><td style="text-align:left;">Lambda</td><td style="text-align:left;">（確認中）</td><td style="text-align:left;">（確認中）</td></tr></tbody></table><p>次に、CISスキャンは、EC2を対象としてOSのパラメータをCISベンチマークの基準として監査し、パラメータの設定不備により生じた脆弱性を検知する機能である。先述のSecurityHubでもCISベンチマークを基準とした監査が可能だが、SecurityHubはAWSのパラメータを対象としており、EC2内のOSは対象としていない点で違いがある。</p><p>設定、運用にあたっての考慮事項、論点として以下がある。</p><ul><li>EC2のスキャン形式をHybridとするかAgent-basedとするか</li><li>ECRのスキャン設定を基本スキャンとするか拡張スキャンとするか</li><li>検知された脆弱性への対応優先度をどのように定義するか</li></ul><p>推奨は以下の通り。</p><ul><li>Inspectorを有効として、検知結果をSecurityHubに連携する</li><li>EC2スキャン形式は、より網羅性の高いHybridとする</li><li>ECRスキャン形式は拡張スキャンとする</li><li>FutureVulsを導入していない環境では、脆弱性の対応優先度は環境の露出度が高く、資産の重要度が高い環境から優先して対応する</li><li>FutureVulsを導入している環境では、FutureVuls側のスコアで決定する <ul><li>InspectorはCVSSスコアのみを脆弱性のスコアリングに利用しており、多くの脆弱性の重要度が最高値となる。FutureVulsにて、CVSS以外の基準も利用し脆弱性に優先度付けを行う</li></ul></li></ul><div class="warning custom-block"><p class="custom-block-title">inspectorを用いて脆弱性管理を行う際の注意事項</p><ul><li>Aurora上のPostgreやMySQL、Elasticache上のRedisにもバージョニングの設定があり、バージョンによってそれぞれ脆弱性が存在する。しかし、これらはInspector、および後述のVulsでの脆弱性管理の対象とならない</li><li>マイナーバージョンアップデートの自動化設定の有効化設定を行う、AWSサポートページの定期的な確認を運用項目に追加するなど、別途対応が必要となる</li></ul></div><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="/arch-guidelines/documents/forDB/postgresql_guidelines.html#バージョン">PostgreSQL設計ガイドライン</a> にPostgreSQLのサポートについての記述もある。</p></div><h3 id="amazon-macieでs3バケットを監視する" tabindex="-1">Amazon MacieでS3バケットを監視する <a class="header-anchor" href="#amazon-macieでs3バケットを監視する" aria-label="Permalink to &quot;Amazon MacieでS3バケットを監視する&quot;">​</a></h3><p>Amazon MacieはS3の監視サービスであり、S3バケット公開状況、暗号化状況を監視するポリシー監視機能と、S3バケット内に保存された機密データの自動検出機能がある。</p><p>前者の検出結果タイプは以下の通りで、公開されている状況を詳細に把握できる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">検出結果タイプ</th><th style="text-align:left;">AWSによる定義</th></tr></thead><tbody><tr><td style="text-align:left;">Policy:IAMUser/S3BlockPublicAccessDisabled</td><td style="text-align:left;">バケットレベルのパブリックアクセスブロック設定がバケットに対し無効になりました。</td></tr><tr><td style="text-align:left;">Policy:IAMUser/S3BucketEncryptionDisabled</td><td style="text-align:left;">バケットのデフォルトの暗号化設定は、Amazon S3 マネージドキーを使用して新しいオブジェクトを自動的に暗号化するデフォルトの Amazon S3 暗号化動作にリセットされました。</td></tr><tr><td style="text-align:left;">Policy:IAMUser/S3BucketPublic</td><td style="text-align:left;">匿名ユーザーまたはすべての認証された AWS Identity and Access Management (IAM) ID によるアクセスを許可するように、バケットの ACL またはバケットポリシーが変更されました。</td></tr><tr><td style="text-align:left;">Policy:IAMUser/S3BucketReplicatedExternally</td><td style="text-align:left;">レプリケーションが有効になっており、組織の外部 (一部ではない) の バケットからバケットにオブジェクト AWS アカウント をレプリケートするように設定されています。</td></tr><tr><td style="text-align:left;">Policy:IAMUser/S3BucketSharedExternally</td><td style="text-align:left;">バケットの ACL またはバケットポリシーが変更され、組織の外部 (一部ではない) AWS アカウントとバケットを共有できるようになりました。</td></tr><tr><td style="text-align:left;">Policy:IAMUser/S3BucketSharedWithCloudFront</td><td style="text-align:left;">バケットポリシーが変更され、バケットを Amazon CloudFront オリジンアクセスアイデンティティ (OAI)、CloudFront オリジンアクセスコントロール (OAC)、または CloudFront OAI と CloudFront OAC の両方と共有できるようになりました。</td></tr></tbody></table><p>後者の機密データ検出機能は、AWSによって事前に用意された検知ルールであるマネージドデータ識別子を用いることで、S3バケット内に保管されたアクセスキーや個人情報を検出できる。ただし、事前定義されたルールに、日本特有の個人情報（マイナンバー、郵便番号等）のルールは用意されておらず、検知のためにはカスタムデータ識別子の設定が必要となる。</p><p>推奨は以下の通り。</p><ul><li>Organizationsと統合し、セキュリティサービス管理用のアカウントから各アカウントへ設定を展開する</li><li>Macieを有効化しポリシー監視を行う。また、機密データの自動検出機能を有効化する</li><li>機密データの自動検出機能について <ul><li>マネージドデータ識別子を検知ルールとして利用する</li><li>機密情報が保管されることが事前に想定されており、堅牢化や監視が行われているS3バケットは、対象から除外することを検討する</li></ul></li><li>検出結果をSecurityHubに連携する</li></ul><h2 id="取り扱う情報の機密性や種別、各種監査基準やセキュリティ基準への対応の仕方" tabindex="-1">取り扱う情報の機密性や種別、各種監査基準やセキュリティ基準への対応の仕方 <a class="header-anchor" href="#取り扱う情報の機密性や種別、各種監査基準やセキュリティ基準への対応の仕方" aria-label="Permalink to &quot;取り扱う情報の機密性や種別、各種監査基準やセキュリティ基準への対応の仕方&quot;">​</a></h2><p>組織は、リスク低減・監査への効率的な対応・ステークホルダーへの説明責任といった目的のため、準拠すべき監査基準やセキュリティ基準を定めている。しかし、プロジェクトによってはこれらの基準が明確に定義されていない場合もある。</p><p>取り扱う情報の機密性や対象となるシステム・データの重要性に応じて、適用するセキュリティ基準と対策のレベルを決定するが、何も決まっていない案件向けに推奨値を記載する。</p><p>また、セキュリティ基準への対応は、以下の2つの軸で設計する必要がある。</p><ul><li><strong>基盤監査</strong>: 基盤やサービスの設定値が、基準に準拠できているかを確認する。AWS ConfigやSecurity Hubなどのマネージドサービスにより、多くの項目を自動的に検出可能</li><li><strong>情報監査</strong>: 扱う情報の機密性に応じて、基準に適合した適切な保管・管理ができているかを確認する</li></ul><p>情報監査はマネージドサービスによる自動検出が難しいため、本章ではその設計手法を説明する。</p><h3 id="基盤監査設計" tabindex="-1">基盤監査設計 <a class="header-anchor" href="#基盤監査設計" aria-label="Permalink to &quot;基盤監査設計&quot;">​</a></h3><h4 id="セキュリティ基準への監査設計で活用できるサービス" tabindex="-1">セキュリティ基準への監査設計で活用できるサービス <a class="header-anchor" href="#セキュリティ基準への監査設計で活用できるサービス" aria-label="Permalink to &quot;セキュリティ基準への監査設計で活用できるサービス&quot;">​</a></h4><p>どのセキュリティ基準に対応するにも、まずは以下サービス全ての有効化が望ましい。有効化したサービスは自動でアラート状況や監査記録をSecurityHubに転送し、監査チェックの範囲が広がる。ただし、有効化＝費用追加となるため、無効化のままの方が良いケースも存在する。よって、利用状況を確認し、下記表の「活用判断」列に該当する環境においては無効にするかを検討する。</p><table tabindex="0"><thead><tr><th style="text-align:left;">No</th><th style="text-align:left;">サービス名</th><th style="text-align:left;">主な監査の活用内容</th><th style="text-align:left;">活用判断</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">AWS SecurityHub</td><td style="text-align:left;">・セキュリティ状況の一元的な可視化と管理（No2～7のアラート統合管理）<br> ・セキュリティ基準への準拠状況を自動チェック</td><td style="text-align:left;">必須</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">AWS Config</td><td style="text-align:left;">・リソース設定の継続的な記録<br> ・コンプライアンス違反の自動修復</td><td style="text-align:left;">必須</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">Amazon Inspector</td><td style="text-align:left;">インスタンス/コンテナイメージ/lambda等の脆弱性管理</td><td style="text-align:left;">・EC2インスタンスやコンテナベースのワークロードを一切利用していない場合は要検討<br> ・手動での脆弱性管理やサードパーティ製のスキャンツール（Vuls等）を使っている場合は要検討（lambda等のVuls対象外のものもあるため、網羅的に脆弱性管理可能かを確認した上で判断すること）</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">Amazon GuardDuty</td><td style="text-align:left;">マルウェアの活動、不正アクセス、偵察行為などの脅威を検出</td><td style="text-align:left;">・ごく小規模で、外部からのアクセスがほとんどない場合は要検討<br> ・サードパーティ製の脅威検出システムを使っている場合は要検討（併用が望ましい）</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">Amazon Macie</td><td style="text-align:left;">・S3バケット内の機密データの検出と保護<br> ・S3バケットの公開情報等を評価</td><td style="text-align:left;">・S3を全く利用していない場合は要検討<br> ・S3を利用しているが、機密情報は一切含まれていない場合は要検討</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">AWS Firewall Manager</td><td style="text-align:left;">・組織全体のファイアウォールルール（AWS WAFルール、セキュリティグループ等）を一元的に設定・管理<br> ・通信ポリシーに準拠していないリソースや設定を検出</td><td style="text-align:left;">・AWSアカウントが少数で、手動でのファイアウォール管理で問題ない規模の場合は要検討<br> ・ファイアウォールリソース（WAF、SGなど）が小規模で、手動管理で問題ない場合は要検討</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">AWS IAM Access Analyzer</td><td style="text-align:left;">・外部エンティティ（他のAWSアカウント、パブリックアクセスなど）からの意図しないアクセスを検出<br> ・長期ログインしていないユーザアカウントからのログインを検出</td><td style="text-align:left;">・IAMポリシーの管理がシンプルで、手動での確認が容易なごく小規模な環境では要検討</td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">S3を全く使用していないアカウントとは？</p><p>AWS Direct Connect専用のアカウントなどはS3が存在しないことがありえる。また、EC2は利用するがS3を利用しないシステムも世の中には存在する。そのようなS3を一切利用しない場合は、Macieを有効にしなくても良い。</p></div><h4 id="securityhubで管理できるセキュリティ基準と、選定" tabindex="-1">SecurityHubで管理できるセキュリティ基準と、選定 <a class="header-anchor" href="#securityhubで管理できるセキュリティ基準と、選定" aria-label="Permalink to &quot;SecurityHubで管理できるセキュリティ基準と、選定&quot;">​</a></h4><p>担当する会社/組織のセキュリティレベルや、扱っている情報を元に準拠するセキュリティ基準を有効にする。セキュリティ基準は下表がある。</p><p>【凡例：セキュリティ強度】</p><ul><li>◯: 基礎的なセキュリティレベルを確保する基準</li><li>◎: より厳格な統制を求める基準。特定の業界や規制対象のシステムで要求される</li><li>(+): 上記に加え、特に技術的な要件や手続きが詳細に規定されていることを示す</li></ul><table tabindex="0"><thead><tr><th style="text-align:left;">No</th><th style="text-align:left;">セキュリティ基準名</th><th style="text-align:left;">セキュリティ強度</th><th style="text-align:left;">概要</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">AWS 基礎セキュリティのベストプラクティス v1.0.0</td><td style="text-align:left;">◯(-)</td><td style="text-align:left;">AWSによって制定されたセキュリティ基準であり、組織の規模や領域にかかわらず、遵守すべき基準として作成されたもの</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">CIS AWS Foundations Benchmark v1.2.0</td><td style="text-align:left;">◯</td><td style="text-align:left;">米国のCISによって策定されたガイドラインであり、業種業界を問わず広く活用されている</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">CIS AWS Foundations Benchmark v1.4.0</td><td style="text-align:left;">◯</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">CIS AWS Foundations Benchmark v3.0.0</td><td style="text-align:left;">◯</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">NIST Special Publication 800-53 Revision 5</td><td style="text-align:left;">◎</td><td style="text-align:left;">米国政府が政府内の情報システム向けに作成したガイドライン</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">PCI DSS v3.2.1</td><td style="text-align:left;">◎(+)</td><td style="text-align:left;">クレジットカード業界における情報セキュリティ基準であり、カード所有者データを保存、処理、または送信する組織に適用される</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">PCI DSS v4.0.1</td><td style="text-align:left;">◎(+)</td><td style="text-align:left;"></td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>特別な要件がない場合は、業種業界を問わず世界標準で活用されていて、かつ、セキュリティ強度を広い範囲で総合的に向上させることができるNo1、4を有効にする</li><li>業種・業態によっては他のセキュリティ基準も有効にする <ul><li>例: 省庁向け案件の場合は、No5も有効にする</li><li>例: クレジットカードによる決済を要するシステムも含まれる場合はNo7も有効にする</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">バージョン違いのセキュリティ基準について</p><p>基本的に最新版だけで良い。運用中に新たなバージョンが増えたときは旧版：新版を同時にチェックし、段階的に新版へ移行していけるようにすると良い。</p></div><h4 id="検知対応" tabindex="-1">検知対応 <a class="header-anchor" href="#検知対応" aria-label="Permalink to &quot;検知対応&quot;">​</a></h4><p>セキュリティ基準を設定すると2時間以内にチェックが完了し、重要度（重大・高・中・低）毎に検知ができる。検知内容を以下のパターンに分類する。</p><table tabindex="0"><thead><tr><th style="text-align:left;">パターン</th><th style="text-align:left;">重要度</th><th style="text-align:left;">パターンの説明</th><th style="text-align:left;">対応例</th></tr></thead><tbody><tr><td style="text-align:left;">A</td><td style="text-align:left;">重要、高</td><td style="text-align:left;">早急に対応が必要であり、設定値を見直す</td><td style="text-align:left;">1ヶ月以内に「解決済み」にする</td></tr><tr><td style="text-align:left;">B</td><td style="text-align:left;">重要、高</td><td style="text-align:left;">対応が必要であるが、当環境において例外的に許容しなくてはいけないもの</td><td style="text-align:left;">例外の理由を記録し「無効化」にする</td></tr><tr><td style="text-align:left;">C</td><td style="text-align:left;">重要、高</td><td style="text-align:left;">対応が必要だが、設計上回避が難しいもの</td><td style="text-align:left;">回避が難しい理由を記録、および暫定対策を検討し、1ヶ月以内に実施する その後、「抑制済み」にする</td></tr><tr><td style="text-align:left;">D</td><td style="text-align:left;">中</td><td style="text-align:left;">対応が必要だが、急ぎではないので計画を立てて解消していくもの</td><td style="text-align:left;">「通知済み」にし、別途で半年以内に対応するスケジュールを定める</td></tr><tr><td style="text-align:left;">E</td><td style="text-align:left;">低</td><td style="text-align:left;">一旦、許容する</td><td style="text-align:left;">公式リファレンスでも「独自のアクションは必要ありません」と明記されており、低→中となるまでは許容する方針で良い</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>「重要」 「高」の検知項目を必須対応とし、「中」以下は計画的（半年以内など）に対応する <ul><li>重要なのは、運用が形骸化せず実効性を持たせる設計にすることである</li><li>対応が追いつかずアラートが蓄積し、運用者にプレッシャーが掛かるのは避ける必要がある</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">開発環境、検証環境の基盤監査設計について</p><p>本番環境と同等の厳密さを求めると、現実的に開発のスピードを損なうため多少の加減は必要である。</p><p>具体的には、No1、4を有効にし、パターンA、B、Cのみ分類・対応すると良い。</p><p>また、開発・検証環境では誤って “誰でもアクセス可” とするようなポリシーを作成してしまった。というような操作ミスから、3日以内にサイバー攻撃を受けて多大な被害が出てしまう事例が多々あるため、毎日張り付きで監視するよりも「重要」 「高」のアラートを即時アラートメールとして受け取れるように設定することを推奨する。</p><p>【参考】</p><ul><li><a href="https://dev.classmethod.jp/articles/simplified-rule-creation-for-securityhub-in-eventbridge/" target="_blank" rel="noreferrer">【アップデート】Security Hub 通知のフィルタルールを EventBridge から簡単に作成できます</a></li><li><a href="https://note.com/hiroyu0510/n/n1eb3e8ba372a" target="_blank" rel="noreferrer">【AWS】SecurityHubの検出結果をメール通知する方法</a></li></ul></div><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://docs.aws.amazon.com/ja_jp/securityhub/latest/userguide/controls-findings-create-update.html" target="_blank" rel="noreferrer">コントロールの結果を生成および更新する - AWS Security Hub</a></p></div><h3 id="情報監査設計" tabindex="-1">情報監査設計 <a class="header-anchor" href="#情報監査設計" aria-label="Permalink to &quot;情報監査設計&quot;">​</a></h3><h4 id="各リソース一覧に機密性レベルをラベリングする" tabindex="-1">各リソース一覧に機密性レベルをラベリングする <a class="header-anchor" href="#各リソース一覧に機密性レベルをラベリングする" aria-label="Permalink to &quot;各リソース一覧に機密性レベルをラベリングする {#各リソース一覧に機密性レベルをラベリングする}&quot;">​</a></h4><p>各基準が適用されるAWSリソース（アカウント、VPC、サブネット、EC2、S3バケット、RDS等）を明確に定義し、一覧化する。</p><p>その後に各リソースにデータの機密性レベル（公開、社外秘、機密、極秘、個人情報、特定個人情報、カード会員データ）等の分類基準を明確にする。これら、データの分類・ラベリングは多くのセキュリティガイドラインにおいて、データの適切な保護と管理のために不可欠な要素として求められるため、設計の初期段階で実施すべきである。これが監査対象の全体像となる。</p><p>▼例）機密性レベルの例</p><table tabindex="0"><thead><tr><th style="text-align:left;">機密性レベル</th><th style="text-align:left;">説明</th><th style="text-align:left;">具体例</th></tr></thead><tbody><tr><td style="text-align:left;">公開</td><td style="text-align:left;">誰でもアクセスして良い情報</td><td style="text-align:left;">企業のWebサイトで公開されている情報（製品カタログ、プレスリリース等）</td></tr><tr><td style="text-align:left;">社外秘</td><td style="text-align:left;">外部に公開してはならない情報</td><td style="text-align:left;">顧客との打合せ資料、顧客リスト（企業名のみ）等</td></tr><tr><td style="text-align:left;">機密</td><td style="text-align:left;">漏洩した場合に企業の競争力や信頼を損なう可能性のある情報</td><td style="text-align:left;">財務情報、技術情報、個人情報を含む顧客情報等</td></tr><tr><td style="text-align:left;">極秘</td><td style="text-align:left;">漏洩した場合に企業の存続に関わる可能性のある情報</td><td style="text-align:left;">企業の合併・買収計画、高度な技術情報等</td></tr><tr><td style="text-align:left;">個人情報/特定個人情報</td><td style="text-align:left;">特定の個人を識別できる情報</td><td style="text-align:left;">氏名、住所、生年月日、電話番号、メールアドレス、クレジットカード番号、マイナンバー等</td></tr></tbody></table><p>▼例）アウトプット</p><table tabindex="0"><thead><tr><th style="text-align:left;">リソース</th><th style="text-align:left;">名称（ホスト名）</th><th style="text-align:left;">主な監査対象ファイル</th><th style="text-align:left;">機密性レベル</th></tr></thead><tbody><tr><td style="text-align:left;">EC2</td><td style="text-align:left;">Official_Website</td><td style="text-align:left;">サイトソースコード、ドキュメント（JPEG、pdfなど）</td><td style="text-align:left;">公開</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">Internal_File_Server</td><td style="text-align:left;">設計書、提案書など</td><td style="text-align:left;">機密、極秘</td></tr><tr><td style="text-align:left;">S3</td><td style="text-align:left;">Tmp_Bucket</td><td style="text-align:left;">一時ファイル、公開ファイルなど</td><td style="text-align:left;">公開</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">Tokyo_Bucket</td><td style="text-align:left;">ファイル（Office、PDFなど）</td><td style="text-align:left;">社外秘</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">Osaka_Bucket</td><td style="text-align:left;">ファイル（Office、PDFなど）</td><td style="text-align:left;">社外秘</td></tr><tr><td style="text-align:left;">RDS</td><td style="text-align:left;">Customer_master</td><td style="text-align:left;">個人情報、テーブル/カラム情報</td><td style="text-align:left;">個人情報/特定個人情報</td></tr><tr><td style="text-align:left;">…</td><td style="text-align:left;">…</td><td style="text-align:left;"></td><td style="text-align:left;">…</td></tr></tbody></table><h4 id="ラベリング毎にデータの取り扱い要件を確認する" tabindex="-1">ラベリング毎にデータの取り扱い要件を確認する <a class="header-anchor" href="#ラベリング毎にデータの取り扱い要件を確認する" aria-label="Permalink to &quot;ラベリング毎にデータの取り扱い要件を確認する&quot;">​</a></h4><p>ラベリングされた各リソースに対して、セキュリティガイドラインは以下のような項目を要求するが、そのほとんどに明確な値は記されておらず、各組織が自身のビジネスニーズに基づいて決定し、文書化することを求める。</p><p>よって、全ての要求に沿う形で定型化することは難しいが、事前に最低限決めておく必要があると考えられる必須項目および関連する値を示す。</p><ol><li><strong>データの保管</strong><ul><li>保管中のデータに対する定期的なバックアップを実施する <ul><li>頻度</li><li>保管場所</li><li>定期的なテストと復旧手順の確認など</li></ul></li></ul></li><li><strong>アクセス制御</strong><ul><li>最小権限の原則に基づき、データへのアクセスを必要最小限のユーザに限定する <ul><li>職務や役割に基づき、アクセスが許可される機密性レベルを定義など</li></ul></li></ul></li><li><strong>データの暗号化</strong><ul><li>保管中および転送中のデータを暗号化し、不正アクセス時の情報漏洩を防ぐ <ul><li>暗号方式（暗号強度）</li></ul></li><li>暗号鍵の適切な管理と定期的な更新など <ul><li>管理方式</li><li>パスワードローテーションなど</li></ul></li></ul></li><li><strong>データの削除</strong><ul><li>不要になったデータを安全に削除し、復元不能な状態にするなど</li></ul></li><li><strong>監査とログ管理</strong><ul><li>データへのアクセスや変更に関するログを記録し、定期的に監査する</li><li>ログを安全に保管し、改ざんや不正アクセスから保護する</li><li>要求される監査期間に応じることができる期間を保管するなど</li></ul></li></ol><p>▼例）各種ガイドラインでの要求事項（※章は参考となる主だったものを記載。記載した章の付近にも類似した要求内容があるため、合わせて確認すること）</p><table tabindex="0"><thead><tr><th style="text-align:left;">分類</th><th style="text-align:left;">項目</th><th style="text-align:left;">ISMS（ISO 27001）</th><th style="text-align:left;">NIST</th><th style="text-align:left;">PCI DSS</th><th style="text-align:left;">HIPAA</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;">特徴</td><td style="text-align:left;">リスクベースで情報セキュリティを管理する国際規格。特定の技術や手順に限定されず、汎用的な枠組みを提供する点が特徴</td><td style="text-align:left;">暗号方式や鍵長、鍵管理に関してより具体的な推奨事項や要件を示している点が特徴</td><td style="text-align:left;">監査頻度、技術要件に関してより具体的な推奨事項や要件を示している点が特徴</td><td style="text-align:left;">米国の医療保険制度改革法。保護対象の医療情報（PHI）の取り扱いについて、プライバシーとセキュリティに関する厳格な規則を定めている点が特徴</td></tr><tr><td style="text-align:left;">データの保管</td><td style="text-align:left;">文書名</td><td style="text-align:left;">ISO/IEC 27001:2022 の管理策</td><td style="text-align:left;">NIST SP 800-53 Rev. 5</td><td style="text-align:left;">PCI DSS v4.0</td><td style="text-align:left;">HIPAA</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">章</td><td style="text-align:left;">A.8.13</td><td style="text-align:left;">CP-9 SYSTEM BACKUP</td><td style="text-align:left;">12.10<br> ※明確なバックアップ要件は無い</td><td style="text-align:left;">CFR Part 164 Subpart C <br>※明確なバックアップ要件は無い</td></tr><tr><td style="text-align:left;">アクセス制御</td><td style="text-align:left;">文書名</td><td style="text-align:left;">ISO/IEC 27001:2022 の管理策</td><td style="text-align:left;">NIST SP 800-53 Rev. 5</td><td style="text-align:left;">PCI DSS v4.0</td><td style="text-align:left;">HIPAA</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">章</td><td style="text-align:left;">A.5.1、A.5.15、A.5.17、A.5.18</td><td style="text-align:left;">ACファミリー（Access Control）</td><td style="text-align:left;">7、8</td><td style="text-align:left;">CFR Part 164.308、164.312</td></tr><tr><td style="text-align:left;">データの暗号化</td><td style="text-align:left;">文書名</td><td style="text-align:left;">ISO/IEC 27001:2022 の管理策</td><td style="text-align:left;">暗号方式：NIST SP 800-131<br>管理方式：800-57<br>パスワードローテーション：800-63B</td><td style="text-align:left;">PCI DSS v4.0</td><td style="text-align:left;">HIPAA</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">章</td><td style="text-align:left;">A.8.24</td><td style="text-align:left;">SCファミリー（System and Communications Protection）<br>IAファミリー（Identification and Authentication）</td><td style="text-align:left;">暗号方式：3.7.2、4.2.1<br>管理方式：3.5.1、3.6.1<br>パスワードローテーション：8.3.9</td><td style="text-align:left;">暗号方式： CFR Part 164.312<br>管理方式： CFR Part 164.306 <br>※明確な管理方式要件は無い <br>パスワードローテーション： 164.308<br> ※明確なパスワードローテーション要件は無い</td></tr><tr><td style="text-align:left;">データの削除</td><td style="text-align:left;">文書名</td><td style="text-align:left;">ISO/IEC 27001:2022 の管理策</td><td style="text-align:left;">NIST SP 800-53、800-88、800-92</td><td style="text-align:left;">PCI DSS v4.0</td><td style="text-align:left;">HIPAA</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">章</td><td style="text-align:left;">A5.10、A8.10</td><td style="text-align:left;">AUファミリー（Audit and Accountability）</td><td style="text-align:left;">3.1.1、9.5.2</td><td style="text-align:left;">CFR Part 164.310、164.316</td></tr><tr><td style="text-align:left;">監査とログ管理</td><td style="text-align:left;">文書名</td><td style="text-align:left;">ISO/IEC 27001:2022 の管理策</td><td style="text-align:left;">NIST SP 800-53、800-88、800-92</td><td style="text-align:left;">PCI DSS v4.0</td><td style="text-align:left;">HIPAA</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">章</td><td style="text-align:left;">A8.15、A8.16</td><td style="text-align:left;">AUファミリー（Audit and Accountability）</td><td style="text-align:left;">10.2、10.3、10.4、10.5.1</td><td style="text-align:left;">CFR Part 164.310、164.312、164.316</td></tr></tbody></table><p>▼例）アウトプット（より、具体的な基準値を設けているNISTに準拠する例）</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">名称</th><th style="text-align:left;">機密性レベル</th><th style="text-align:left;">保管頻度</th><th style="text-align:left;">保管場所</th><th style="text-align:left;">アクセス制御</th><th style="text-align:left;">暗号方式（暗号強度）</th><th style="text-align:left;">暗号管理方式</th><th style="text-align:left;">パスワードローテーション</th><th style="text-align:left;">データの削除</th><th style="text-align:left;">監査ログ取得</th><th style="text-align:left;">監査間隔</th><th style="text-align:left;">監査ログ保持期限</th></tr></thead><tbody><tr><td style="text-align:left;">EC2</td><td style="text-align:left;">Official_Website</td><td style="text-align:left;">公開</td><td style="text-align:left;">日次</td><td style="text-align:left;">東京/大阪</td><td style="text-align:left;">特段無し。管理Web画面においては別途：IP制御、MFA、強固なPWなどが必要</td><td style="text-align:left;">暗号化無し</td><td style="text-align:left;">管理無し</td><td style="text-align:left;">無し※１</td><td style="text-align:left;">特段無し</td><td style="text-align:left;">有り</td><td style="text-align:left;">月次</td><td style="text-align:left;">1年</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">Internal_File_Server</td><td style="text-align:left;">機密、極秘</td><td style="text-align:left;">日次</td><td style="text-align:left;">東京/大阪</td><td style="text-align:left;">Aグループ：a,b,cフォルダを閲覧・書込可能 <br>Bグループ：b,cフォルダを閲覧・書込可能 <br>Cグループ：cフォルダを閲覧・書込可能 <br>Dグループ：cフォルダを閲覧可能※２</td><td style="text-align:left;">AES-GCM（256bit）</td><td style="text-align:left;">一元管理方式</td><td style="text-align:left;">無し※１</td><td style="text-align:left;">特段無し</td><td style="text-align:left;">有り</td><td style="text-align:left;">月次</td><td style="text-align:left;">1年</td></tr><tr><td style="text-align:left;">S3</td><td style="text-align:left;">Tmp_Bucket</td><td style="text-align:left;">公開</td><td style="text-align:left;">無し</td><td style="text-align:left;">無し</td><td style="text-align:left;">特段無し</td><td style="text-align:left;">暗号化無し</td><td style="text-align:left;">管理無し</td><td style="text-align:left;">無し※１</td><td style="text-align:left;">3日間隔で削除</td><td style="text-align:left;">有り</td><td style="text-align:left;">リアルタイム</td><td style="text-align:left;">3日</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">Tokyo_Bucket</td><td style="text-align:left;">社外秘</td><td style="text-align:left;">日次</td><td style="text-align:left;">東京/大阪</td><td style="text-align:left;">Aグループ：a,b,cバケットを閲覧・書込可能 <br>Bグループ：b,cバケットを閲覧・書込可能 <br>Cグループ：cバケットを閲覧・書込可能 <br>Dグループ：cバケットを閲覧可能※２</td><td style="text-align:left;">AES-GCM（256bit）</td><td style="text-align:left;">一元管理方式</td><td style="text-align:left;">有り※１</td><td style="text-align:left;">特段無し</td><td style="text-align:left;">有り</td><td style="text-align:left;">リアルタイム</td><td style="text-align:left;">1年</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">Osaka_Bucket</td><td style="text-align:left;">社外秘</td><td style="text-align:left;">日次</td><td style="text-align:left;">東京/大阪</td><td style="text-align:left;">Aグループ：a,b,cバケットを閲覧・書込可能 <br>Bグループ：b,cバケットを閲覧・書込可能 <br>Cグループ：cバケットを閲覧・書込可能 <br>Dグループ：cバケットを閲覧可能※２</td><td style="text-align:left;">AES-GCM（256bit）</td><td style="text-align:left;">一元管理方式</td><td style="text-align:left;">有り※１</td><td style="text-align:left;">特段無し</td><td style="text-align:left;">有り</td><td style="text-align:left;">リアルタイム</td><td style="text-align:left;">1年</td></tr><tr><td style="text-align:left;">RDS</td><td style="text-align:left;">Customer_master</td><td style="text-align:left;">個人情報/特定個人情報</td><td style="text-align:left;">日次</td><td style="text-align:left;">東京/大阪</td><td style="text-align:left;">Aグループ：a,b,cテーブルを閲覧・書込可能 <br>Bグループ：閲覧・書込不可 <br>Cグループ：閲覧・書込不可 <br>Dグループ：閲覧・書込不可※２</td><td style="text-align:left;">AES-GCM（256bit）</td><td style="text-align:left;">一元管理方式</td><td style="text-align:left;">無し※１</td><td style="text-align:left;">利用目的の達成を確認したら遅延なく消去※３</td><td style="text-align:left;">有り</td><td style="text-align:left;">リアルタイム</td><td style="text-align:left;">1年</td></tr><tr><td style="text-align:left;">…</td><td style="text-align:left;">…</td><td style="text-align:left;">…</td><td style="text-align:left;">…</td><td style="text-align:left;"></td><td style="text-align:left;">…</td><td style="text-align:left;">…</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">…</td><td style="text-align:left;">…</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><ul><li>※1：最新のNISTでは、パスワードの定期変更非推奨のガイダンスが示されている。これはユーザーが記憶するパスワードを指しており「頻繁な変更を強制されると、予測可能で弱いパスワードを設定しがちであり、かえってセキュリティが低下する」というユーザー行動の観察に基づいている。よって、システム的に自動でローテーション実装ができる場合は漏洩時のリスクを低減するため、定期的なローテーションした方が良いと考える。ユーザーが記憶しなければいけないパスワード（ローカル/ドメイン、特定アプリケーション等）には十分なパスワード強度、MFA利用などを活用することで、ローテーション無しとする方針でも良いと考える</li><li>※2：ユーザー/グループ毎に、職務内容 x 役職 x 部署 x 機密性レベルを総合的に考えて設定する</li><li>※3：個人情報保護法では消去期間の明確な指定はありません。”遅延なく” という表現は、仮に「会員登録を必要とするサービスを退会した際にも一定期間は再度問い合わせ等がある可能性があるため、会員情報を一定期間残す」等を許すものである。不要と判断したタイミングで消去する必要がある</li></ul><h4 id="取り扱い要件に対して、実装方法を検討する" tabindex="-1">取り扱い要件に対して、実装方法を検討する <a class="header-anchor" href="#取り扱い要件に対して、実装方法を検討する" aria-label="Permalink to &quot;取り扱い要件に対して、実装方法を検討する&quot;">​</a></h4><h5 id="データの保管" tabindex="-1">データの保管 <a class="header-anchor" href="#データの保管" aria-label="Permalink to &quot;データの保管&quot;">​</a></h5><table tabindex="0"><thead><tr><th>#</th><th>サービス概要</th><th>実装内容</th></tr></thead><tbody><tr><td>AWS Backup</td><td>EC2インスタンス、EBSボリューム、RDSデータベースなど、様々なAWSリソースのバックアップ設定や実行を一元的に管理する</td><td>先に記載した <a href="#各リソース一覧に機密性レベルをラベリングする">監査対象リソース</a> 毎にバックアップ頻度および保存先リージョンを設定する</td></tr><tr><td>S3</td><td>バックアップの保存先</td><td>定めた保存先リージョンにそれぞれ何のファイルが保存されているかが明白なバケットを作成し、AWS バックアップで実行されたバックアップファイルを保存する</td></tr></tbody></table><h5 id="アクセス制御" tabindex="-1">アクセス制御 <a class="header-anchor" href="#アクセス制御" aria-label="Permalink to &quot;アクセス制御&quot;">​</a></h5><table tabindex="0"><thead><tr><th>#</th><th>サービス概要</th><th>実装内容</th></tr></thead><tbody><tr><td>IAM</td><td>「誰が」 「何のリソースに対して」 「どのような操作を」 「どのような条件下で」 「許可/拒否するか」を付与する</td><td>個人に対して、各種リソースへの必要な操作のみに絞ったIAMポリシーを付与できるようにする</td></tr><tr><td>各種ポリシー（S3バケットポリシー、KMSキーポリシーなど）</td><td>「誰が」 「このリソースに対して」 「どのような操作を」 「どのような条件下で」 「許可/拒否するか」を付与する</td><td>各種リソースに対して、アクセスに必要なアカウントを許可するポリシーを付与できるようにする クロスアカウントアクセスや、パブリックアクセス等を用いる場合は本ポリシーで制御する</td></tr></tbody></table><h5 id="データの暗号化" tabindex="-1">データの暗号化 <a class="header-anchor" href="#データの暗号化" aria-label="Permalink to &quot;データの暗号化&quot;">​</a></h5><table tabindex="0"><thead><tr><th>#</th><th>サービス概要</th><th>実装内容</th></tr></thead><tbody><tr><td>KMS（Key Management Service）</td><td>保存データを暗号化するためのキーを発行・管理する。キーへのアクセス制御を行い、利用者を限定する</td><td>データ暗号については、基本的に以下で良い<br> ・キータイプ：対称キー<br> ・キー仕様：SYMMETRIC_DEFAULT<br> ・リージョン：単一リージョン※1</td></tr><tr><td>S3</td><td>特殊なコンプライアンス要件がある場合に、強度の高い暗号化する</td><td>金融サービス業界、医療業界、政府機関等の要件に多層暗号化が含まれる場合は、DSSE-KMSの利用を検討する※2</td></tr></tbody></table><ul><li>※1: 基本的に単一リージョンで良い。DR戦略でマルチリージョンを必須とする場合や、グローバル展開をしていて各リージョンにサービスを持つ組織はマルチリージョンを検討する</li><li>※2: 基本的にデフォルト（SSE-KMS）で十分な保護が得られるため、使われるケースは少ない。また、各種ガイドラインで多層暗号化を必須とするものは現時点でない（推奨はある）よって、高度なセキュリティ対策を求められるケースに検討すれば良い</li></ul><h5 id="データの削除" tabindex="-1">データの削除 <a class="header-anchor" href="#データの削除" aria-label="Permalink to &quot;データの削除&quot;">​</a></h5><table tabindex="0"><thead><tr><th>#</th><th>サービス概要</th><th>実装内容</th></tr></thead><tbody><tr><td>AWS Backup</td><td>バックアップしたデータのライフサイクルを定めます。また、バックアップサービスで作成・管理されたバックアップデータのライフサイクルを一元管理する</td><td>バックアップルールにて、改廃日数を登録する</td></tr><tr><td>S3 ライフサイクルポリシー</td><td>S3に保管されたデータをライフサイクルポリシーに基づいてデータを削除する ※1</td><td>S3のライフサイクルルールにて、改廃日数を登録する 個人情報を含むデータにおいては、利用目的の達成を確認したら遅延なく消去できる仕組みを検討する</td></tr></tbody></table><ul><li>※1：AWS バックアップに用いるS3バケットに、S3ライフサイクルを登録することは非推奨。バックアップで作成したリカバリデータはライフサイクルで設定し、ログやファイル等のライフサイクルはS3ライフサイクルポリシーで設定するような役割分担をすること</li></ul><h5 id="ログ管理" tabindex="-1">ログ管理 <a class="header-anchor" href="#ログ管理" aria-label="Permalink to &quot;ログ管理&quot;">​</a></h5><table tabindex="0"><thead><tr><th>#</th><th>サービス概要</th><th>実装内容</th></tr></thead><tbody><tr><td>S3</td><td>ログを保管する</td><td>基本的には、低コストでの長期保管かつ高可用性が得られるS3保管が望ましい。何のログが保存されているかが明白なバケットを作成し、保管する。</td></tr><tr><td>CloudWatch</td><td></td><td>ログ容量に対して費用が何十倍単位で変わるため、長期保管には向いていない。ただし、即時ログ検索ができるメリットはあるため、数週間〜数ヶ月程度のログ保管で十分な要件の場合、CloudWatchでも良い。</td></tr></tbody></table><h5 id="ログ監査" tabindex="-1">ログ監査 <a class="header-anchor" href="#ログ監査" aria-label="Permalink to &quot;ログ監査&quot;">​</a></h5><p>ログ監査においては、「AWSサービスを使った監査」と「サードパーティ製の監査」がある。</p><p>（更新予定）</p><h4 id="定期的な監査対応" tabindex="-1">定期的な監査対応 <a class="header-anchor" href="#定期的な監査対応" aria-label="Permalink to &quot;定期的な監査対応&quot;">​</a></h4><p>一度設定した対策も、時間の経過とともに変化する状況（新しい脅威、技術の進化、法規制の変更など）に対応できなくなる可能性があるため、データの安全性・信頼性、そして法令遵守を継続的に確保するためには定期的な監査が不可欠である。</p><p>本章で設計した各リソースは、それぞれシステム管理部門が異なることもあるが、監査部門が横断的に情報管理し、監査できる運用フローを設計する。</p><h2 id="コストの最適化" tabindex="-1">コストの最適化 <a class="header-anchor" href="#コストの最適化" aria-label="Permalink to &quot;コストの最適化&quot;">​</a></h2><p>AWSを利用する上でコストは切っても切り離せないテーマである。</p><p>AWSのコストは、システムのデータ量やアクセス頻度だけでなく、採用するアーキテクチャそのものに大きく左右される。そのため、コスト最適化は設計段階から考慮すべきである。</p><h3 id="課金体系" tabindex="-1">課金体系 <a class="header-anchor" href="#課金体系" aria-label="Permalink to &quot;課金体系&quot;">​</a></h3><p>多くのサービスが何かしらの形で従量課金型となっているため、まずは各サービスの課金体系を理解することが肝要である。課金体系は大きく以下のようなパターンがあり、組み合わせにより料金が定まる。</p><p>AWSは１カ月単位で請求がかかるため、全てのサービスにおいて時間の概念が存在する。また、サービスによっては無料のものも存在するが、他のサービスと組み合わせが前提となっているようなサービスの場合がほとんどである。</p><p>▼課金体系の例</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">課金方式</th><th style="text-align:left;"></th><th style="text-align:left;"></th><th style="text-align:left;"></th></tr></thead><tbody><tr><td style="text-align:left;">サービス</td><td style="text-align:left;">時間</td><td style="text-align:left;">スペック</td><td style="text-align:left;">データ量</td><td style="text-align:left;">回数</td></tr><tr><td style="text-align:left;">IAM (IAMを通じてアクセスした各サービスが有料の場合が多い)</td><td style="text-align:left;">無料</td><td style="text-align:left;">無料</td><td style="text-align:left;">無料</td><td style="text-align:left;">無料</td></tr><tr><td style="text-align:left;">VPC (関連サービスによる課金有り) <br>・例: ENIやEIPの利用による課金 <br>・例: ログの有効化等による配信先サービス利用による課金</td><td style="text-align:left;">無料</td><td style="text-align:left;">無料</td><td style="text-align:left;">無料</td><td style="text-align:left;">無料</td></tr><tr><td style="text-align:left;">EC2(インスタンス)</td><td style="text-align:left;">有料</td><td style="text-align:left;">有料</td><td style="text-align:left;">ー</td><td style="text-align:left;">ー</td></tr><tr><td style="text-align:left;">EC2(EBS)</td><td style="text-align:left;">有料</td><td style="text-align:left;">有料</td><td style="text-align:left;">ー</td><td style="text-align:left;">ー</td></tr><tr><td style="text-align:left;">Lambda</td><td style="text-align:left;">有料</td><td style="text-align:left;">有料</td><td style="text-align:left;">ー</td><td style="text-align:left;">ー</td></tr><tr><td style="text-align:left;">S3</td><td style="text-align:left;">有料</td><td style="text-align:left;">有料</td><td style="text-align:left;">有料</td><td style="text-align:left;">有料</td></tr></tbody></table><h3 id="見える化" tabindex="-1">見える化 <a class="header-anchor" href="#見える化" aria-label="Permalink to &quot;見える化&quot;">​</a></h3><p>AWSのコストの可視化方法はいくつかある。前章にもあるように、利用するシステムの種類毎や検証環境、本番環境等の用途に応じてアカウントを分けて設計する事も1つの手段である。その他、1つのアカウントの中でのコストの見える化には、タグを用いるパターンが多い。</p><p>AWSにおけるタグは、各サービスリソースに対して属性情報を付与ができ、コストの見える化にも活用できる。見える化をするためには、以下のような分け方が一般的には考えられる。</p><p>▼分割単位の例</p><ul><li><strong>組織</strong>: 会社、部門、プロジェクト</li><li><strong>環境</strong>: 本番、検証、開発</li><li><strong>用途</strong>: システム種別</li><li><strong>機能</strong>: フロントエンド、バックエンドなど</li></ul><p>推奨は以下の通り。</p><ul><li>アカウントを「組織 × 環境 × システム種別」で分ける。ただし、システム種別はタグを用いた代用も可とする <ul><li>一般的に企業組織では、部門・目的ごとに予算設定される。多くのAWSのサービスでは、タグで費用の可視化ができるが、一部は不可である(例：NW通信料等はタグによる可視化ができない)。これらの費用を共通費用として、「タグで按分された割合に基づき按分する」 「一律均等に按分する」などをあらかじめ取り決めすれば問題はないが、負担割合の考え方はシビアになる可能性が高い。そのため、厳密に区分けが可能なアカウントを用いる</li><li>組織の中で1部門が管理する範囲内(予算の出所が同じ)であれば、その中でタグを用いた按分をすることで、「大まかな費用での按分」が許容される場合が多いため、システム種別はタグで代替することもありえる</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">コストの「最適化」ではなく、「最小化」を目指したい場合は</p><p>純粋にコストの「最小化」を目指す場合は、1アカウントの中で全てを管理する方が、総支払額は最も安価になる可能性がある。ただしその場合は、セキュリティ・運用のリスク管理・コストの責任分解といった、ガバナンス上の課題を別途解決する必要がある。 最低限、対応すべきアカウント構成は<a href="#マルチアカウントを利用した環境分離パターン">マルチアカウントを利用した環境分離パターン</a> に従うことを推奨する。</p></div><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://future-architect.github.io/coding-standards/documents/forAWSResource/AWS%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E5%91%BD%E5%90%8D%E8%A6%8F%E7%B4%84.html#%E3%82%BF%E3%82%AF%E3%82%99%E3%82%AD%E3%83%BC" target="_blank" rel="noreferrer">タグキー | AWSインフラ命名規約</a> にタグについての推奨事項が記載されている。</p></div><h3 id="コストの削減" tabindex="-1">コストの削減 <a class="header-anchor" href="#コストの削減" aria-label="Permalink to &quot;コストの削減&quot;">​</a></h3><p>コスト最適化を目指すにあたって、代表的なコスト低減の内容を紹介する。</p><h4 id="リセラーの活用" tabindex="-1">リセラーの活用 <a class="header-anchor" href="#リセラーの活用" aria-label="Permalink to &quot;リセラーの活用&quot;">​</a></h4><p>AWSとの直接契約をしての利用も可だが、リセラーを活用する事で、下記のような各種特典が付くことが多い。</p><ul><li>請求金額が数％低減する</li></ul><p>推奨は以下の通り。</p><ul><li>AWSの請求代行を行うリセラーを活用する</li></ul><div class="warning custom-block"><p class="custom-block-title">リセラー利用の注意点</p><p>リセラー毎に各種ルールがあり、本来意図した利用ができない可能性がありえる。そのため事前の確認と今後の利用計画に支障が無いか確認が必要である。</p><p>一般的にリセラー経由とする事で発生しやすい事象として以下がある。</p><ul><li>サポートの一次受けはリセラーが担うため、ダイレクトなAWSサポートではなくなる</li><li>利用費用の正確な金額がわかりくい(AWSのコンソールの金額と差異が発生する)</li><li>AWSアカウントのrootユーザをリセラーが保持する場合がある</li></ul></div><h4 id="コンピューティングにおけるsavingsplansの活用" tabindex="-1">コンピューティングにおけるSavingsPlansの活用 <a class="header-anchor" href="#コンピューティングにおけるsavingsplansの活用" aria-label="Permalink to &quot;コンピューティングにおけるSavingsPlansの活用&quot;">​</a></h4><p>AWSの公式ドキュメントに記載されている下記がまとまっている。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">Compute Savings Plans</th><th style="text-align:left;">EC2 Instance Savings Plans</th><th style="text-align:left;">コンバーティブル RI</th><th style="text-align:left;">スタンダード RI</th></tr></thead><tbody><tr><td style="text-align:left;">オンデマンドからの削減</td><td style="text-align:left;">最大 66%</td><td style="text-align:left;">最大 72%</td><td style="text-align:left;">最大 66%</td><td style="text-align:left;">最大 72%</td></tr><tr><td style="text-align:left;">金銭的コミットメント（※）と引き換えの低価格</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">すべてのインスタンスファミリーに自動的に価格を適用</td><td style="text-align:left;">✅️</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">すべてのインスタンスサイズに自動的に価格を適用</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">すべてのテナンシーや OS に自動的に価格を適用</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">Fargate を使用して Amazon ECS と Amazon EKS に自動的に適用</td><td style="text-align:left;">✅️</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">Lambda に自動的に適用</td><td style="text-align:left;">✅️</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">AWS リージョン間で料金を自動的に適用する</td><td style="text-align:left;">✅️</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">1 年または 3 年の期間オプション</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td></tr></tbody></table><p>※金銭的コミットメントとは: 「1時間あたり10ドル分を1年間利用する」といったように、一定期間にわたる一定量の使用量を約束（コミット）すること。この約束と引き換えに、オンデマンド料金よりも大幅な割引が適用される</p><p>推奨は以下のとおり。</p><ul><li>Compute Savings Plans の適用を第一の選択肢とする <ul><li>最大割引率はEC2Instance Savings PlansやスタンダードRIと比較して劣るものの、FargateやLambda等を含めカバー範囲が広いため</li></ul></li><li>「プラン適用期間中は構成が変わらない」かつ、利用がEC2の場合は、EC2Instance Savings Plansも候補として検討する <ul><li>SavingsPlansは事前のコミットメントによってオンデマンド価格よりも低価格で提供される仕組みであるため</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://docs.aws.amazon.com/ja_jp/savingsplans/latest/userguide/sp-ris.html" target="_blank" rel="noreferrer">Compute Savings Plans とリザーブドインスタンス</a></p></div><h4 id="ストレージ-s3-におけるストレージクラスとライフサイクルポリシーの活用" tabindex="-1">ストレージ(S3)におけるストレージクラスとライフサイクルポリシーの活用 <a class="header-anchor" href="#ストレージ-s3-におけるストレージクラスとライフサイクルポリシーの活用" aria-label="Permalink to &quot;ストレージ(S3)におけるストレージクラスとライフサイクルポリシーの活用&quot;">​</a></h4><p>S3には、標準提供されているストレージクラス以外に、要求されるアクセス頻度、応答速度、冗長性に応じた各種ストレージクラスが用意されている。基本的には、アクセス頻度が低く、応答時間が長くても問題ないほど、ストレージ単価は安価になるが、データ取り出し料金が発生する場合もある。データのライフサイクルやワークロードに併せて適切なクラスを選択する必要がある。</p><table tabindex="0"><thead><tr><th style="text-align:left;">ストレージクラス</th><th style="text-align:left;">対象</th><th style="text-align:left;">耐久性</th><th style="text-align:left;">可用性</th><th style="text-align:left;">Availability Zone</th><th style="text-align:left;">最小ストレージ期間</th><th style="text-align:left;">請求可能な最小オブジェクトサイズ</th><th style="text-align:left;">その他の考慮事項</th></tr></thead><tbody><tr><td style="text-align:left;">S3 Standard</td><td style="text-align:left;">ミリ秒アクセスで頻繁にアクセスされたデータ (月に 2 回以上)</td><td style="text-align:left;">99.999999999%</td><td style="text-align:left;">99.99%</td><td style="text-align:left;">&gt;= 3</td><td style="text-align:left;">なし</td><td style="text-align:left;">なし</td><td style="text-align:left;">なし</td></tr><tr><td style="text-align:left;">S3 Standard–IA</td><td style="text-align:left;">存続期間が長く、ミリ秒単位のアクセスデータであまり頻繁にアクセスされない (1回/月)</td><td style="text-align:left;">99.999999999%</td><td style="text-align:left;">99.9%</td><td style="text-align:left;">&gt;= 3</td><td style="text-align:left;">30 日間</td><td style="text-align:left;">128 KB</td><td style="text-align:left;">GB 単位の取り出し料金が適用される</td></tr><tr><td style="text-align:left;">S3 Intelligent-Tiering</td><td style="text-align:left;">認識されていない、変更されている、または予測不可能なアクセスパターンを持つデータ</td><td style="text-align:left;">99.999999999%</td><td style="text-align:left;">99.9%</td><td style="text-align:left;">&gt;= 3</td><td style="text-align:left;">なし</td><td style="text-align:left;">なし</td><td style="text-align:left;">オブジェクトごとのモニタリングとオートメーションの料金が適用される。取り出し料はありません</td></tr><tr><td style="text-align:left;">S3 One Zone-IA</td><td style="text-align:left;">再作成可能で、ミリ秒単位でアクセスされたデータでアクセス頻度が低く（1回/月)</td><td style="text-align:left;">99.999999999%</td><td style="text-align:left;">99.5%</td><td style="text-align:left;">1</td><td style="text-align:left;">30 日間</td><td style="text-align:left;">128 KB</td><td style="text-align:left;">GB 単位の取り出し料金が適用される。アベイラビリティーゾーンの損失においては回復性がありません</td></tr><tr><td style="text-align:left;">S3 Express One Zone</td><td style="text-align:left;">単一の AWS アベイラビリティーゾーン内のレイテンシの影響を受けやすいアプリケーションに対する 1 桁のミリ秒単位のデータアクセス</td><td style="text-align:left;">99.999999999%</td><td style="text-align:left;">99.95%</td><td style="text-align:left;">1</td><td style="text-align:left;">なし</td><td style="text-align:left;">なし</td><td style="text-align:left;">S3 Express One Zoneのオブジェクトは、選択した単一の AWS アベイラビリティーゾーンに保存される</td></tr><tr><td style="text-align:left;">S3 Glacier Instant Retrieval</td><td style="text-align:left;">存続期間が長く、ミリ秒のアクセスで四半期に一度アクセスされるアーカイブデータ</td><td style="text-align:left;">99.999999999%</td><td style="text-align:left;">99.9%</td><td style="text-align:left;">&gt;= 3</td><td style="text-align:left;">90 日間</td><td style="text-align:left;">128 KB</td><td style="text-align:left;">GB 単位の取り出し料金が適用される</td></tr><tr><td style="text-align:left;">S3 Glacier Flexible Retrieval</td><td style="text-align:left;">存続期間が長く、取得時間は分から数時間になり、1回/年アクセスされたアーカイブデータ</td><td style="text-align:left;">99.999999999%</td><td style="text-align:left;">99.99％ (オブジェクトを復元後)</td><td style="text-align:left;">&gt;= 3</td><td style="text-align:left;">90 日間</td><td style="text-align:left;">NA*</td><td style="text-align:left;">GB 単位の取り出し料金が適用される。これらにアクセスする前に、まずアーカイブされたオブジェクトを復元する必要がある</td></tr><tr><td style="text-align:left;">S3 Glacier Deep Archive</td><td style="text-align:left;">存続期間が長く、1回/年 未満でアクセスされ、取得時間は何時間に渡ってアクセスされるアーカイブデータ</td><td style="text-align:left;">99.999999999%</td><td style="text-align:left;">99.99％ (オブジェクトを復元後)</td><td style="text-align:left;">&gt;= 3</td><td style="text-align:left;">180 日間</td><td style="text-align:left;">NA**</td><td style="text-align:left;">GB 単位の取り出し料金が適用される。これらにアクセスする前に、まずアーカイブされたオブジェクトを復元する必要がある</td></tr><tr><td style="text-align:left;">低冗長化ストレージ 非推奨</td><td style="text-align:left;">重要ではない、ミリ秒単位で頻繁にアクセスされるデータ</td><td style="text-align:left;">99.99%</td><td style="text-align:left;">99.99%</td><td style="text-align:left;">&gt;= 3</td><td style="text-align:left;">なし</td><td style="text-align:left;">なし</td><td style="text-align:left;">なし</td></tr></tbody></table><p>使い分けの例としては、Webを公開する際の静的コンテンツの配置場所として利用するならば、高レスポンスのストレージクラスを採用する(ただし、一般的にはCloudFront等のCDN配置をする事も多いため構成に合わせて選択する)。また、普段アクセスをしないもの(バックアップ用途のファイルや一定の期間を過ぎたログ等)は低レスポンスのストレージクラスを選択することが多い。</p><p>推奨は以下の通り。</p><ul><li>Intelligent-Tiering の選択を第一の選択肢とする <ul><li>各S3バケットの利用用途や各データの保持期限等を厳格に定義できる場合は、種類毎にストレージクラスの使い分け、およびS3のライフサイクルポリシーを用いて、自身でデータの改廃およびストレージクラス変更のコントロールする事を推奨することでコストの低減は可能な一方で、設定の複雑化を招き、運用上の負担になる可能性が高い</li><li>Intelligent-Tieringでは一定の定義に基づいて、S3上のファイルを各ストレージクラスへと移動させる動作、およびストレージクラスとしてどれを利用するか？ が選択可能なため、システム上、運用上の挙動もコントロールが可能</li></ul></li></ul><div class="warning custom-block"><p class="custom-block-title">Intelligent-Tieringの注意点</p><p>Intelligent-Tieringは、128KB未満の小さなオブジェクトを低頻度アクセス階層へは移動させず、常に高頻度アクセス階層に配置されない。そのため、サイズが小さく、大量のファイルを保存する場合は、別のストレージの利用を検討する必要がある。</p></div><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/userguide/storage-class-intro.html" target="_blank" rel="noreferrer">Amazon S3 ストレージクラスの理解と管理 - Amazon Simple Storage Service</a></p></div><h2 id="踏み台サーバ" tabindex="-1">踏み台サーバ <a class="header-anchor" href="#踏み台サーバ" aria-label="Permalink to &quot;踏み台サーバ&quot;">​</a></h2><p>踏み台サーバーとは、RDSのような内部リソースへのアクセスを安全に仲介し、かつ重大な手動操作の監査証跡を確実に残すことを目的とした、中継用のサーバーである。目的のサーバーへの中継点となることから踏み台サーバー（ジャンプサーバー）、また、内部の重要なリソースを守る要塞の役割を持つことからBastion（バスティオン）サーバーとも呼ばれる。</p><p>例えば踏み台を経由して以下のような操作を行う。</p><ul><li>curlなどを用いた疎通確認</li><li>RDSへのデータ調査/データパッチ</li><li>Terraformなどのインフラ操作</li></ul><p>大きく、設計パターンは以下の3案が考えられる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">（1）EC2踏み台サーバー</th><th style="text-align:left;">（2）セッション Manager</th><th style="text-align:left;">（3）EC2 Instance Connect Endpoint</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;">パブリックサブネットにEC2を配置または、ALB経由でアクセスする方式。セキュリティグループで接続元を絞り込む</td><td style="text-align:left;">SSM Agentを介してプライベートサブネット内のEC2に接続する方式</td><td style="text-align:left;">VPCエンドポイント経由で、踏み台サーバーレスで、SSHネイティブに接続が可能な方式</td></tr><tr><td style="text-align:left;">IAM制御</td><td style="text-align:left;">❌️アクセス制御はOS/鍵</td><td style="text-align:left;">✅️あり</td><td style="text-align:left;">✅️あり</td></tr><tr><td style="text-align:left;">インバウンドポート</td><td style="text-align:left;">❌️SSH(22)など開放する必要</td><td style="text-align:left;">✅️不要</td><td style="text-align:left;">✅️不要</td></tr><tr><td style="text-align:left;">SSHキー管理</td><td style="text-align:left;">❌️サーバー/クライアントで必要</td><td style="text-align:left;">✅️不要</td><td style="text-align:left;">✅️不要（IAM認証に基づき一時的な鍵が利用されるため、永続的なキーペアの管理が不要である）</td></tr><tr><td style="text-align:left;">踏み台サーバー管理</td><td style="text-align:left;">❌️OSパッチ、監視等が必要</td><td style="text-align:left;">✅️不要</td><td style="text-align:left;">✅️不要</td></tr><tr><td style="text-align:left;">ファイル転送</td><td style="text-align:left;">✅️SCP/SFTPなど</td><td style="text-align:left;">✅️S3経由など一手間かかる。プラグインを入れればSSH（SCPも可能）</td><td style="text-align:left;">✅️SCPなど</td></tr><tr><td style="text-align:left;">RDS接続</td><td style="text-align:left;">✅️SSHトンネリング</td><td style="text-align:left;">✅️ポートフォワード</td><td style="text-align:left;">⚠️ 直接のポートフォワーディング機能はない。そのため、一度EIC Endpoint経由でEC2に接続、SSHトンネルの必要</td></tr><tr><td style="text-align:left;">セッションログ</td><td style="text-align:left;">⚠️OSレベルで設定必要</td><td style="text-align:left;">✅️CloudWatch/S3など標準機能</td><td style="text-align:left;">⚠️CloudTrailでは接続の成功/失敗ログのみ。コマンドログは別途EC2上のOSレベルで取得する必要がある</td></tr><tr><td style="text-align:left;">利用費用</td><td style="text-align:left;">✅️ALB、EC2インスタンス費用</td><td style="text-align:left;">✅️EC2費用のみ。ssm費用は基本無料</td><td style="text-align:left;">⚠️EICエンドポイント自体の利用料（時間単価＋データ処理量）が発生。RDS接続時は別途、EC2が必要</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>原則、（2）を利用する <ul><li>IAMによるユーザーごとのアクセス制御やSSHキーペア管理の廃止といった運用メリットがあるため</li><li>実行コマンドを含めた操作ログ（セッションログ）を標準で取得できる監査上の優位性と、RDSなどへのポートフォワーディング機能を持つ利便性があるため</li></ul></li></ul><h2 id="アプリ特性に応じたアーキテクチャパターン" tabindex="-1">アプリ特性に応じたアーキテクチャパターン <a class="header-anchor" href="#アプリ特性に応じたアーキテクチャパターン" aria-label="Permalink to &quot;アプリ特性に応じたアーキテクチャパターン&quot;">​</a></h2><h3 id="spaのホスティング" tabindex="-1">SPAのホスティング <a class="header-anchor" href="#spaのホスティング" aria-label="Permalink to &quot;SPAのホスティング&quot;">​</a></h3><p><a href="/arch-guidelines/documents/forWebFrontend/web_frontend_guidelines.html#ホスティング方式">フロントエンド設計ガイドライン &gt; ホスティング</a> 章に準じる。</p><h3 id="api-gateway設計" tabindex="-1">API Gateway設計 <a class="header-anchor" href="#api-gateway設計" aria-label="Permalink to &quot;API Gateway設計&quot;">​</a></h3><p>Amazon API Gatewayは、APIの作成、管理、自動スケーリング、セキュリティ（認証・認可・レート制限）、API利用状況モニタリングなどの機能を提供するフルマネージドサービスである。</p><p>主な考慮事項や論点に以下がある。</p><ul><li><strong>API Gatewayの利用是非</strong><ul><li>API Gatewayの利用を検討する際、API Gateway自体を利用するか否か、またはKongなどのサードパーティ製APIゲートウェイを利用するかを検討する必要がある</li></ul></li><li><strong>Custom Authorizerを利用すべきかどうか</strong><ul><li>アプリケーション側で、認可処理を実装すべきか、Custom Authorizer側で実装すべきか</li></ul></li><li><strong>OpenAPI定義をAPI Gatewayの構築に利用するかどうか</strong><ul><li>後述</li></ul></li><li><strong>CORS対応をAPI Gateway側かアプリケーション側のどちらの役割とするか</strong><ul><li>後述</li></ul></li><li><strong>入力のバリデーションをAPIゲートウェイ側で行うか、アプリケーション側で行うか</strong><ul><li>後述</li></ul></li></ul><p>API Gatewayの運用として、先に上げたようにOpenAPI定義ファイル（<code>api.yaml</code>）を、API Gatewayのリリース構築に用いるかどうかはチームによって方針が揺れやすい。まず、<code>api.yaml</code> に <a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration.html" target="_blank" rel="noreferrer">x-amazon-apigateway-integration</a> の拡張項目を追加することで、TerraformなどのIaC経由ではなくスキーマ情報を元にインフラの設定が可能となる。</p><p>しかし、API Gatewayをデプロイメント環境ごとに作成する場合は、 <code>api.yaml</code> も環境毎に作成するかIaC側で一工夫が必要であり、検討すべき内容が多い。<code>api.yaml</code> はアプリチームが開発するとして1ファイルに留めたい（拡張項目の追加は必要最低限にしたい）、しかしCORSやバリデーションなどはコスト最適化の観点からできる限りAPI Gateway側に寄せたいといった要件をバランスさせると、下表の2つの手法が考えられる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">（1）松: できる限りAPI Gatewayに寄せる</th><th style="text-align:left;">（2）竹: CORSのみAPI Gatewayに寄せ、入力バリデーションは諦める</th><th style="text-align:left;">（3）梅: アプリケーション側で実装</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;"><code>x-amazon-apigateway-integration</code> には記載する。環境差異はTerraform側のテンプレート機能を利用する</td><td style="text-align:left;"><code>x-amazon-apigateway-integration</code> には記載せず、マッピング情報はTerraform側で記述する方法。ルーティングは <code>{proxy+}</code> などでパススルーさせる</td><td style="text-align:left;"><code>{proxy+}でパススルーし、CORSもアプリケーションで実装する</code></td></tr><tr><td style="text-align:left;">OAS定義</td><td style="text-align:left;"><code>❌️api.yaml</code> に専用設定を追加する必要があり、学習コストが高い</td><td style="text-align:left;">✅️独自な設定が入らないためシンプル</td><td style="text-align:left;">✅️独自な設定が入らないためシンプル</td></tr><tr><td style="text-align:left;">入力のバリデーション</td><td style="text-align:left;"><code>✅️入力バリデーションの設定でAPI Gatewayにて対応可能</code></td><td style="text-align:left;">❌️パススルーされるため、アプリケーション側で実施することになる</td><td style="text-align:left;">❌️パススルーされるため、アプリケーション側で実施することになる</td></tr><tr><td style="text-align:left;">CORS</td><td style="text-align:left;">✅️{proxy+}とOPTIONS指定で、API Gateway側で実行可能</td><td style="text-align:left;">✅️{proxy+}とOPTIONS指定で、API Gateway側で実行可能なように、Terraform定義を追加</td><td style="text-align:left;">❌️アプリケーション側で実行させる。Terraform側でCORSの記述は無くなる</td></tr><tr><td style="text-align:left;">チーム役割分担</td><td style="text-align:left;">⚠️<code>api.yaml</code> にインフラ定義も混在し、担当範囲が不明確になる懸念がある</td><td style="text-align:left;">✅️インフラとアプリチームが分離している場合、役割分担が明確になりやすい</td><td style="text-align:left;">✅️インフラとアプリチームが分離している場合、役割分担が明確になりやすい</td></tr><tr><td style="text-align:left;">Terraform構築の手間</td><td style="text-align:left;">✅️OAS側に寄せられる分シンプルになる。バリデーション定義の命名一致は気をつける必要がある</td><td style="text-align:left;">⚠️CORS対応の定義がやや煩雑</td><td style="text-align:left;">✅️シンプルに保てる</td></tr><tr><td style="text-align:left;">デプロイ難易度</td><td style="text-align:left;">❌️<code>api.yaml</code> をインフラ構築でも利用するため、アプリ・インフラで整合性を保ってデプロイする必要がある</td><td style="text-align:left;">✅️インフラ・アプリ間で、リリース順序に依存関係は無い</td><td style="text-align:left;">✅️インフラ・アプリ間で、リリース順序に依存関係は無い</td></tr></tbody></table><p>▼（1）のOAS定義（<code>api.yaml</code>）とTerraformコードの例</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># api.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">openapi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ECS Backend Integration API</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-amazon-apigateway-request-validators</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  allParamsValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    validateRequestBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    validateRequestParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  /orders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      summary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">注文を受け付ける</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">注文を受け付ける</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      x-amazon-apigateway-request-validator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">allParamsValidator</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      requestBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        $ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#/components/requestBodies/CreateOrderRequest&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      responses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;201&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">成功</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;400&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">入力が不正</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;500&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">内部エラー</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      x-amazon-apigateway-integration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:\v        </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http_proxy&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${stageVariables.backendPrivateUrl}&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # https://&lt;ALBのプライベートDNS名&gt; などを指定</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        httpMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        connectionType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;VPC_LINK&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        connectionId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${stageVariables.vpcLinkId}&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        passthroughBehavior</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;when_no_match&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        timeoutInMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">29000</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        payloadFormatVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><div class="language-tf vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resource</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;aws_api_gateway_rest_api&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foo&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foo api gaetway&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/api.yaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ... 省略 ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resource</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;aws_api_gateway_request_validator&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;all_params&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                     =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;allParamsValidator&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rest_api_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aws_api_gateway_rest_api</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  validate_request_body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  validate_request_parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>また、よくある動作モデルを複数選択でき、Web APIとして利用する場合は以下の2種類から選択することが多い。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">REST API</th><th style="text-align:left;">HTTP API</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;">多機能なモデル</td><td style="text-align:left;">より機能を絞って低レイテンシ・低コストなモデル</td></tr><tr><td style="text-align:left;">GA時期</td><td style="text-align:left;">2015年7月</td><td style="text-align:left;">2020年4月</td></tr><tr><td style="text-align:left;">利用費用</td><td style="text-align:left;">⚠️比較すると高い(リクエスト数、データ転送量、キャッシュサイズ)</td><td style="text-align:left;">✅️低価格 (リクエスト、データ転送)</td></tr><tr><td style="text-align:left;">レイテンシ</td><td style="text-align:left;">⚠️比較すると高い</td><td style="text-align:left;">✅️低い</td></tr><tr><td style="text-align:left;">キャッシュ</td><td style="text-align:left;">✅️レスポンスのキャッシュが可能。TTL設定可能</td><td style="text-align:left;">❌️無し（CloudFrontなど組み合わせの必要）</td></tr><tr><td style="text-align:left;">バージョニング</td><td style="text-align:left;">✅️ステージ変数（例: dev, staging, prod）等で詳細な管理が可能</td><td style="text-align:left;">⚠️シンプルなステージ管理($defaultなど)</td></tr><tr><td style="text-align:left;">認証</td><td style="text-align:left;">✅️IAM, Cognito, Lambdaオーソライザー, APIキー</td><td style="text-align:left;">✅️IAM, JWTオーソライザー(OIDC/Cognito), Lambdaオーソライザー</td></tr><tr><td style="text-align:left;">WAF統合</td><td style="text-align:left;">✅️</td><td style="text-align:left;">❌️不可。Public APIの場合、L7レベルの防御が必須な場合はノックアウト要因になりえる</td></tr><tr><td style="text-align:left;">レートリミット</td><td style="text-align:left;">✅️APIキーによる使用量プランで管理</td><td style="text-align:left;">⚠️アカウント/ルートレベルでの制限。API利用者ごとの細かい流量制御が必須となるマルチテナント型のSaaS構築などの場合は、ノックアウト要因になりえる</td></tr><tr><td style="text-align:left;">実行時間上限</td><td style="text-align:left;">⚠️29秒(バックエンド統合タイムアウト)</td><td style="text-align:left;">⚠️29秒(バックエンド統合タイムアウト)</td></tr><tr><td style="text-align:left;">ペイロードサイズ上限</td><td style="text-align:left;">⚠️10MB</td><td style="text-align:left;">⚠️10MB</td></tr><tr><td style="text-align:left;">OpenAPI Spec</td><td style="text-align:left;">✅️2.0、3.0 のインポート/エクスポートに対応※1</td><td style="text-align:left;">✅️3.0 のインポート/エクスポートに対応※1</td></tr><tr><td style="text-align:left;">CORS設定</td><td style="text-align:left;">✅️可能</td><td style="text-align:left;">✅️可能</td></tr><tr><td style="text-align:left;">WebSocket対応</td><td style="text-align:left;">❌️非対応</td><td style="text-align:left;">✅️サポートあり</td></tr></tbody></table><p>※1 <a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/api-gateway-known-issues.html#api-gateway-known-issues-rest-apis" target="_blank" rel="noreferrer">Amazon API Gateway に関する重要な注意点</a> に記載があるように、exampleタグがサポートされていないなど制約がある点に注意する</p><p>推奨は以下の通り。</p><ul><li>自システム内のAPI連携であれば、API Gatewayは原則、利用しない <ul><li>構成要素をシンプルに留め、かつ費用を抑えるため</li></ul></li><li>API Gatewayで要件を満たせない場合のみ、kongなどサードパーティ製のプロダクトの導入検討を行う <ul><li>マネージドサービスに寄せることで、保守運用の難易度・コストを低減させる狙いのため</li></ul></li><li>システム的な境界で、特にレートリミットが必要な場合は、API Gatewayを利用する <ul><li>個別の実装が困難であるため</li></ul></li><li>Custom Aurhorizerによる認可は、できる限り行わず標準の仕組み（Cognitoユーザープールオーソライザー、JWTオーソライザー）を用いる <ul><li>開発・運用コストを低く抑えるため</li><li>標準で対応できない場合のみ、Custom Authorizerを利用しても良い。Lambda起動によるレイテンシのペナルティや、コスト面が気になる場合はアプリケーション側で認可処理をしても良い</li></ul></li><li>APIのパスルーティングは、原則バックエンド側のアプリケーションで実装する <ul><li>Lambdaの場合も、Single purpose LambdaではなくLambdalithで構築することで、アプリケーション側の変更意図でインフラ変更なしに柔軟に変更可能とすることを推奨する</li></ul></li><li>OpenAPI Specifitaionは、API Gatewayの構築ではTerraformなどで直接利用せず、（2）竹案の「CORSのみAPI Gatewayに寄せ、入力バリデーションは諦める」を採用する <ul><li>アプリ、インフラの責任分界点を明確にするため。<code>api.yaml</code> は純粋なインターフェース定義とし、インフラはルーティングや統合、CORSといった横断的な設定に責務とする</li><li>CORS対応は正常パスで必ずリクエストが到達するため、後続のコンピューティング資源が動作することを抑えられ、コスト最適化に有効</li><li>入力バリデーションは、API Gateway層でブロックできると有効だが、プライベートAPIであればバリデーションエラーの発生頻度が低いと考えられる。また、パブリックAPIでも前段のWAFなどで大量アクセスがブロックする機能配置と考えると、費用対効果が低いと判断</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html#api-gateway-request-validation-basic-definitions" target="_blank" rel="noreferrer">Request validation for REST APIs in API Gateway</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/http-api-vs-rest.html" target="_blank" rel="noreferrer">REST API と HTTP API のどちらかを選択する - Amazon API Gateway</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/http-api-open-api.html" target="_blank" rel="noreferrer">API Gateway で HTTP API の OpenAPI 定義を使用する</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/limits.html" target="_blank" rel="noreferrer">Amazon API Gateway のクォータと重要な注意点</a></li></ul></div><h3 id="cloudfront-waf" tabindex="-1">CloudFront+WAF <a class="header-anchor" href="#cloudfront-waf" aria-label="Permalink to &quot;CloudFront+WAF&quot;">​</a></h3><p>AWS CloudFrontは、AWSが提供するコンテンツデリバリーネットワーク (CDN) サービスである。主な利点は以下の通りである。</p><ul><li>レイテンシの改善: 世界中に分散配置されたエッジロケーションにコンテンツやAPIレスポンスをキャッシュし、ユーザーに最も近い拠点から配信することで、応答速度を大幅に改善する</li><li>オリジンサーバーの負荷軽減: キャッシュから応答することで、オリジンサーバーへのアクセスを削減する</li><li>セキュリティの強化: DDoS攻撃に対する大規模な吸収・緩和機能を提供する。さらにAWS WAFと組み合わせることで、アプリケーション層への攻撃に対する防御を強化できる</li></ul><p>注意として、ユーザーによって可視性の制御が必要なコンテンツ（Web APIレスポンスも含む）は、キャッシュが可能かどうか適切に判断することが必要である。</p><p>本節ではWeb APIにおけるCloudFrontの利用について説明する。静的コンテンツ（HTML, CSS, JavaScript, 画像, 動画など）については考慮の範囲外とする。</p><p>CloudFrontを利用しない場合は、API Gateway（またはALB）をWAF・Shield（Adv） と組み合わせて公開すると考えられる。下表はこの構成とセキュリティ面で比較しまとめた。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">（1）API GW/ALB + WAF + Shield</th><th style="text-align:left;">（2）CloudFront + WAF + Shield</th></tr></thead><tbody><tr><td style="text-align:left;">攻撃を防ぐ層</td><td style="text-align:left;">AWSリージョン内</td><td style="text-align:left;">グローバルなエッジロケーション（（1）よりユーザーに近い場所で稼働）</td></tr><tr><td style="text-align:left;">オリジンへの影響</td><td style="text-align:left;">❌️攻撃がリージョンに到達</td><td style="text-align:left;">✅️フィルタリングされたトラフィックのみ到達</td></tr><tr><td style="text-align:left;">L3/L4攻撃耐性（ボリューム）</td><td style="text-align:left;">✅️高い。Shield</td><td style="text-align:left;">✅️大規模攻撃に対しても強い。Shield + エッジ分散</td></tr><tr><td style="text-align:left;">L7攻撃耐性 (レート制限等)</td><td style="text-align:left;">✅️WAF + Shield</td><td style="text-align:left;">✅️WAF + Shield</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>インターネット公開API（B2Cサービスで利用） <ul><li>原則、CloudFrontを利用する <ul><li>もし、静的コンテンツの配信に、CloudFrontを利用している場合は、Web APIもCloudFrontを利用することでCORS発生を抑制でき、システム的なトラフィックも統一できる</li><li>スケーラビリティ、DDoS対策などセキュリティ対策を向上できる</li><li>キャッシュ可能なデータが少ない場合や、サービスが国内限定だった場合には、CloudFrontなしでオリジンへのアクセスが十分高速だと考えられる。しかし上記のDDoS攻撃に対する防御境界をユーザーに最も近いエッジ層へ前進させるというセキュリティ上の大きな利点があるため、導入を検討する</li></ul></li><li>原則、WAF、Shield Standard以上を利用する <ul><li>Shield Advの導入は費用対効果を考慮して検討する（1年コミット型、固定費＋従量課金であるため）</li></ul></li></ul></li><li>インターネット公開API（B2Bサービスで利用、パートナー向けAPI提供） <ul><li>もし、静的コンテンツの配信に、CloudFrontを利用している場合は、Web APIもCloudFrontを利用する <ul><li>同一ドメインとすることで、CORSの発生を抑えることができる</li></ul></li><li>もし、静的コンテンツ配信方法が、決まっていない場合は、サービスの可用性要件、セキュリティ要件、SLAなどを加味して、CloudFrontの導入是非を検討する。例えば、以下のいずれかに該当する場合は、CloudFrontの導入を推奨する <ul><li>高い可用性（例: 99.99%以上のSLA）が求められる場合</li><li>不特定多数のパートナーからのアクセスが想定され、DDoS対策の強化が必要な場合</li><li>国外からのアクセス要件があり、地理的な応答性能が求められる場合</li></ul></li><li>同時に、WAF、Shield Standard の導入も検討する</li></ul></li><li>非公開API（社内サービス向けや、VPC内のサービス連携用途など） <ul><li>原則、CloudFrontの利用は不要とする <ul><li>VPC内や専用線を経由した社内ネットワークなど、アクセス元が限定的であるため、CDNの主なメリットである地理的なレイテンシ削減の効果が得られにくい。直接ALBなどにアクセスさせる構成の方がシンプル、低費用の可能性が高いため</li><li>業務システムの場合、キャッシュが可能なWeb APIレスポンスは少ないと考えられるため（ユーザーの権限制御が細かく設定されることが多いため）</li></ul></li></ul></li></ul><h3 id="ロードバランサー選定" tabindex="-1">ロードバランサー選定 <a class="header-anchor" href="#ロードバランサー選定" aria-label="Permalink to &quot;ロードバランサー選定&quot;">​</a></h3><p>Web APIアプリケーションがECS上で稼働するコンテナアプリケーションの場合、ロードバランサーを利用して構築する。ALBが一般的であると言えるが、NLBと比較が必要な場面もあると考えられる。また、API GatewayもECS Service Discoveryを利用することで、ALBなどを経由せず直接ECSに連携が可能であるため、比較対象とする。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">（1）ALB</th><th style="text-align:left;">（2）NLB</th><th style="text-align:left;">（3）API Gateway</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;">L7（HTTPやgRPCなど）の負荷分散を行え、高度なルーティングも可能</td><td style="text-align:left;">L4（TCP/UDPなど）の負荷分散が行え、静的IPアドレスの維持や突発的なトラフィック変動への対応に優れる</td><td style="text-align:left;">VPC Link、ECSサービスディスカバリに接続することで、簡易的なロードバランシングやルーティングの役割も担う構成が可能（API Gateway -&gt; ALB -&gt;ECS といったALBの要素無しに連携可能）</td></tr><tr><td style="text-align:left;">課金モデル</td><td style="text-align:left;">時間料金 + LCU料金(接続数、帯域)</td><td style="text-align:left;">時間料金 + NLCU料金(接続数、帯域）</td><td style="text-align:left;">リクエスト料金 + データ転送量</td></tr><tr><td style="text-align:left;">SLA</td><td style="text-align:left;">✅️99.99％ (複数AZ構成時)</td><td style="text-align:left;">✅️99.99％ (複数AZ構成時)</td><td style="text-align:left;">✅️99.95%</td></tr><tr><td style="text-align:left;">レイテンシ</td><td style="text-align:left;">✅️低い（NLBには劣る）</td><td style="text-align:left;">✅️最速である</td><td style="text-align:left;">⚠️ALB/NLBより大きくなる傾向</td></tr><tr><td style="text-align:left;">最大タイムアウト</td><td style="text-align:left;">✅️アイドルタイムアウト4000秒</td><td style="text-align:left;">⚠️アイドルタイムアウトTCP:350秒, UDP:120秒</td><td style="text-align:left;">⚠️29秒（統合タイムアウト。申請により緩和可能）</td></tr><tr><td style="text-align:left;">WAF統合</td><td style="text-align:left;">✅️</td><td style="text-align:left;">⚠️CloudFront経由で可能</td><td style="text-align:left;">✅️</td></tr><tr><td style="text-align:left;">ヘッダーベース ルーティング</td><td style="text-align:left;">✅️リスナールールで設定</td><td style="text-align:left;">❌️L4であるため</td><td style="text-align:left;">✅️</td></tr><tr><td style="text-align:left;">スティッキー セッション</td><td style="text-align:left;">✅️ターゲットグループで設定</td><td style="text-align:left;">❌️L4であるため</td><td style="text-align:left;">❌️</td></tr><tr><td style="text-align:left;">WebSocket対応</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️L4レベルでの転送</td><td style="text-align:left;">✅️</td></tr><tr><td style="text-align:left;">OIDC連携</td><td style="text-align:left;">✅️リスナールールの認証アクション</td><td style="text-align:left;">❌️L4であるため</td><td style="text-align:left;">✅️Lambda Authorizerの利用</td></tr><tr><td style="text-align:left;">ヘルスチェック</td><td style="text-align:left;">✅️L7ターゲットグループ単位で、アクティブチェック</td><td style="text-align:left;">✅️L4 (TCP接続) または L7 (HTTP/HTTPS)ターゲットグループ単位で、アクティブチェック。</td><td style="text-align:left;">⚠️API Gateway自体は行わない。ECS Service Discovery (Cloud Map連携) 経由であるため、反映ラグの懸念</td></tr><tr><td style="text-align:left;">スケーリング/暖気申請</td><td style="text-align:left;">✅️サポート経由で暖気申請可能</td><td style="text-align:left;">✅️暖気申請不可だが、仕組み上、急激なトラフィック増に対応可能</td><td style="text-align:left;">❌️不可。クォータ緩和申請のみ</td></tr><tr><td style="text-align:left;">構築コスト</td><td style="text-align:left;">✅️比較的シンプル</td><td style="text-align:left;">✅️比較的シンプル</td><td style="text-align:left;">⚠️Private Endpoint, Resource Policy, VPC Link等、設定項目が多い</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>ECSなどで動作するWeb APIに対するロードバランサーとして、（1）を選択する <ul><li>（2）は、低レイテンシ性が強く求められるといった特殊な条件が存在する場合に、利用を検討する</li><li>（3）は、API Gatewayの機能（レートリミットなど）が求められる場合に、LB要素を減らしても問題ないと考えられる場合に検討しても良いが、LBと比較して詳細なヘルスチェック機能が限定的であること設定項目の複雑さ、緩和が可能とは言えタイムアウトの制限があるため、通常は選択しない</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">API Gatewayのタイムアウト</p><p><a href="https://aws.amazon.com/jp/about-aws/whats-new/2024/06/amazon-api-gateway-integration-timeout-limit-29-seconds/" target="_blank" rel="noreferrer">Amazon API Gateway 統合のタイムアウト制限が 29 秒から引き上げ</a> にあるように、申請でタイムアウト上限の引き上げが可能になった。引き上げによってアカウントレベルのスロットルクォータ制限の引き下げが必要になる場合があるとのことで、注意が必要である。<br> 引き上げ値としては、 バージニア北部で300,000ミリ秒（300秒）、オレゴンで900,000ミリ秒（900秒）とのことで、300秒程度まで可能と推測される。</p></div><h3 id="web-apiコンピューティング選定" tabindex="-1">Web APIコンピューティング選定 <a class="header-anchor" href="#web-apiコンピューティング選定" aria-label="Permalink to &quot;Web APIコンピューティング選定&quot;">​</a></h3><p>Web APIサーバのコンピューティングをどのサービスで稼働させるかについて、よく利用されるパターンを下表にまとめる。</p><p>なお、App Runnerは内部で保持しているLB側の取得可能なログ項目や、オートスケーリングが同時実行数だけであるなど、制御できる項目が少なく制約が多いため考慮外としている。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">（1）Lambda</th><th style="text-align:left;">（2）ECS on Fargate</th><th style="text-align:left;">（3）ECS on EC2</th><th style="text-align:left;">（4）EKS</th><th style="text-align:left;">（5）EC2</th></tr></thead><tbody><tr><td style="text-align:left;">VPC対応</td><td style="text-align:left;">✅️可能</td><td style="text-align:left;">✅️可能</td><td style="text-align:left;">✅️可能</td><td style="text-align:left;">✅️可能</td><td style="text-align:left;">✅️可能</td></tr><tr><td style="text-align:left;">実行時間制限</td><td style="text-align:left;">⚠️API Gatewayと組み合わせる場合は29秒（緩和あり）。Lambda Function URLで15分。ALBバックエンドの場合は66分</td><td style="text-align:left;">⚠️ALB利用の場合約66分</td><td style="text-align:left;">⚠️ALB利用の場合約66分</td><td style="text-align:left;">⚠️ALB利用の場合約66分</td><td style="text-align:left;">⚠️ALB利用の場合約66分</td></tr><tr><td style="text-align:left;">同時実行数の上限</td><td style="text-align:left;">⚠️アカウントレベルで同時実行数に上限があり。上限緩和申請が可能</td><td style="text-align:left;">✅️特に制約なし</td><td style="text-align:left;">✅️特に制約なし</td><td style="text-align:left;">✅️特に制約なし</td><td style="text-align:left;">✅️特に制約なし</td></tr><tr><td style="text-align:left;">拡張性</td><td style="text-align:left;">✅️リクエスト数に応じて自動スケール可能</td><td style="text-align:left;">✅️自動スケール可能</td><td style="text-align:left;">✅️自動スケール可能（EC2に対してもAuto Scalingグループを設定）</td><td style="text-align:left;">✅️自動スケール可能</td><td style="text-align:left;">✅️自動スケール可能</td></tr><tr><td style="text-align:left;">起動オーバーヘッド</td><td style="text-align:left;">⚠️Javaの場合は起動遅延あり。緩和策あり。Python、Goの場合は早い</td><td style="text-align:left;">✅️イメージ取得、EIPアタッチなどのオーバーヘッドがあるが、常駐型の場合は影響がほぼ無し</td><td style="text-align:left;">✅️イメージキャッシュが効く。常駐型の場合は影響がほぼ無し</td><td style="text-align:left;">✅️常駐する</td><td style="text-align:left;">✅️常駐する</td></tr><tr><td style="text-align:left;">運用管理</td><td style="text-align:left;">✅️マネージドサービス</td><td style="text-align:left;">✅️コンテナイメージの管理、タスク定義の更新などが</td><td style="text-align:left;">⚠️OS、コンテナランタイム、ECSエージェントなどの管理が必要である。</td><td style="text-align:left;">⚠️Kubernetesクラスタの管理（知識）が必要</td><td style="text-align:left;">❌️OS、コンテナランタイムなどの管理が必要</td></tr><tr><td style="text-align:left;">CI/CD容易性</td><td style="text-align:left;">✅️容易</td><td style="text-align:left;">✅️容易</td><td style="text-align:left;">✅️容易</td><td style="text-align:left;">✅️容易</td><td style="text-align:left;">⚠️作り込みが必要</td></tr><tr><td style="text-align:left;">割引（※1）</td><td style="text-align:left;">3年コミットで最大66%</td><td style="text-align:left;">3年コミットで最大50%</td><td style="text-align:left;">3年コミットで66%</td><td style="text-align:left;">on EC2、on Fargateでそれぞれに依存</td><td style="text-align:left;">3年コミットで66%</td></tr><tr><td style="text-align:left;">課金モデル</td><td style="text-align:left;">リクエスト数と関数の実行時間</td><td style="text-align:left;">インスタンス費用</td><td style="text-align:left;">インスタンス費用</td><td style="text-align:left;">インスタンス費用</td><td style="text-align:left;">インスタンス費用</td></tr><tr><td style="text-align:left;">料金（※2）</td><td style="text-align:left;">5.4万円/月</td><td style="text-align:left;">2.6万円/月</td><td style="text-align:left;">2.3万円/月</td><td style="text-align:left;">3.7万円/月</td><td style="text-align:left;">2.3万円/月</td></tr></tbody></table><p>※1 基本的にCompute Savig Plansの数値を出している。Reserved Instancesがあるものはより高い割引率になるが、柔軟性に劣るため選択しないとする</p><p>※2 費用の試算については以下の条件としている。あくまで、概算としての参考値である。</p><ul><li>10-18時は100TPS、その他の時間帯は10TPSとする</li><li>1リクエストあたり 0.2秒</li><li>インスタンス指定可能なものはm7i.xlarge。コンテナアプリは 4vCPU、8GBメモリ のリソースが必要とする</li><li>東京リージョン</li><li>x86</li><li>RI無し。また、スケールダウンで0台にすることは無いとする</li><li>1$ = 150円</li><li>CloudWatchLogsやELBなどのコストは考慮外としている。</li></ul><p>Lambdaの場合の試算は以下（※2025年4月時点）。</p><ul><li>メモリ1GBとする</li><li>ピーク時のリクエスト数/日: 100リクエスト/秒 * 28,800秒 = 2,880,000リクエスト</li><li>オフピーク時のリクエスト数/日: 10リクエスト/秒 * 57,600秒 = 576,000リクエスト</li><li>合計リクエスト数/日: 2,880,000 + 576,000 = 3,456,000リクエスト</li><li>合計リクエスト数/月: 3,456,000リクエスト/日 * 30日/月 = 103,680,000リクエスト/月</li><li>請求対象リクエスト数: 103,680,000 - 1,000,000 (無料枠) = 102,680,000 リクエスト</li><li>1リクエストあたりのコンピューティング (GB秒): 1 GB * 0.2 秒 = 0.2 GB秒</li><li>合計コンピューティング時間/月: 103,680,000リクエスト/月 * 0.2 GB秒/リクエスト = 20,736,000 GB秒/月</li><li>リクエスト料金: (102,680,000 / 1,000,000) _ $0.20 = 102.68 _ $0.20 = $20.54</li><li>請求対象コンピューティング時間: 41,472,000 - 400,000 (無料枠) = 20,336,000 GB秒</li><li>コンピューティング料金: 20,336,000 GB秒 * $0.0000166667/GB秒 ≈ $338.93</li><li>合計月額費用 (オンデマンド): $20.54 + $338.93 = $359.47</li><li>日本円換算 (目安): $705.08 * 150円/ドル ≈ 53,920.5円</li></ul><p>ECS on Fargateの試算は以下（※2025年4月時点）。</p><ul><li>vCPU料金: 約 $0.050 USD / vCPU / 時間</li><li>メモリ料金: 約 $0.0055 USD / GB / 時間</li><li>(0.05 _ 4 + 0.0055 _ 8) * 730 = 178.12 USD / 月</li><li>$178.12 * 150円/ドル ≈ 26,718 円 / 月</li></ul><p>ECS on EC2の試算は以下（※2025年4月時点）。</p><ul><li>m7i.xlargeはオンデマンド費用が、約 $0.2117 USD / 時間</li><li>$0.2117/時間 * 730 時間/月 ≈ $154.54 USD / 月</li><li>月額費用 (日本円換算 - 目安 @150円/ドル): $154.54 * 150円/ドル ≈ 23,181 円 / 月</li></ul><p>EKSの試算は以下（※2025年4月時点）。</p><ul><li>EKSコントロールプレーン料金: 約 $0.10 USD / 時間 / クラスタ</li><li>月額コントロールプレーン費用: $0.10/時間 _ 730時間/月 = $73_ 150円/ドル ≈ 10,950 円 / 月</li><li>EKS on Fargateモードとする</li><li>コストはECS on Fargateと同じ、26,718円</li><li>26,718円 + 10,950円 ≈ 37,668 円 / 月</li></ul><p>EC2の試算は以下。</p><ul><li>ECS on EC2と同じである</li></ul><p>推奨は以下の通り。</p><ul><li>Lambdaはアクセスパターンに偏りがある場合に有効だが、API Gatewayと組み合わせた場合のタイムアウト制限や、一部の言語での立ち上がりの遅さなどがネックであるため、大きな理由がない場合は非推奨とする <ul><li>アクセス特性に偏りがあり、時間帯が読めない場合。また相乗りできるコンピューティングが存在しない場合はLambdaの課金モデルが有効である可能性が高いため、採用を検討する</li><li>逆に、本節で説明した常時リクエストが発生するようなワークロードには適切でない可能性が高い。コスト的にはメモリサイズを最適化することでもっと下げることができるが、API呼び出し数が上振れすると課金額が見積もり超過する懸念がある</li></ul></li><li>Fargateは想像以上に性能が出ないといった事象がいくつか発生しており、何かハマった場合に ECS on EC2に乗り換える計画も込みにしておく</li><li>特に理由がなければ、Fargateではなく、ECS on EC2 を選択する（コスト的なメリットのため） <ul><li>例えば、EC2を利用するとウィルスチェックや脆弱性診断など、運用保守上の工数が大幅に増えるなどがある場合</li></ul></li><li>EKSは技術選定方針が可搬性などを意識して Kubernetes上で動かすなどの条件がある場合に選択する</li><li>EC2は、CI/CDや保守性などに影響があるため、通常利用しない</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://speakerdeck.com/kenjiyoneyama/case-study-and-real-experience-of-using-app-runner-in-sony-products" target="_blank" rel="noreferrer">ソニーにおける App Runner 導入事例と生の体験談の紹介 / Case study and real experience of using App Runner in Sony products - Speaker Deck</a> にAppRunnerの制約について記載がある。</p></div><h3 id="ecs間通信" tabindex="-1">ECS間通信 <a class="header-anchor" href="#ecs間通信" aria-label="Permalink to &quot;ECS間通信&quot;">​</a></h3><p>ECSのサービス同士の通信では、コスト、レイテンシ、構成のシンプルさの観点から、ALBを経由しない通信方式を採用した方が良い場合がある。各方式を下表で比較する。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">（1）ALB</th><th style="text-align:left;">（2）ECS Service Discovery</th><th style="text-align:left;">（3）ECS Service Connect</th><th style="text-align:left;">（4）VPC Lattice</th></tr></thead><tbody><tr><td style="text-align:left;">概要</td><td style="text-align:left;">ALBを利用して公開する標準的な方式。外部公開する場合は公式で推奨されている</td><td style="text-align:left;">Cloud Mapを用いて、DNSやAPIでタスクのIPアドレス等を解決し、タスク間で直接通信する</td><td style="text-align:left;">ECSが管理するプロキシがサービス間の通信を仲介・管理する</td><td style="text-align:left;">Amazon ECS サービスを VPC Lattice ターゲットグループに関連付ける方法。クロスVPC/アカウント接続時には構成をシンプルに保てる可能性がある</td></tr><tr><td style="text-align:left;">利用開始時期</td><td style="text-align:left;">2016年 (ALB自体)</td><td style="text-align:left;">2018年 (Cloud Map自体)</td><td style="text-align:left;">2022年後半 (re:Invent 2022発表)</td><td style="text-align:left;">2023年初頭</td></tr><tr><td style="text-align:left;">レイテンシ</td><td style="text-align:left;">⚠️LBを経由するためNWホップが1つ追加される</td><td style="text-align:left;">✅️DNS解決後、タスク間で直接通信するため、理論上は最も低い</td><td style="text-align:left;">⚠️ECS管理のプロキシを経由するため、（1）と（2）の中間</td><td style="text-align:left;">⚠️VPC Latticeのサービスネットワークコンポーネントを経由</td></tr><tr><td style="text-align:left;">可用性 (SLA)</td><td style="text-align:left;">✅️ALB自体にSLA (例: 99.99％) あり</td><td style="text-align:left;">✅️Cloud Map自体にSLA (例: 99.99％)</td><td style="text-align:left;">✅️ECSのSLAに準拠</td><td style="text-align:left;">✅️SLA（99.99％）</td></tr><tr><td style="text-align:left;">利用費用</td><td style="text-align:left;">⚠️ALBの稼働時間とLCUで課金</td><td style="text-align:left;">✅️Cloud Mapの登録リソース数とDNSクエリ数で課金。ALBより安価な傾向</td><td style="text-align:left;">✅️Service Connect機能自体に追加費用はなし(2025年4月現在)</td><td style="text-align:left;">⚠️稼働時間、データ処理量(GB)、リクエスト数で課金</td></tr><tr><td style="text-align:left;">通信の可観測性</td><td style="text-align:left;">✅️CloudWatchメトリクス、アクセスログ、X-Ray連携が可能</td><td style="text-align:left;">❌️サービス間の通信自体の詳細なメトリクスは自動収集されない</td><td style="text-align:left;">✅️接続ごとのトラフィックメトリクス(リクエスト数、レイテンシ、エラー率など)やログを自動で収集可能</td><td style="text-align:left;">✅️リクエスト/レスポンス数、レイテンシ、エラーなどの詳細なメトリクスやアクセスログを取得可能</td></tr><tr><td style="text-align:left;">負荷分散</td><td style="text-align:left;">✅️ラウンドロビン、最小コネクション等 の仕組みがあり</td><td style="text-align:left;">⚠️DNSラウンドロビン (Aレコードの場合) 。SRVレコードを使用する場合はクライアント側での振り分け実装が必要</td><td style="text-align:left;">✅️クライアントサイド負荷分散 (ラウンドロビン等) をECS管理のプロキシが自動的に実行</td><td style="text-align:left;">✅️重み付けルーティングを含む負荷分散</td></tr><tr><td style="text-align:left;">自動リトライ</td><td style="text-align:left;">❌️アプリケーション側でのリトライロジックの実装が必須</td><td style="text-align:left;">❌️アプリケーション側でのリトライロジックの実装が必須</td><td style="text-align:left;">✅️プロキシが自動でリトライを実行する</td><td style="text-align:left;">❌️アプリケーション側でのリトライロジックの実装が必須</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>原則、（1）を利用する <ul><li>利用費用、レイテンシは（3）に比べて割高になるが、構成をシンプルにできる可能性が高いため</li><li>システム構成次第だが、業務システムをサービスオリエンテッドなマイクロサービスアーキテクチャで構築することは稀で、通常はモノリス（モジュラモノリスを含む）で構築することがほとんどだと考えられる。そのため、マイクロサービス間の通信が膨大になり、その費用やレイテンシが問題になることは少ないと考えられる</li><li>複数のサービスが存在して、サービスA -&gt; サービスB を呼び出したとして、サービスBもフロントエンドから呼び出される場合はALBが存在すると、アクセスパスをALB経由に統一したほうが構成上、シンプルにできる可能性も高いため</li></ul></li><li>マイクロサービスアーキテクチャを採用し、サービス間の通信が非常に多くなるような状況の場合は、ECS間の通信は（3）を採用する <ul><li>もし、極限までレイテンシを下げるといった要件があれば、（2）を検討する。この場合、サービスの切り離し時のDNS更新速度も含めて安定的に動作するかは、別途検証してから検討する</li></ul></li><li>（4）はVPC間でのサービス連携時に有利な可能性があるが、通常利用しない</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://aws.amazon.com/jp/blogs/news/celebrating-10-years-of-amazon-ecs-powering-a-decade-of-containerized-innovation/" target="_blank" rel="noreferrer">Amazon ECS の 10 周年を祝う: 10 年間にわたるコンテナ化イノベーションの推進</a></li><li><a href="https://tech.nri-net.com/entry/ecs_service_to_service_communication" target="_blank" rel="noreferrer">改めてECSサービス間通信を整理する - NRIネットコムBlog</a></li><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/interconnecting-services.html" target="_blank" rel="noreferrer">Interconnect Amazon ECS services</a></li><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-vpc-lattice.html" target="_blank" rel="noreferrer">Use Amazon VPC Lattice to connect, observe, and secure your Amazon ECS services</a></li><li><a href="https://aws.amazon.com/jp/vpc/lattice/sla/" target="_blank" rel="noreferrer">Amazon VPC Latticeサービスレベルアグリーメント</a></li><li><a href="https://zenn.dev/kiiwami/articles/9d518bc8da1e0471" target="_blank" rel="noreferrer">re:Invent 2023: AWSが解説するAmazon VPC Latticeのアーキテクチャパターンとベストプラクティス</a></li></ul></div><h3 id="バッチコンピューティング選定" tabindex="-1">バッチコンピューティング選定 <a class="header-anchor" href="#バッチコンピューティング選定" aria-label="Permalink to &quot;バッチコンピューティング選定&quot;">​</a></h3><p>本ガイドラインにおけるバッチ処理とは、業務システムのバックエンドで稼働するプログラムであり、例えば倉庫システムへの出荷指図処理のように、特定のトリガーに基づいて複数のタスクをまとめて実行するものを指す。本章で検討するバッチ処理は、Airflowのようなワークフローエンジンから呼び出し管理されることを前提とする。</p><p>バッチ設計ガイドラインの<a href="/arch-guidelines/documents/forBatch/batch_guidelines.html#バッチ実行モデル（aws）">バッチ実行モデル（AWS）</a>によれば、3つの選択肢が存在する。</p><ol><li>スタンドアローンタスク</li><li>ファンクション呼び出し</li><li>Web API呼び出し</li></ol><p>本ガイドラインでは、上記1のスタンドアローンタスクを選択した上で、アプリケーションの管理をコンテナで行う必要があるという前提条件の下で、これらのタスクをどのサービス上で実行するか検討する。よく議論に上がるサービスを下表に示す。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">（1）AWS Batch</th><th style="text-align:left;">（2）ECS on EC2</th><th style="text-align:left;">（3）ECS on Fargate</th><th style="text-align:left;">（4）EKS</th></tr></thead><tbody><tr><td style="text-align:left;">起動レイテンシ</td><td style="text-align:left;">❌️キューイングするため遅延する懸念</td><td style="text-align:left;">✅️イメージがキャッシュできる分有利。EIPアタッチ時間が必要</td><td style="text-align:left;">⚠️（2）に比べるとイメージの取得分、不利</td><td style="text-align:left;">✅️EC2選択 / ⚠️Fargate選択</td></tr><tr><td style="text-align:left;">終了検知</td><td style="text-align:left;">⚠️DescribeJobsのポーリングまたはEventBridge経由でのイベント取得</td><td style="text-align:left;">✅️EventBridge経由でイベント取得</td><td style="text-align:left;">✅️EventBridge経由でイベント取得</td><td style="text-align:left;">✅️いくつかの実現手段があり</td></tr><tr><td style="text-align:left;">流量制御</td><td style="text-align:left;">✅️AWS Batch側の機能で実現</td><td style="text-align:left;">❌️スクラッチ</td><td style="text-align:left;">❌️スクラッチ</td><td style="text-align:left;">✅️いくつかの実現手段があり</td></tr><tr><td style="text-align:left;">拡張性</td><td style="text-align:left;">✅️自動調整</td><td style="text-align:left;">✅️オートスケーリンググループ</td><td style="text-align:left;">✅️自動調整</td><td style="text-align:left;">✅️Autoscaler設定</td></tr><tr><td style="text-align:left;">運用管理</td><td style="text-align:left;">⚠️EC2/Spot選択 / ✅️Fargate選択</td><td style="text-align:left;">❌️ EC2管理必要</td><td style="text-align:left;">✅️不要</td><td style="text-align:left;">⚠️EC2選択 / ✅️Fargate選択</td></tr><tr><td style="text-align:left;">コスト最適化</td><td style="text-align:left;">✅️スポットインスタンス活用</td><td style="text-align:left;">⚠️RI/SP/スポットインスタンス活用可能</td><td style="text-align:left;">⚠️SP/Fargate Spot</td><td style="text-align:left;">⚠️コントロールプレーン料金が上乗せ</td></tr></tbody></table><p>一般的に、AWS Batchは、HPC（ハイパフォーマンスコンピューティング）や機械学習のジョブのように、例えばゲノム解析や気象シミュレーション、画像認識モデルのトレーニングなど、大量の計算リソースを必要とするバッチ処理に適している。独自のジョブキューを持ち、ジョブのスケジューリングやリトライ制御を自動で行うことが可能である。そのため、ユースケースとしては下図にある「システム利用者が使用するジョブ管理システム」としての用途に最適化したサービスである。</p><p><img src="`+o+'" alt="バッチコンピューティング選定における各サービスの比較"></p><p>※画像は <a href="https://www.slideshare.net/slideshow/aws-black-belt-online-seminar-2017-aws-batch/71904597" target="_blank" rel="noreferrer">https://www.slideshare.net/slideshow/aws-black-belt-online-seminar-2017-aws-batch/71904597</a> より引用</p><p>推奨は以下の通り。</p><ul><li>（1）AWS Batchは、スポットインスタンスを活用することでコスト競争力が高いが、ジョブキューイングによる数分レベルの遅延が発生する可能性があるため、バッチウィンドウが厳しい場合がある夜間ジョブの稼働には不適切と判断し、採用しない</li><li>（2）ECS on EC2 または （3）ECS on Fargate を選択する <ul><li>（2）ECS on EC2 は、コンテナイメージキャッシュが働き、起動速度の面で有利である。また、価格も（3）ECS on Fargate に比べて割安である</li><li>EC2の管理に運用上の負荷（OSパッチ適用、セキュリティ設定、AMI管理など）が許容できる場合は、起動速度とコストの面で有利な （2）ECS on EC2 を原則として選択する</li></ul></li><li>（4）EKS は、技術選定方針としてアプリケーションの可搬性を重視し、Kubernetes上で動作させる必要がある場合に選択する</li></ul><h3 id="ジョブキュー選定" tabindex="-1">ジョブキュー選定 <a class="header-anchor" href="#ジョブキュー選定" aria-label="Permalink to &quot;ジョブキュー選定&quot;">​</a></h3><p>システム内のバッチ処理を同時実行数の流量制御などを目的に非同期的に呼び出す場合、ジョブキューを利用する。AWSマネージドサービスにおいては、以下の3つの選択肢がある。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">（1）SQS</th><th style="text-align:left;">（2）Kinesis Data Streams</th><th style="text-align:left;">（3）EventBridge</th></tr></thead><tbody><tr><td style="text-align:left;">概要</td><td style="text-align:left;">フルマネージドなメッセージキューイング</td><td style="text-align:left;">フルマネージドなデータストリーミングサービス。Publish/Subscribeモデル</td><td style="text-align:left;">サーバーレスのイベントバスサービス。イベントをルーティングし、ターゲットを連携させることが可能</td></tr><tr><td style="text-align:left;">GAの時期</td><td style="text-align:left;">2006年</td><td style="text-align:left;">2013年</td><td style="text-align:left;">2019年</td></tr><tr><td style="text-align:left;">課金モデル</td><td style="text-align:left;">リクエスト数、データ転送量</td><td style="text-align:left;">シャード時間、書き込みデータ量など</td><td style="text-align:left;">発行されたイベント数、ルール数、API宛先など</td></tr><tr><td style="text-align:left;">QoS</td><td style="text-align:left;">Standard: At-least-once、FIFO: Exactly-once</td><td style="text-align:left;">At-least-once</td><td style="text-align:left;">At-least-once(ターゲットへの配信)</td></tr><tr><td style="text-align:left;">コンシューマモデル</td><td style="text-align:left;">競合コンシューマ (メッセージは1コンシューマが処理・削除)</td><td style="text-align:left;">複数コンシューマが同じデータを読める</td><td style="text-align:left;">パブリッシュ/サブスクライブに近い (イベントを複数ターゲットにルーティング)</td></tr><tr><td style="text-align:left;">SLAの有無</td><td style="text-align:left;">✅️月間稼働率 99.9％など ※キュータイプ次第</td><td style="text-align:left;">✅️月間稼働率 99.9％など</td><td style="text-align:left;">✅️月間稼働率 99.99％など ※イベント配信</td></tr><tr><td style="text-align:left;">DLQの有無</td><td style="text-align:left;">✅️あり (SQSキューとして設定可能)</td><td style="text-align:left;">⚠️ストリーム自体にはなく、Lambdaなどでは設定可能</td><td style="text-align:left;">✅️ターゲット呼び出し失敗時にSQSを設定可能</td></tr><tr><td style="text-align:left;">最大保持期間</td><td style="text-align:left;">⚠️14日間 (デフォルト4日)</td><td style="text-align:left;">⚠️365日間 (デフォルト24時間)</td><td style="text-align:left;">✅️アーカイブ機能で指定期間(無期限も可)保存可能</td></tr><tr><td style="text-align:left;">FIFO対応</td><td style="text-align:left;">✅️FIFOキュー</td><td style="text-align:left;">✅️シャード単位では順序保証あり</td><td style="text-align:left;">❌️イベントバス自体は順序保証なし</td></tr><tr><td style="text-align:left;">メッセージ/レコードの最大サイズ</td><td style="text-align:left;">⚠️256 KB</td><td style="text-align:left;">⚠️1 MB</td><td style="text-align:left;">⚠️256 KB (カスタムイベント)</td></tr><tr><td style="text-align:left;">スケーリング</td><td style="text-align:left;">✅️自動（コンシューマ増減）</td><td style="text-align:left;">✅️自動/手動（シャード数で指定）</td><td style="text-align:left;">✅️自動（イベント量）</td></tr></tbody></table><p>なお、類似の選択肢としてAmazon MQ（RabbitMQ）も存在するが、インスタンスタイプでの課金モデルやBlack Belt資料から既存システムで利用している場合の移行で用いるような旨の説明があるため、比較から除外している。</p><p>また、Amazon SNSもイベント通知に利用できるサービスだが、主に多数のサブスクライバーへのファンアウト型通知を目的としており、メッセージの永続性やコンシューマによる処理管理といったジョブキューの特性や、EventBridgeが提供する高度なイベントルーティング機能とは役割が異なるため、今回の選定からは除外している。</p><p>推奨は以下の通り。</p><ul><li>ジョブキューとして、SQSを選択することが自然である <ul><li>メッセージは1コンシューマが処理、削除するシンプルなモデルであり、複数のコンシューマが同じメッセージを処理する必要が無いため</li><li>必要に応じて、FIFOキューなどの選択も可能</li></ul></li><li>保持期限が比較的短いため、DLQは最大の14日を指定し、必要に応じてDB（Auroraなど）にメッセージを保存する</li><li>Amazon MQは既存システムが利用している場合で、単純移行する場合に利用する</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li>SQS: SLA <a href="https://aws.amazon.com/jp/messaging/sla/?did=sla_card&amp;trk=sla_card" target="_blank" rel="noreferrer">https://aws.amazon.com/jp/messaging/sla/?did=sla_card&amp;trk=sla_card</a></li><li>Kinesis Data Streams: <a href="https://aws.amazon.com/jp/about-aws/whats-new/2019/01/amazon-kinesis-data-streams-announces-99-9-service-level-agreement/" target="_blank" rel="noreferrer">Amazon Kinesis Data Streams で 99.9% のサービスレベルアグリーメント (SLA) を発表</a></li><li>Event Bridge: SLA: <a href="https://aws.amazon.com/jp/eventbridge/sla/?did=sla_card&amp;trk=sla_card" target="_blank" rel="noreferrer">https://aws.amazon.com/jp/eventbridge/sla/?did=sla_card&amp;trk=sla_card</a></li><li><a href="https://d1.awsstatic.com/webinars/jp/pdf/services/20210317_AWS-BlackBelt_AmazonMQ%20210317a.pdf" target="_blank" rel="noreferrer">[AWS Black Belt Online Seminar] Amazon MQ</a> にキューイングサービスの選定フローが存在する</li></ul></div><h3 id="スケジューラ" tabindex="-1">スケジューラ <a class="header-anchor" href="#スケジューラ" aria-label="Permalink to &quot;スケジューラ&quot;">​</a></h3><p>バッチ設計ガイドラインの<a href="/arch-guidelines/documents/forBatch/batch_guidelines.html#プロダクト選定-aws">スケジューラ選定</a>を参照すること。</p><h2 id="cloudwatch" tabindex="-1">CloudWatch <a class="header-anchor" href="#cloudwatch" aria-label="Permalink to &quot;CloudWatch&quot;">​</a></h2><h3 id="cloudwatch-logs-ロググループ設計" tabindex="-1">CloudWatch Logs ロググループ設計 <a class="header-anchor" href="#cloudwatch-logs-ロググループ設計" aria-label="Permalink to &quot;CloudWatch Logs ロググループ設計&quot;">​</a></h3><p>CloudWatch Logsとは、AWSのサービスやアプリケーションのログを一元的に収集・モニタリング・分析できるマネージドサービスである 。主な構成要素は以下である。</p><p><img src="'+h+'" alt=""></p><p>▼<a href="https://speakerdeck.com/iselegant/cloudwatch-design-and-operation-bible?slide=62" target="_blank" rel="noreferrer">https://speakerdeck.com/iselegant/cloudwatch-design-and-operation-bible?slide=62</a> より</p><ul><li>ログイベント <ul><li>アプリケーションやリソースにより出力された個々のログレコード</li></ul></li><li>ログストリーム <ul><li>同一ソースから生成された一連のログイベント。Lambda関数であれば異なるインスタンスになれば別のログストリームになる</li></ul></li><li>ロググループ <ul><li>複数のログストリームをまとめる概念 。ロググループ単位で、保持期間、モニタリング設定（メトリクスフィルターやアラーム）、アクセス制御を行う。Lambda関数の場合は、<code>/aws/lambda/&lt;関数名&gt;</code> というロググループが自動的に作成される</li></ul></li></ul><p>ロググループは一般的に、サービスとロググループを1対1で作成する方針が多いが、主に保守運用などでログ検索をしやすいように、関連性が強い複数のアプリケーションで生成するロググループを1つに集約したほうが良いのではないか、といった意見もしばしばでる（もちろん、設計によっては逆にノイズが増えることも考えられる）。逆にエラーログや監査ログといった特定の種類のログのみ、異なるロググループに分離して管理（例：保持期間やアクセス権限を個別に設定）したほうが良いのではないか、といった意見が出ることがある。</p><p>まず、ロググループの主な制約を以下にあげる。</p><ul><li>ロググループ数は1カウント、1リージョンあたり、100万まで（事実上、上限はない）</li><li>PutLogEventsのクォータはアカウント/リージョン単位で5,000 TPSであり、ロググループ単位の制約は存在しない</li><li>タグの設定はロググループ単位でのみ設定可能。ログストリーム単位は不可であるため、ロググループを共有時のコスト按分は困難</li><li>ロググループあたり、サブスクリプションフィルターは2つまで（緩和不可）</li><li>ログの検索は、ストリーム単体・ロググループ単位の2パターンだが、CloudWatch Logs Insightsのクロスロググループ検索機能でロググループ横断の検索が比較的容易になった（最大 50 個のロググループまで可能）</li></ul><p>ロググループを集約する場合のデメリットは以下が考えられる。</p><ul><li>構造化ロギング（JSON Lines）のレイアウトを複数のアプリケーションで統制を取る必要がある</li><li>あるアプリケーションが大量のログを出力してしまうと、他のアプリケーションのログ検索に悪影響がある</li><li>機微な情報をログ出力してしまった場合のアクセス制御や対処が行いにくい</li></ul><p>推奨は以下の通り。</p><ul><li>原則、アプリケーションに対しては、1つのアプリケーション（サービス）:ロググループ=1:1とする <ul><li>ロググループ集約による、サブスクリプションフィルターの上限などが厳しくなる可能性があり、コスト分析でもマイナス。CloudWatch Logs Insightsのクロスロググループ検索でロググループ横断の調査の手間も緩和されたため</li><li>サービス:ロググループ=1:Nにも原則行わないが、ログ保持期限などのコスト最適化（改廃タイミング（例：監査ログは7年、デバッグログは30日など）や低頻度アクセス化など）でどうしても必要であれば許容する</li></ul></li><li>インフラの場合は、AWSの各種サービス（VPCフローログ、RDS監査ログ、ELBアクセスログなど）ごとにロググループを分ける</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/logs/CloudWatchLogsConcepts.html" target="_blank" rel="noreferrer">Amazon CloudWatch Logs の概念</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/logs/cloudwatch_limits_cwl.html" target="_blank" rel="noreferrer">CloudWatch Logs クォータ - Amazon CloudWatch Logs</a></li></ul></div><h3 id="cloudwatch-metrics-メトリクス監視" tabindex="-1">CloudWatch Metrics メトリクス監視 <a class="header-anchor" href="#cloudwatch-metrics-メトリクス監視" aria-label="Permalink to &quot;CloudWatch Metrics メトリクス監視&quot;">​</a></h3><p>メトリクスは、大きく以下の2種類で利用できる。</p><ul><li>対象の状態を定期的に観察するモニタリング</li><li>異常の検知を目的とした監視 <ul><li>即対応が必要なもの（ERROR）と、数営業日以内に対応が必要なもの（WARN）などに分類できるとする</li></ul></li></ul><p>本章では、「監視」としてどの項目を対象にすべきか、サービスごとに指針をまとめる。</p><h4 id="aurora-postgresql" tabindex="-1">Aurora PostgreSQL <a class="header-anchor" href="#aurora-postgresql" aria-label="Permalink to &quot;Aurora PostgreSQL&quot;">​</a></h4><p><a href="/arch-guidelines/documents/forDB/postgresql_guidelines.html#メトリクス監視項目">PostgreSQL設計ガイドライン &gt; 監視 &gt; メトリクス監視項目</a> を参照。</p><h4 id="apigateway" tabindex="-1">APIGateway <a class="header-anchor" href="#apigateway" aria-label="Permalink to &quot;APIGateway&quot;">​</a></h4><p><a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/api-gateway-metrics-and-dimensions.html" target="_blank" rel="noreferrer">Amazon API Gateway のディメンションとメトリクス</a> から、以下の8つのメトリクスが取得可能である。</p><table tabindex="0"><thead><tr><th style="text-align:left;">No</th><th style="text-align:left;">Name</th><th style="text-align:left;">Unit</th><th style="text-align:left;">監視対象</th><th style="text-align:left;">Memo</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">Count</td><td style="text-align:left;">Count</td><td style="text-align:left;">-</td><td style="text-align:left;">API へのリクエスト総数。トラフィック量の把握に利用</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">Latency</td><td style="text-align:left;">Milliseconds</td><td style="text-align:left;">❓️</td><td style="text-align:left;">API Gateway がリクエストを受け取ってからレスポンスを返すまでの総時間（エンドツーエンドレイテンシ）。性能監視に利用</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">IntegrationLatency</td><td style="text-align:left;">Milliseconds</td><td style="text-align:left;">-</td><td style="text-align:left;">API Gateway がECSなどのバックエンドにリクエストを送信してからレスポンスを受け取るまでの時間。バックエンド処理の遅延調査に役立つ</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">4XXError</td><td style="text-align:left;">Count</td><td style="text-align:left;">-</td><td style="text-align:left;">クライアント側のエラー（認証エラー、リクエスト不正、メソッド未許可など）の数。急増時はクライアント側の問題や設定不備の可能性</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">5XXError</td><td style="text-align:left;">Count</td><td style="text-align:left;">❓️</td><td style="text-align:left;">サーバー側のエラー（バックエンド処理エラー、API Gateway内部エラーなど）の数。サービスの可用性を示す</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">CacheHitCount</td><td style="text-align:left;">Count</td><td style="text-align:left;">-</td><td style="text-align:left;">API キャッシュが有効な場合に、キャッシュからレスポンスを返したリクエスト数。キャッシュの有効性を測る指標</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">CacheMissCount</td><td style="text-align:left;">Count</td><td style="text-align:left;">-</td><td style="text-align:left;">API キャッシュが有効な場合に、キャッシュにヒットせずバックエンドにアクセスしたリクエスト数。CacheHitCount と合わせてキャッシュ効率を確認可能</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">ThrottledRequests</td><td style="text-align:left;">Count</td><td style="text-align:left;">-</td><td style="text-align:left;">スロットリングによって拒否されたリクエスト数。制限緩和やクライアントへの流量調整の検討に利用</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>SLO・機能要件などで、可用性が決められている場合、5を監視対象とする <ul><li><code>5XXError/Count</code> の比率でしきい値を設ける</li><li>WARNレベル以下</li></ul></li><li>SLO・機能要件などで、性能が決められている場合、2を監視対象とする <ul><li><code>Latency</code> を90％タイルで1秒以内といった条件で監視対象とする</li><li>WARNレベル以下</li></ul></li><li>上記の取り決めが重要でなければ、ヘルスチェックなどの外形監視することで代替し、API Gatewayのメトリスク監視は行わない</li></ul><h4 id="alb" tabindex="-1">ALB <a class="header-anchor" href="#alb" aria-label="Permalink to &quot;ALB&quot;">​</a></h4><p><a href="https://docs.aws.amazon.com/ja_jp/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html" target="_blank" rel="noreferrer">Application Load Balancer の CloudWatch メトリクス - エラスティックロードバランシング</a> によると、以下の分類が存在する。</p><table tabindex="0"><thead><tr><th style="text-align:left;">カテゴリ</th><th style="text-align:left;">説明</th><th style="text-align:left;">主なメトリクス例 (一部)</th></tr></thead><tbody><tr><td style="text-align:left;">ロードバランサー</td><td style="text-align:left;">ALB全体の処理量、接続数、エラー、性能、LCU消費量などを示す</td><td style="text-align:left;">・RequestCount ・ActiveConnectionCount ・ProcessedBytes ・HTTPCode_ELB_4XX_Count 〜 5XX_Count ・ConsumedLCUs</td></tr><tr><td style="text-align:left;">ターゲット</td><td style="text-align:left;">ALBがリクエストを転送する先のターゲットグループ内のターゲットの応答性やエラーを示す</td><td style="text-align:left;">・RequestCountPerTarget ・TargetResponseTime ・HTTPCode_Target_2XX_Count 〜 5XX_Count ・TargetConnectionErrorCount</td></tr><tr><td style="text-align:left;">ターゲットグループの正常性</td><td style="text-align:left;">ターゲットグループ内のターゲットがヘルスチェックに成功しているか、正常/異常数を示す</td><td style="text-align:left;">・HealthyHostCount ・UnHealthyHostCount</td></tr><tr><td style="text-align:left;">Lambda 関数</td><td style="text-align:left;">ターゲットとしてLambda関数を使用している場合に、ALBとLambda関数間のやり取りやエラー状況を示す</td><td style="text-align:left;">・LambdaTargetProcessedBytes ・LambdaUserErrorCount</td></tr><tr><td style="text-align:left;">ユーザー認証</td><td style="text-align:left;">ALBの認証機能（Amazon CognitoやOIDC IdPなど）に関する成功、失敗、エラーを示す</td><td style="text-align:left;">・ELBAuthError ・ELBAuthFailure</td></tr></tbody></table><p>ALB関連で監視対象となり得る主要なメトリクスを下表にまとめる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">No</th><th style="text-align:left;">Category</th><th style="text-align:left;">Name</th><th style="text-align:left;">Unit</th><th style="text-align:left;">監視対象</th><th style="text-align:left;">Memo</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">ターゲットグループ</td><td style="text-align:left;">HealthyHostCount</td><td style="text-align:left;">Count</td><td style="text-align:left;">✅️</td><td style="text-align:left;">ターゲットグループ毎に、正常なホストが指定数（例: 3）を下回っていないか監視。サービスの冗長性維持を確認可</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"></td><td style="text-align:left;">UnHealthyHostCount</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">ターゲットグループ毎に、異常なホストが増加していないかに利用可</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"></td><td style="text-align:left;">TargetConnectionErrorCount</td><td style="text-align:left;">Count</td><td style="text-align:left;">❓️</td><td style="text-align:left;">ALBからターゲットへの接続エラー。ネットワークやターゲットプロセス起動前の問題を示唆し、アプリログでは検知できない</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"></td><td style="text-align:left;">TargetResponseTime</td><td style="text-align:left;">Seconds</td><td style="text-align:left;"></td><td style="text-align:left;">ターゲットの応答時間。バックエンドのパフォーマンス確認</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">ロードバランサー</td><td style="text-align:left;">HTTPCode_ELB_5XX_Count</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">ALB自体が原因で発生した5xxエラー。正常なターゲットがいない場合やALB内部エラー等。アプリログでは検知できないLBレベルの問題を示すため</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;"></td><td style="text-align:left;">TargetTLSNegotiationErrorCount</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">ALBとターゲット間のTLSネゴシエーションエラー。証明書不一致など、インフラ/設定レベルの問題を示唆</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;"></td><td style="text-align:left;">RequestCount</td><td style="text-align:left;">Count</td><td style="text-align:left;">❓️</td><td style="text-align:left;">リクエスト総数。通常アラート対象ではないが、極端な増減（ゼロ等）は異常の兆候となりうる</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;"></td><td style="text-align:left;">ActiveConnectionCount</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">アクティブな接続数。RequestCount同様、負荷状況の把握や極端な変動は異常の兆候となりうる</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>ALBのみの監視だけではなく、別途エンドツーエンドのDeep Health Checkアプリケーションによる監視を行う</li><li><code>SLOについてはAPI Gateway章と重複のため省略</code></li><li><code>HealthyHostCount</code> では、必要な冗長性を保持しているか監視する</li><li><code>HTTPCode_ELB_5XX_Count</code> はリクエスト総数からの割合で監視しても良いが、アプリに寄るDeep Heahth Checkで担保されているとして、省略しても良い</li><li><code>RequestCount</code> は常時稼働しているサービスである場合は、設定しておくと早期発見ができてベターである</li></ul><h4 id="ecs" tabindex="-1">ECS <a class="header-anchor" href="#ecs" aria-label="Permalink to &quot;ECS&quot;">​</a></h4><p>以下のドキュメントから、ECSの取得可能なメトリクスは、下表のように整理できる。</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/available-metrics.html" target="_blank" rel="noreferrer">Amazon ECS CloudWatch メトリクス - Amazon Elastic Container Service</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/Container-Insights-metrics-ECS.html" target="_blank" rel="noreferrer">「Amazon ECS Container Insights メトリクス」 - Amazon CloudWatch</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/deploy-container-insights-ECS-instancelevel.html" target="_blank" rel="noreferrer">Amazon ECS で EC2 インスタンスレベルのメトリクスを収集するための CloudWatch エージェントのデプロイ</a></li></ul><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">デフォルトメトリクス</th><th style="text-align:left;">Container Insights メトリクス</th><th style="text-align:left;">EC2 インスタンスレベル メトリクス</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;">ECSの基本的なメトリクス</td><td style="text-align:left;">有効化により収集される詳細パフォーマンスメトリクス。パフォーマンスログも収集</td><td style="text-align:left;">EC2起動タイプ時に基盤EC2インスタンスから収集されるメトリクス。ホストOSのリソース状況</td></tr><tr><td style="text-align:left;">例</td><td style="text-align:left;">CPUUtilization (Service)、MemoryUtilization (Service)、RunningTaskCountなど</td><td style="text-align:left;">RunningTaskCount、PendingTaskCount、CpuUtilized (Task/Container)など</td><td style="text-align:left;">CPUUtilization (ホスト)、MemoryUtilization (ホスト)、DiskReadOps/WriteOpsなど</td></tr><tr><td style="text-align:left;">粒度 (Granularity)</td><td style="text-align:left;">クラスタレベル,サービスレベル</td><td style="text-align:left;">クラスタレベル, サービスレベル, タスクレベル, コンテナレベル</td><td style="text-align:left;">インスタンスレベル</td></tr><tr><td style="text-align:left;">on EC2対応</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td></tr><tr><td style="text-align:left;">on Fargate対応</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td><td style="text-align:left;">❌️</td></tr><tr><td style="text-align:left;">セットアップ (Setup)</td><td style="text-align:left;">✅️不要</td><td style="text-align:left;">⚠️クラスタ毎に有効化が必要</td><td style="text-align:left;">⚠️基本は自動。詳細(メモリ等)はCloudWatch Agent設定が必要</td></tr><tr><td style="text-align:left;">追加費用 (Additional Cost)</td><td style="text-align:left;">✅️無し</td><td style="text-align:left;">⚠️あり (収集メトリクス/ログ数に基づく従量課金)</td><td style="text-align:left;">⚠️Agent経由の高頻度は課金あり</td></tr></tbody></table><p>利用頻度が高いと思われる主要なメトリクスを下表にまとめる。</p><table tabindex="0"><thead><tr><th>No</th><th style="text-align:left;">分類</th><th style="text-align:left;">粒度</th><th style="text-align:left;">Name</th><th style="text-align:left;">Unit</th><th style="text-align:left;">Target</th><th style="text-align:left;">Memo</th></tr></thead><tbody><tr><td>1</td><td style="text-align:left;">デフォルトメトリクス</td><td style="text-align:left;">クラスタ</td><td style="text-align:left;">CPUUtilization</td><td style="text-align:left;">%</td><td style="text-align:left;">-</td><td style="text-align:left;">クラスタ全体のCPU使用率</td></tr><tr><td>2</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">MemoryUtilization</td><td style="text-align:left;">%</td><td style="text-align:left;">-</td><td style="text-align:left;">クラスタ全体のメモリ使用率</td></tr><tr><td>3</td><td style="text-align:left;"></td><td style="text-align:left;">サービス</td><td style="text-align:left;">CPUUtilization</td><td style="text-align:left;">%</td><td style="text-align:left;">-</td><td style="text-align:left;">サービスに属するタスクの平均CPU使用率</td></tr><tr><td>4</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">MemoryUtilization</td><td style="text-align:left;">%</td><td style="text-align:left;">-</td><td style="text-align:left;">サービスに属するタスクの平均メモリ使用率</td></tr><tr><td>5</td><td style="text-align:left;">Container Insights</td><td style="text-align:left;">コンテナ</td><td style="text-align:left;">RunningTaskCount</td><td style="text-align:left;">Count</td><td style="text-align:left;">-</td><td style="text-align:left;">サービスで現在実行中のタスク数。DesiredTaskCount (設定値) と比較し、サービスの可用性確認で利用することが多い</td></tr><tr><td>6</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">PendingTaskCount</td><td style="text-align:left;">Count</td><td style="text-align:left;">-</td><td style="text-align:left;">サービスで起動待ち（保留中）のタスク数。0より大きい状態が続く場合、クラスタリソース不足やイメージ取得失敗などの可能性</td></tr><tr><td>7</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">CpuUtilized (Task/Container)</td><td style="text-align:left;">%</td><td style="text-align:left;">-</td><td style="text-align:left;">タスク/コンテナ単位のCPU使用率（タスク定義のCPU制限に対する割合）</td></tr><tr><td>8</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">MemoryUtilized (Task/Container)</td><td style="text-align:left;">%</td><td style="text-align:left;">-</td><td style="text-align:left;">タスク/コンテナ単位のメモリ使用率（タスク定義のメモリ制限に対する割合）</td></tr><tr><td>9</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">NetworkRxBytes / NetworkTxBytes</td><td style="text-align:left;">Bytes/Second</td><td style="text-align:left;">-</td><td style="text-align:left;">タスク/コンテナ単位のネットワーク送受信レート（NW I/Oボトルネック調査時などで利用）</td></tr><tr><td>10</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">StorageReadBytes / StorageWriteBytes</td><td style="text-align:left;">Bytes/Second</td><td style="text-align:left;">-</td><td style="text-align:left;">タスク/コンテナ単位のディスクI/Oレート (EFS/FSxなどのマウントボリューム利用時)。ストレージI/Oがボトルネック調査時などで利用</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>監視という意味ではLBからのヘルスチェックに寄せる。そのため、キャパシティプランニングやコスト最適化の観点ではメトリクス収集は行っても良いが、監視項目としては上記メトリクスで推奨項目は存在しない <ul><li><code>CPUUtilization などをオートスケーリングの実行条件にすることはありえる。あくまで監視項目としての話であることに注意する</code></li></ul></li></ul><h4 id="kinesis-data-streams" tabindex="-1">Kinesis Data Streams <a class="header-anchor" href="#kinesis-data-streams" aria-label="Permalink to &quot;Kinesis Data Streams&quot;">​</a></h4><p>「<a href="https://docs.aws.amazon.com/ja_jp/streams/latest/dev/monitoring-with-cloudwatch.html" target="_blank" rel="noreferrer">Amazon CloudWatch による Amazon Kinesis Data Streams サービスを監視する</a>」 によると、Kinesis Data Streamsには以下2種類のメトリクスが取得できる。</p><ul><li>ストリームレベル</li><li>シャードレベル</li></ul><p>監視対象としては、「ストリームレベル」のみに対して行うとし、下表にまとめる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">No</th><th style="text-align:left;">Name</th><th style="text-align:left;">Unit</th><th style="text-align:left;">監視対象</th><th style="text-align:left;">Memo</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">GetRecords.Bytes</td><td style="text-align:left;">Bytes</td><td style="text-align:left;"></td><td style="text-align:left;">GetRecords で取得されたバイト数</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">GetRecords.IteratorAgeMilliseconds</td><td style="text-align:left;">Milliseconds</td><td style="text-align:left;">✅️</td><td style="text-align:left;">GetRecords で返された最後のレコードの現在の時刻からの経過時間。保持期間 (デフォルト24 時間、最大で 7 日)から逆算して、データ欠損しない値を指定する</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">GetRecords.Latency</td><td style="text-align:left;">Milliseconds</td><td style="text-align:left;"></td><td style="text-align:left;">GetRecords のレイテンシ</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">GetRecords.Records</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">GetRecords で取得されたレコード数</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">GetRecords.Success</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">成功した GetRecords 数</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">IncomingBytes</td><td style="text-align:left;">Bytes</td><td style="text-align:left;"></td><td style="text-align:left;">成功した Put バイト数</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">IncomingRecords</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">成功した Put レコード数</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">PutRecord.Bytes</td><td style="text-align:left;">Bytes</td><td style="text-align:left;"></td><td style="text-align:left;">成功した PutRecord のバイト数</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;">PutRecord.Latency</td><td style="text-align:left;">Milliseconds</td><td style="text-align:left;"></td><td style="text-align:left;">PutRecord のレイテンシ</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;">PutRecord.Seccess</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">成功した PutRecord 数</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;">PutRecords.Bytes</td><td style="text-align:left;">Bytes</td><td style="text-align:left;"></td><td style="text-align:left;">成功した PutRecords のバイト数</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;">PutRecords.Latency</td><td style="text-align:left;">Milliseconds</td><td style="text-align:left;"></td><td style="text-align:left;">PutRecords のレイテンシ</td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;">PutRecords.Records</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">成功した PutRecords のレコード数</td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;">PutRecords.Success</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">成功した PutRecords の数</td></tr><tr><td style="text-align:left;">15</td><td style="text-align:left;">PutRecords.TotalRecords</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">PutRecords のレコード総数</td></tr><tr><td style="text-align:left;">16</td><td style="text-align:left;">PutRecords.SuccessfulRecords</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">PutRecords の正常なレコード数</td></tr><tr><td style="text-align:left;">17</td><td style="text-align:left;">PutRecords.FailedRecords</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">PutRecords の拒否されたレコード数</td></tr><tr><td style="text-align:left;">18</td><td style="text-align:left;">PutRecords.ThrottledRecords</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">PutRecords のスロットリングされたレコード数</td></tr><tr><td style="text-align:left;">19</td><td style="text-align:left;">ReadProvisionedThroughputExceeded</td><td style="text-align:left;">Count</td><td style="text-align:left;">✅️</td><td style="text-align:left;">スロットリングされた GetRecords 数。シャードの読み込み上限に達したかを確認</td></tr><tr><td style="text-align:left;">20</td><td style="text-align:left;">SubscribeToShard.RateExceeded</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">スロットリングされた SubscribeToShard 数</td></tr><tr><td style="text-align:left;">21</td><td style="text-align:left;">SubscribeToShard.Success</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">成功した SubscribeToShard 数</td></tr><tr><td style="text-align:left;">22</td><td style="text-align:left;">SubscribeToShardEvent.Bytes</td><td style="text-align:left;">Bytes</td><td style="text-align:left;"></td><td style="text-align:left;">拡張ファンアウトコンシューマに送信されたバイト数</td></tr><tr><td style="text-align:left;">23</td><td style="text-align:left;">SubscribeToShardEvent.MillisBehindLatest</td><td style="text-align:left;">Milliseconds</td><td style="text-align:left;"></td><td style="text-align:left;">コンシューマ送信イベントの最新からの遅延時間</td></tr><tr><td style="text-align:left;">24</td><td style="text-align:left;">SubscribeToShardEvent.Records</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">拡張ファンアウトコンシューマに送信されたレコード数</td></tr><tr><td style="text-align:left;">25</td><td style="text-align:left;">SubscribeToShardEvent.Success</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">成功した SubscribeToShard イベントの数</td></tr><tr><td style="text-align:left;">26</td><td style="text-align:left;">WriteProvisionedThroughputExceeded</td><td style="text-align:left;">Count</td><td style="text-align:left;">✅️</td><td style="text-align:left;">スロットリングされた PutRecord と PutRecords 数。シャードの書き込み上限に達したかを確認</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li><code>GetRecords.IteratorAgeMilliseconds</code> は保持期限の50％を超過した場合にWARN、80%以上でERRORにする</li><li><code>ReadProvisionedThroughputExceeded</code> や <code>WriteProvisionedThroughputExceeded</code> は Average で0.8 以上（※しきい値は任意に変更可）でWARNまたはERRORにするといった対応を加える <ul><li>対応としては、流量確認・オンデマンドの場合はシャード追加などを行う</li></ul></li></ul><h4 id="sqs" tabindex="-1">SQS <a class="header-anchor" href="#sqs" aria-label="Permalink to &quot;SQS&quot;">​</a></h4><p><a href="https://docs.aws.amazon.com/ja_jp/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-available-cloudwatch-metrics.html" target="_blank" rel="noreferrer">Amazon SQS で利用可能な CloudWatchメトリクス - Amazon Simple Queue Service</a> によると、11のメトリクス項目が取得できる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">No</th><th style="text-align:left;">Name</th><th style="text-align:left;">Unit</th><th style="text-align:left;">監視対象</th><th style="text-align:left;">Memo</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">ApproximateAgeOfOldestMessage</td><td style="text-align:left;">Seconds</td><td style="text-align:left;">✅️</td><td style="text-align:left;">最も古い未削除メッセージの経過期間。処理遅延やコンシューマの停止/性能不足を示す指標となる</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">ApproximateNumberOfGroupsWithInflightMessages</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;"><strong>FIFOキュー専用</strong>。インフライト（コンシューマが受信済みかつ未削除）メッセージを含むメッセージグループの概数。コンシューマの並列処理状況の把握に利用</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">ApproximateNumberOfMessagesDelayed</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">遅延タイマーが切れていないメッセージ数。遅延キューを利用している場合の状況把握に利用</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">ApproximateNumberOfMessagesNotVisible</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">処理中（インフライト）メッセージ数</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">ApproximateNumberOfMessagesVisible</td><td style="text-align:left;">Count</td><td style="text-align:left;">❓️</td><td style="text-align:left;">コンシューマが取得可能な状態にある未処理のメッセージ数（バックログ）。増加傾向は処理能力不足などの可能性を示す</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">NumberOfEmptyReceives</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">メッセージを返さなかった ReceiveMessage API 呼び出し数。これが高い場合、非効率なポーリングを示唆し、コスト増やスロットリングの原因になりえる。ロングポーリングなどの検討にも繋がる</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">NumberOfDeduplicatedSentMessages</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;"><strong>FIFOキュー専用</strong>。重複排除期間内に送信され、重複として破棄されたメッセージの数</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">NumberOfMessagesDeleted</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">キューから削除されたメッセージ数</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;">NumberOfMessagesReceived</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">ReceiveMessage で返されたメッセージ数。コンシューマ側のスループット（処理量）を示す</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;">NumberOfMessagesSent</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">キューに正常に追加されたメッセージ数。プロデューサ側のスループット（投入量）を示す。NumberOfMessagesReceived / NumberOfMessagesSent で処理スループットを把握可能</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;">SentMessageSize</td><td style="text-align:left;">Bytes</td><td style="text-align:left;"></td><td style="text-align:left;">キューに追加されたメッセージのサイズ</td></tr></tbody></table><p>なお、Kinesis Data StreamsのIteratorAge のように、キューに登録してから処理済み（削除される）までの時間を直接監視することはできない。そのため、例えば平均で30分以内に処理されているといった監視を標準メトリクスの組み合わせでは実現できない。</p><p>推奨は以下の通り。</p><ul><li><code>ApproximateAgeOfOldestMessage</code> はキューの保持期限に応じて設定する <ul><li>保持期限はデフォルト4日、60秒～14日間まで設定でき、例えば残り3割になったらWARNまたはERRORを出すことを検討する</li></ul></li><li><code>ApproximateNumberOfMessagesVisible</code><ul><li>DLQに入ったことを把握したい場合に、監視する</li><li>未処理メッセージ数が、一定のしきい値での確認が可能であれば設定する。例えば5分間で1度でも100を超えた場合はNGとする、といった方針をたてることができるかどうかである</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://dev.classmethod.jp/articles/sqs-dead-letter-queue-metrics-for-alert/" target="_blank" rel="noreferrer">SQSデッドレターキューにメッセージが入ったことを検知するメトリクスはどれが良いのか | DevelopersIO</a></p></div><h4 id="step-functions" tabindex="-1">Step Functions <a class="header-anchor" href="#step-functions" aria-label="Permalink to &quot;Step Functions&quot;">​</a></h4><p><a href="https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/procedure-cw-metrics.html" target="_blank" rel="noreferrer">Amazon CloudWatch を使用した Step Functions メトリクスのモニタリング</a> によると、バージョンまたはエイリアスを持つステートマシンのメトリクスは7項目取得可能である。</p><table tabindex="0"><thead><tr><th style="text-align:left;">No</th><th style="text-align:left;">Name</th><th style="text-align:left;">Unit</th><th style="text-align:left;">監視対象</th><th style="text-align:left;">Memo</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">ExecutionTime</td><td style="text-align:left;">Milliseconds</td><td style="text-align:left;"></td><td style="text-align:left;">実行のスタート時点から終了時点までの間隔</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">ExecutionThrottled</td><td style="text-align:left;">Count</td><td style="text-align:left;">✅️</td><td style="text-align:left;">スロットリングされた StateEntered イベント数</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">ExecutionsAborted</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">中断数または終了数</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">ExecutionsFailed</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">失敗数</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">ExecutionsStarted</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">スタート数</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">ExecutionsSucceeded</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">正常終了数</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">ExecutionsTimedOut</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">タイムアウト数</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>各タスクの異常終了はアプリケーション側のログ監視などで検知できるとし、Step Functions側の <code>ExecutionsFailed</code> などは監視項目に入れない</li><li><code>ExecutionsTimedOut</code> のタイムアウトの検知も、アプリケーション側で設定する前提とし、監視項目に入れない</li><li><code>ExecutionTime</code> で実行時間などを監視できるが、ステートマシンごとに求められる要件が異なるため、設定不可。必要な場合はアプリ側で門限チェックの仕組みを考える</li><li><code>ExecutionThrottled</code> はステートマシンがAPIレート制限に達している可能性があることを早期に検知するために設定する。検知した場合はAWSサポートへのService Quota（上限緩和）申請を検討する（※リクエスト自体が正しく、流量調整も不可の場合）</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://dev.classmethod.jp/articles/step-functions-cloudwatch/" target="_blank" rel="noreferrer">Step Functions(ステートマシン)が出力するCloudWatchメトリクスを確認してみた | DevelopersIO</a></p></div><h4 id="s3" tabindex="-1">S3 <a class="header-anchor" href="#s3" aria-label="Permalink to &quot;S3&quot;">​</a></h4><p><a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/userguide/metrics-dimensions.html#s3-cloudwatch-metrics" target="_blank" rel="noreferrer">メトリクスとディメンション - Amazon Simple Storage Service</a> によると、S3は以下のメトリクス種別が存在する。</p><ul><li>ストレージメトリクス</li><li>リクエストメトリクス（※💰️有効化で追加費用が発生）</li><li>レプリケーションメトリクス（※💰️有効化で追加費用が発生）</li><li>S3 Storage Lens のメトリクス（※💰️有効化で追加費用が発生）</li><li>アカウントのS3 使用状況メトリクス</li></ul><p>本ガイドラインでは、バケット単位の監視について説明する。数が多いため、主要なメトリクスのみ抜粋した。</p><table tabindex="0"><thead><tr><th>No</th><th style="text-align:left;">Category</th><th style="text-align:left;">Name</th><th style="text-align:left;">Unit</th><th style="text-align:left;">Target</th><th style="text-align:left;">Memo</th></tr></thead><tbody><tr><td>1</td><td style="text-align:left;">ストレージメトリクス</td><td style="text-align:left;">BucketSizeBytes</td><td style="text-align:left;">Bytes</td><td style="text-align:left;">❓️</td><td style="text-align:left;">バケットの合計サイズ</td></tr><tr><td>2</td><td style="text-align:left;"></td><td style="text-align:left;">NumberOfObjects</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">バケット内のオブジェクト総数</td></tr><tr><td>3</td><td style="text-align:left;">リクエストメトリクス</td><td style="text-align:left;">AllRequests</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">全てのHTTPメソッドのリクエスト総数</td></tr><tr><td>4</td><td style="text-align:left;"></td><td style="text-align:left;">GetRequests</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">GETおよびSELECTリクエストの数</td></tr><tr><td>5</td><td style="text-align:left;"></td><td style="text-align:left;">PutRequests</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">PUT, POST, COPYリクエストの数</td></tr><tr><td>6</td><td style="text-align:left;"></td><td style="text-align:left;">4xxErrors</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">クライアントエラー (403 Forbidden, 404 Not Found など) の合計数</td></tr><tr><td>7</td><td style="text-align:left;"></td><td style="text-align:left;">5xxErrors</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">サーバーエラー (500 InternalError, 503 ServiceUnavailable など) の合計数</td></tr><tr><td>8</td><td style="text-align:left;"></td><td style="text-align:left;">FirstByteLatency</td><td style="text-align:left;">Milliseconds</td><td style="text-align:left;"></td><td style="text-align:left;">S3がリクエストを受信してから、レスポンスの最初のバイトをクライアントに送信し始めるまでの時間</td></tr><tr><td>9</td><td style="text-align:left;"></td><td style="text-align:left;">TotalRequestLatency</td><td style="text-align:left;">Milliseconds</td><td style="text-align:left;"></td><td style="text-align:left;">S3がリクエストを受信してから、リクエストが完了するまでの合計時間</td></tr><tr><td>10</td><td style="text-align:left;">レプリケーションメトリクス</td><td style="text-align:left;">BytesPendingReplication</td><td style="text-align:left;">Bytes</td><td style="text-align:left;"></td><td style="text-align:left;">レプリケーション未完了のオブジェクトの合計サイズ</td></tr><tr><td>11</td><td style="text-align:left;"></td><td style="text-align:left;">OperationsPendingReplication</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">レプリケート未完了のオブジェクトの数</td></tr><tr><td>12</td><td style="text-align:left;"></td><td style="text-align:left;">ReplicationLatency</td><td style="text-align:left;">Seconds</td><td style="text-align:left;">❓️</td><td style="text-align:left;">ソースバケットでのオブジェクト変更から、レプリケーション完了までの最大時間。 RPO（目標復旧時点）の達成状況の確認時に使用</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li><code>BucketSizeBytes</code> はコスト目的で、想定される容量*バッファ係数をかけた値をしきい値に設けても良い <ul><li>Billingの請求で分かる部分もあるが、切り分けを早くできること・早期に検知できれば影響を最小限に抑えることなどが可能であるため</li></ul></li><li>リクエストメトリクスは通常監視しなくても良い。S3を呼び出しているWeb APIなどのレイテンシをまず監視すると考えられるため <ul><li>より、ユーザー体験に直結しやすいエンドツーエンドの監視が可能であれば、そちらに寄せるべきであるため</li><li>Web API単位でレイテンシが悪化した際の、切り分け情報としてS3に閉じたレイテンシを取得していても良いが、追加費用もかかることから積極的な推奨はしない</li></ul></li><li>レプリケーションメトリクスは、通常監視対象外として良い <ul><li>S3レプリケーション自体はAWSマネージドな機能であるため、厳密に監視する意味が低い。しかし、ビジネス継続計画（BCP）で定められた目標復旧時点（RPO）が15分以内である必要がある場合、ReplicationLatencyが15分を超えていないか確認することは重要であるため、目標値の厳しさによっては追加で監視する</li></ul></li></ul><h4 id="dynamodb" tabindex="-1">DynamoDB <a class="header-anchor" href="#dynamodb" aria-label="Permalink to &quot;DynamoDB&quot;">​</a></h4><p><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/metrics-dimensions.html" target="_blank" rel="noreferrer">DynamoDB のメトリクスとディメンション によると、32のメトリクス項目が存在する。</a></p><table tabindex="0"><thead><tr><th>No</th><th style="text-align:left;">Name</th><th style="text-align:left;">Unit</th><th style="text-align:left;">監視対象</th><th style="text-align:left;">Memo</th></tr></thead><tbody><tr><td>1</td><td style="text-align:left;">AccountMaxReads</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">アカウントレベルの読み取りスループット上限</td></tr><tr><td>2</td><td style="text-align:left;">AccountMaxWrites</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">アカウントレベルの書き込みスループット上限</td></tr><tr><td>3</td><td style="text-align:left;">AccountMaxTableLevelReads</td><td style="text-align:left;">Count</td><td style="text-align:left;">❓️</td><td style="text-align:left;">テーブルレベルの読み取りスループット上限。使用率計算 (ConsumedReadCapacityUnits / AccountMaxTableLevelReads) に使用</td></tr><tr><td>4</td><td style="text-align:left;">AccountMaxTableLevelWrites</td><td style="text-align:left;">Count</td><td style="text-align:left;">❓️</td><td style="text-align:left;">テーブルレベルの書き込みスループット上限。使用率計算 (ConsumedWriteCapacityUnits / AccountMaxTableLevelWrites) に使用</td></tr><tr><td>5</td><td style="text-align:left;">ConsumedReadCapacityUnits</td><td style="text-align:left;">Count</td><td style="text-align:left;">❓️</td><td style="text-align:left;">消費された読み取りキャパシティーユニット（RCU）</td></tr><tr><td>6</td><td style="text-align:left;">ConsumedWriteCapacityUnits</td><td style="text-align:left;">Count</td><td style="text-align:left;">❓️</td><td style="text-align:left;">消費された書き込みキャパシティーユニット（WCU）</td></tr><tr><td>7</td><td style="text-align:left;">ProvisionedReadCapacityUnits</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">設定された読み取りキャパシティーユニット</td></tr><tr><td>8</td><td style="text-align:left;">ProvisionedWriteCapacityUnits</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">設定された書き込みキャパシティーユニット</td></tr><tr><td>9</td><td style="text-align:left;">ReadThrottleEvents</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">読取りリクエストのスロットリングイベント数。ThrottledRequests に含まれる</td></tr><tr><td>10</td><td style="text-align:left;">WriteThrottleEvents</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">書き込みリクエストのスロットリングイベント数。ThrottledRequests に含まれる</td></tr><tr><td>11</td><td style="text-align:left;">ConsumedChangeDataCaptureUnits</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">DynamoDB Streamsで消費されたユニット</td></tr><tr><td>12</td><td style="text-align:left;">OnlineIndexConsumedWriteCapacity</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">GSI作成/削除時に消費される書き込みキャパシティ</td></tr><tr><td>13</td><td style="text-align:left;">OnlineIndexPercentageProgress</td><td style="text-align:left;">Percent</td><td style="text-align:left;"></td><td style="text-align:left;">GSI作成/削除の進捗率 (％)</td></tr><tr><td>14</td><td style="text-align:left;">OnlineIndexThrottleEvents</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">GSI作成/削除時のスロットリングイベント数</td></tr><tr><td>15</td><td style="text-align:left;">PendingReplicationCount</td><td style="text-align:left;">Count</td><td style="text-align:left;">❓️</td><td style="text-align:left;">グローバルテーブルで、まだレプリケートされていない項目数</td></tr><tr><td>16</td><td style="text-align:left;">ReturnedItemCount</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">Query/Scan オペレーションで返された項目数</td></tr><tr><td>17</td><td style="text-align:left;">ReturnedRecordsCount</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">DynamoDB Streams から取得されたレコード数</td></tr><tr><td>18</td><td style="text-align:left;">TimeToLiveDeletedItemCount</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">TTLによって削除された項目数</td></tr><tr><td>19</td><td style="text-align:left;">ThrottledPutRecordCount</td><td style="text-align:left;">Count</td><td style="text-align:left;">❓️</td><td style="text-align:left;">DynamoDB Streams への PutRecord がスロットリングされた回数</td></tr><tr><td>20</td><td style="text-align:left;">ThrottledRequests</td><td style="text-align:left;">Count</td><td style="text-align:left;">✅️</td><td style="text-align:left;">読み取り/書き込み両方を含むスロットリング総数</td></tr><tr><td>21</td><td style="text-align:left;">TransactionConflict</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">トランザクション中の競合発生数。アプリログ監視で代替可能</td></tr><tr><td>22</td><td style="text-align:left;">ConditionalCheckFailedRequests</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">条件付き書き込み/削除が条件不一致で失敗した回数。アプリログ監視で代替可能。</td></tr><tr><td>23</td><td style="text-align:left;">SystemErrors</td><td style="text-align:left;">Count</td><td style="text-align:left;">⚠️</td><td style="text-align:left;">DynamoDBサービス側の内部エラー。AWS側の問題を示唆するため、発生時は調査が必要</td></tr><tr><td>24</td><td style="text-align:left;">UserErrors</td><td style="text-align:left;">Count</td><td style="text-align:left;"></td><td style="text-align:left;">権限不足などのユーザー起因によるエラー。アプリログ監視で代替可能。</td></tr><tr><td>25</td><td style="text-align:left;">AccountProvisionedReadCapacityUtilization</td><td style="text-align:left;">Percent</td><td style="text-align:left;"></td><td style="text-align:left;">アカウント全体の読み取りキャパシティ使用率 (％)</td></tr><tr><td>26</td><td style="text-align:left;">AccountProvisionedWriteCapacityUtilization</td><td style="text-align:left;">Percent</td><td style="text-align:left;"></td><td style="text-align:left;">アカウント全体の書き込みキャパシティ使用率 (％)</td></tr><tr><td>27</td><td style="text-align:left;">MaxProvisionedTableReadCapacityUtilization</td><td style="text-align:left;">Percent</td><td style="text-align:left;"></td><td style="text-align:left;">テーブル単位の読み取りキャパシティ最大使用率 (％)</td></tr><tr><td>28</td><td style="text-align:left;">MaxProvisionedTableWriteCapacityUtilization</td><td style="text-align:left;">Percent</td><td style="text-align:left;"></td><td style="text-align:left;">テーブル単位の書き込みキャパシティ最大使用率 (％)</td></tr><tr><td>29</td><td style="text-align:left;">AgeOfOldestUnreplicatedRecord</td><td style="text-align:left;">Milliseconds</td><td style="text-align:left;">❓️</td><td style="text-align:left;">グローバルテーブル/Streamsで、最も古い未処理/未レプリケートレコードの経過時間</td></tr><tr><td>30</td><td style="text-align:left;">ReplicationLatency</td><td style="text-align:left;">Milliseconds</td><td style="text-align:left;">❓️</td><td style="text-align:left;">グローバルテーブルで、項目書き込みから特定レプリカに表示されるまでの時間</td></tr><tr><td>31</td><td style="text-align:left;">SuccessfulRequestLatency</td><td style="text-align:left;">Milliseconds</td><td style="text-align:left;"></td><td style="text-align:left;">成功したリクエストのレイテンシ</td></tr><tr><td>32</td><td style="text-align:left;">ReturnedBytes</td><td style="text-align:left;">Bytes</td><td style="text-align:left;"></td><td style="text-align:left;">Query/Scan オペレーションで返されたデータの合計サイズ</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li><code>ThrottledRequests</code><ul><li>オンデマンド・プロビジョンドモードに関わらず、スロットリングについては監視する</li></ul></li><li>プロビジョンドモードの場合、<code>ConsumedReadCapacityUnits/AccountMaxTableLevelReads</code> や <code>ConsumedWriteCapacityUnits/AccountMaxTableLevelWrites</code> を監視して、想定以内に収まっているか監視する</li><li>DynamoDB Streamsを利用している場合 <ul><li><code>ThrottledPutRecordCount</code> を確認する</li><li><code>AgeOfOldestUnreplicatedRecord</code> で一定間隔（30分など）、未処理が滞留していないことを確認する</li></ul></li><li>グローバルテーブルを用いている場合 <ul><li><code>PendingReplicationCount</code> , <code>AgeOfOldestUnreplicatedRecord</code> , <code>ReplicationLatency</code> は要件に応じて監視項目に加える</li></ul></li><li><code>SystemErrors</code><ul><li>検知自体はアプリケーション側で確認できるため、省略しても良い</li><li>公式ドキュメントでは、このメトリクスが0でない場合、調査することを推奨とある。しかし、発生してもアプリケーション側のリトライで救済可能な場合が多く、調査にも少なからず工数がかかることから必ずしも監視対象に加える必要は無いとする</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Monitoring-metrics-with-Amazon-CloudWatch.html" target="_blank" rel="noreferrer">Amazon CloudWatch で DynamoDB のメトリクスをモニタリングする</a> に、<code>SystemErrors</code> が0であるべきという記述がある</li></ul></div><h2 id="ci-cd" tabindex="-1">CI/CD <a class="header-anchor" href="#ci-cd" aria-label="Permalink to &quot;CI/CD&quot;">​</a></h2><p>CI/CD（継続的インテグレーション/継続的デリバリー/デプロイ）は、アプリケーションの開発からデプロイまでのプロセスを自動化・高速化し、開発効率を向上させるための手法である。特にクラウド環境では、複数環境の管理やIaC、マネージドサービスの活用といった観点から導入するケースが多い。</p><p>AWSでCI/CDを行うためのサービスには主に以下の選択肢がある。</p><table tabindex="0"><thead><tr><th style="text-align:left;">ツール</th><th style="text-align:left;">概要</th><th style="text-align:left;">特徴</th></tr></thead><tbody><tr><td style="text-align:left;">Github Actions</td><td style="text-align:left;">GitHubに統合されたCI/CDツール</td><td style="text-align:left;">GitHubとの親和性が高く、利用者が多くCICDサービスとして人気のあるサービス。特に小規模～中規模プロジェクトで多くの採用事例があるため情報が豊富</td></tr><tr><td style="text-align:left;">AWS CodePipeline AWS CodeBuild</td><td style="text-align:left;">AWS利用に最適化されたCI/CDツール</td><td style="text-align:left;">AWSに統合されており、IAM、ECR、S3との統合がスムーズであるが、やや柔軟性に欠ける。AWS CodeCommitが新規ユーザー利用を廃止したことによりソースリポジトリは外部のサービス利用が前提となる</td></tr><tr><td style="text-align:left;">Jenkins</td><td style="text-align:left;">オンプレミス型のCI/CDツール</td><td style="text-align:left;">かつてのデファクトスタンダードであり、今でも利用されている。プラグインが豊富で、情報量が多い。メンテナンスが比較的大変な傾向がある（セキュリティ・プラグイン管理など）</td></tr><tr><td style="text-align:left;">GitLab CI/CD</td><td style="text-align:left;">GitLab一体型のCI/CDサービス</td><td style="text-align:left;">オールイン開発プラットフォームの思想を持つサービスで、CI/CDが中核機能として組み込まれている。DockerやKubernetesとの親和性が高い</td></tr></tbody></table><p>AWSでCI/CDを構成する際に使用されるアーティファクトの格納先は以下のようなものがある。</p><table tabindex="0"><thead><tr><th style="text-align:left;">サービス</th><th style="text-align:left;">概要</th><th style="text-align:left;">特徴</th></tr></thead><tbody><tr><td style="text-align:left;">S3</td><td style="text-align:left;">オブジェクトストレージ</td><td style="text-align:left;">静的ファイルの保管に最適</td></tr><tr><td style="text-align:left;">CodeArtifact</td><td style="text-align:left;">パッケージ向けのリポジトリ</td><td style="text-align:left;">閉域ネットワーク内で依存パッケージの管理が可能なレジストリ</td></tr><tr><td style="text-align:left;">ECR</td><td style="text-align:left;">コンテナレジストリサービス</td><td style="text-align:left;">ビルドしたECSやEKSへデプロイするコンテナイメージを管理する</td></tr><tr><td style="text-align:left;">Systems Manager Parameter Store</td><td style="text-align:left;">パラメータや環境変数を管理</td><td style="text-align:left;">デプロイ時に注入する設定を保管する。直接アーティファクトを保管するサービスではないが、CDフェーズで使用される</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>利用するソースコードリポジトリに対応したCI/CDサービスを利用することを推奨する <ul><li>例：Githubを使用する場合、Github Actions、GitLabを使用する場合、GitLab CI/CDを使用することが望ましい</li></ul></li><li>AWS CodeCommit は新規ユーザー利用を廃止していることから、利用を推奨しない</li><li>運用負荷を考慮し、JenkinsではなくマネージドなCI/CDサービスの利用を推奨する</li><li>上記より、GithubとGithub Actions または GitLabとGitLab CI/CDサービスのどちらかを推奨する</li></ul><h3 id="ci-cd各パイプラインの連携について" tabindex="-1">CI/CD各パイプラインの連携について <a class="header-anchor" href="#ci-cd各パイプラインの連携について" aria-label="Permalink to &quot;CI/CD各パイプラインの連携について&quot;">​</a></h3><p>CI/CDを実装するにあたって、CIとCDの各パイプラインの連携方法は、CIとCDのパイプラインを統合して実装するケース、分けて実装するケースが考えられる。</p><p>どちらもメリット/デメリットが存在するが、エンタープライズ向けの開発においてはデプロイ前の手動承認プロセスは必須となる。ただし開発環境に限っては、CIとCDを統合して開発効率を上げる仕組みも考えられることから開発の効率を高めることが出来るため、有効な選択肢となる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">（1）CIとCDを分離する方式</th><th style="text-align:left;">（2）CIとCDを統合する方式</th><th style="text-align:left;">（3）環境に応じて組み合わせる方式 （開発環境は統合/本番やステージ環境は分離）</th></tr></thead><tbody><tr><td style="text-align:left;">Pros</td><td style="text-align:left;">✅️分けることにより、パイプラインごとの債務が明確になる<br> ✅️CIパイプラインで作成した成果物を複数環境にデプロイするなど、複数環境に対応しやすい</td><td style="text-align:left;">✅️シンプルな構成となり一つのパイプラインで完結する<br> ✅️小規模開発に向いている</td><td style="text-align:left;">✅️本番環境はデプロイ前の安全性を保ったまま、開発環境での効率的なデプロイが可能（分離/統合のメリット掛け合わせ）</td></tr><tr><td style="text-align:left;">Cons</td><td style="text-align:left;">❌️構成がやや複雑になる<br> ❌️管理が必要なパイプラインが増える</td><td style="text-align:left;">❌️複数環境へのデプロイなど、柔軟な制御が難しい</td><td style="text-align:left;">❌️運用/構成がやや複雑となる<br> ❌️環境ごとの差分に注意が必要</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li><a href="/arch-guidelines/documents/forGitBranch/git_branch_standards.html#ブランチ戦略の選定">Gitブランチフロー規約</a> におけるブランチ戦略に沿った運用を行う想定で（3）環境に応じて組み合わせる方式を推奨する。</li></ul><h3 id="構成例" tabindex="-1">構成例 <a class="header-anchor" href="#構成例" aria-label="Permalink to &quot;構成例&quot;">​</a></h3><p>CI/CDを実現するにあたって、一般的な構成例を以下に示す。</p><p>統合する方式の場合、下図の手動実行が不要となる。</p>',347)),(l(),y(x,null,{default:i(()=>[a(n,{id:"mermaid-9533",class:"mermaid",graph:"graph%20%20LR%0A%20%20%20%20Developer(%5B%E9%96%8B%E7%99%BA%E8%80%85%5D)%0A%20%20%20%20Repository%5BCodeCommit%3Cbr%3EGithub%3Cbr%3EGitLab%3Cbr%3Eor%20etc...%5D%0A%20%20%20%20CI_Exec%5BCodeBuild%3Cbr%3EGithub%20Runner%3Cbr%3EGitLab%20Runner%3Cbr%3E%E3%83%93%E3%83%AB%E3%83%89%2F%E3%83%86%E3%82%B9%E3%83%88%5D%0A%20%20%20%20ECR%5BECR%3Cbr%3E%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%5D%0A%20%20%20%20CD_Exec%5BCodeBuild%3Cbr%3EGithub%20Runner%3Cbr%3EGitLab%20Runner%3Cbr%3E%E3%82%BF%E3%82%B9%E3%82%AF%E5%AE%9A%E7%BE%A9%E3%81%AE%E6%9B%B4%E6%96%B0%5D%0A%20%20%20%20ECS%5BECS%E7%AD%89%3Cbr%3E%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E5%85%88%5D%0A%20%20%20%20Approve%5B%E6%89%BF%E8%AA%8D%5D%0A%0A%20%20%20%20Developer%20--%3E%20%7C%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%3Cbr%3Eor%3Cbr%3E%E3%83%9E%E3%83%BC%E3%82%B8%3Cbr%3Eor%3Cbr%3Egit%E3%82%BF%E3%82%B0%7C%20Repository%0A%20%20%20%20subgraph%20CI%0A%20%20%20%20%20%20%20%20Repository%20--%3E%20%7CTrigger%7C%20CI_Pipeline%0A%20%20%20%20%20%20%20%20subgraph%20CI_Pipeline%0A%20%20%20%20%20%20%20%20%20%20%20%20CI_Exec%0A%20%20%20%20%20%20%20%20end%0A%20%20%20%20end%0A%20%20%20%20CI_Exec%20--%3E%20ECR%0A%0A%20%20%20%20Developer%20--%3E%20%7C%E6%89%8B%E5%8B%95%E5%AE%9F%E8%A1%8C%7C%20CD_Pipeline%0A%20%20%20%20ECR%20--%3E%20CD_Exec%0A%0A%20%20%20%20subgraph%20CD%0A%20%20%20%20%20%20%20%20subgraph%20CD_Pipeline%0A%20%20%20%20%20%20%20%20%20%20%20%20CD_Exec%20--%3E%20Approve%0A%20%20%20%20%20%20%20%20%20%20%20%20Approve%20--%3E%20CodeDeploy%0A%20%20%20%20%20%20%20%20end%0A%20%20%20%20end%0A%20%20%20%20CodeDeploy%20--%3E%20ECS%0A"})]),fallback:i(()=>[...t[0]||(t[0]=[f(" Loading... ",-1)])]),_:1})),t[2]||(t[2]=d('<h3 id="テストについて" tabindex="-1">テストについて <a class="header-anchor" href="#テストについて" aria-label="Permalink to &quot;テストについて&quot;">​</a></h3><p>CI/CDパイプラインにおいて、品質を継続的に保証するために自動テストの導入が重要である。</p><p>全ての自動テストをCI上で組み込むことが理想であるが、実行時間が長期化することで開発上のボトルネックになる懸念がある。そのため、テストの実行時間に応じてCICDパイプラインの中では高速なテスト（単体テストなど）を実行し、結合テストやE2Eテストなど、外部リソースへの接続が必要で時間のかかるテストは、パイプラインとは別に日次などの定期的なスケジュールで実行するなどの検討をすることも選択肢として考えられる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">（1）全てのテストをパイプラインに組み込む</th><th style="text-align:left;">（2）時間のかかるテストを切り出し、定期的に実行する</th><th style="text-align:left;">（3）時間のかからない基本的なケースのみパイプラインで実行する</th></tr></thead><tbody><tr><td style="text-align:left;">パイプライン実行時間</td><td style="text-align:left;">❌ 長時間化しやすい</td><td style="text-align:left;">✅ 短縮できる</td><td style="text-align:left;">✅ 短縮できる</td></tr><tr><td style="text-align:left;">管理の一元化</td><td style="text-align:left;">✅ すべてのテストをパイプラインで一元管理できる</td><td style="text-align:left;">❌ パイプライン外の管理が別途必要になる</td><td style="text-align:left;">❌ パイプライン外のテストに依存する</td></tr><tr><td style="text-align:left;">設定の柔軟性</td><td style="text-align:left;">❌ 個別設定が難しい</td><td style="text-align:left;">✅ 時間のかかるテストに特化した個別設定が可能</td><td style="text-align:left;">❌ 個別設定が難しい</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>可能な限りテストを自動化し、基本的に（1）の方針を第一の選択とする <ul><li>チーム開発では、デグレ（手戻り）防止・品質を優先させたいため</li></ul></li><li>どうしても時間がかかるテストには（2）の方式で分離する <ul><li>特に改修頻度が少なく品質が安定していて、実行時間が高いテストを定期実行側に移すことで、開発生産性と品質のバランスを取る</li></ul></li></ul><h2 id="謝辞" tabindex="-1">謝辞 <a class="header-anchor" href="#謝辞" aria-label="Permalink to &quot;謝辞&quot;">​</a></h2><p>このアーキテクチャガイドラインの作成にあたり、多大なるご協力をいただきました皆様に心より感謝申し上げます。</p><ul><li><strong>作成者</strong>（神崎林太郎、真野隼記、天明昂輝、田中駿悟、保谷安胤、洞内惇）</li><li><strong>レビュアー</strong>（前原応光）</li></ul><p>皆様のご尽力なしには、本ガイドラインの完成はなしえませんでした。改めて深く感謝いたします。</p>',10))])}const E=r(p,[["render",u]]);export{A as __pageData,E as default};
