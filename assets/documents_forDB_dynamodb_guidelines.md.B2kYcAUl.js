import{_ as l,C as a,c as i,o as s,G as n,a4 as d}from"./chunks/framework.BJEXY-5A.js";const r="/arch-guidelines/assets/rdb_modeling_process.D2Lzf10m.png",o="/arch-guidelines/assets/dynamodb_modeling_process.Bl-c7_jt.png",c="/arch-guidelines/assets/pk_sk.CXvtRkDI.png",p="/arch-guidelines/assets/rpo_rto.BM3IvnEC.png",h="/arch-guidelines/assets/image12.CmF7cC0W.jpg",k=JSON.parse('{"title":"DynamoDB設計ガイドライン","description":"","frontmatter":{"sidebarDepth":4,"title":"DynamoDB設計ガイドライン","author":"フューチャー株式会社","head":[["meta",{"name":"keywords","content":"DynamoDB"}]]},"headers":[],"relativePath":"documents/forDB/dynamodb_guidelines.md","filePath":"documents/forDB/dynamodb_guidelines.md"}'),y={name:"documents/forDB/dynamodb_guidelines.md"};function u(g,t,m,f,b,x){const e=a("page-title");return s(),i("div",null,[n(e),t[0]||(t[0]=d(`<p>本ガイドラインは、世の中のシステム開発プロジェクトのために無償で提供する。ただし、掲載内容および利用に際して発生した問題、それに伴う損害については、フューチャー株式会社は一切の責務を負わないものとする。また、掲載している情報は予告なく変更する場合があるため、あらかじめご了承ください。</p><div class="warning custom-block"><p class="custom-block-title">免責事項: 有志で作成したドキュメントである</p><ul><li>フューチャーには多様なプロジェクトが存在し、それぞれの状況に合わせて工夫された開発プロセスや高度な開発支援環境が存在する。本ガイドラインはフューチャーの全ての部署／プロジェクトで適用されているわけではなく、有志が観点を持ち寄って新たに整理したものである</li><li>相容れない部分があればその領域を書き換えて利用することを想定している <ul><li>プロジェクト固有の背景や要件への配慮は、ガイドライン利用者が最終的に判断すること</li></ul></li><li>本ガイドラインに必ず従うことは求めておらず、設計案の提示と、それらの評価観点を利用者に提供することを主目的としている</li></ul></div><h2 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h2><p>AWS が提供するフルマネージドな NoSQLデータベースサービスである、DynamoDBの技術選定・命名・データモデリング・パーティショニング・性能・費用・監視・運用・セキュリティなどの考慮すべき設計事項と推奨案をまとめる。</p><h3 id="適用範囲" tabindex="-1">適用範囲 <a class="header-anchor" href="#適用範囲" aria-label="Permalink to &quot;適用範囲&quot;">​</a></h3><p>DynamoDB を利用してシステムを構築する全てのエンジニアおよびアーキテクトを対象とする。業務システムの開発を想定しており、開発スピードの優先度が高いPoCや、学習目的の趣味の開発は除く。数名以上の開発チームがあり、運用保守まで見据え、安定して動作することが求められるとする。</p><p>対象外となる事項は以下の通り。</p><ul><li>DynamoDB の詳細なAPIリファレンスや具体的なコーディング実装例を網羅するものではない。それらについては、AWS公式ドキュメントや各プログラミング言語のSDKドキュメントを参照すること</li><li>DynamoDBをセッションストレージのような、限定的な用途で使うようなケース。本ガイドラインの内容も参考になると思うが、要件に対して過剰な設計になる可能性がある</li><li>特定のビジネス領域やアプリケーション固有の要件に特化した設計判断については、本ガイドラインの原則を踏まえつつ、各プロジェクトで個別検討すること</li><li>DynamoDBを利用する前提として、AWSそのものの命名や設計が必要になる。<a href="https://future-architect.github.io/coding-standards/documents/forAWSResource/AWS%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E5%91%BD%E5%90%8D%E8%A6%8F%E7%B4%84.html" target="_blank" rel="noreferrer">AWSインフラ命名規約</a> や<a href="https://future-architect.github.io/arch-guidelines/documents/forAWS/aws_guidelines.html" target="_blank" rel="noreferrer">AWS設計ガイドライン</a> を参考にすること</li><li>インフラ構築はTerraformなどのプロビジョニングツールの利用を推奨する。<a href="https://future-architect.github.io/arch-guidelines/documents/forTerraform/terraform_guidelines.html" target="_blank" rel="noreferrer">Terraform設計ガイドライン</a> を参考にすること</li></ul><h3 id="用語" tabindex="-1">用語 <a class="header-anchor" href="#用語" aria-label="Permalink to &quot;用語&quot;">​</a></h3><ul><li><strong>読み込みキャパシティユニット（RCU）</strong>: 1秒あたりに読み込み可能なデータ量の単位</li><li><strong>書き込みキャパシティユニット（WCU）</strong>: 1秒あたりに書き込み可能なデータ量の単位</li><li><strong>カバードクエリ</strong>: クエリ対象のすべての属性がインデックスに射影（プロジェクション）されており、テーブル本体への読み込み無しで結果を返せるクエリ</li><li><strong>TTL (Time To Live)</strong>: アイテムに有効期限のタイムスタンプを設定し、期限が切れたアイテムを自動的にテーブルから削除する機能</li><li><strong>未処理のアイテム (UnprocessedItems)</strong>: BatchGetItemやBatchWriteItemなどのバッチ処理で、プロビジョニングされたスループットの不足などにより、処理しきれなかったアイテム</li><li><strong>条件付き書き込み (Conditional Writes)</strong>: 特定の条件が満たされた場合にのみ書き込み操作を実行する仕組み</li><li><strong>冪等性</strong>: 同じ処理を複数回実行しても、結果が常に同じになる性質</li><li><strong>DLQ (デッドレターキュー)</strong>: 処理に失敗したメッセージやイベントを隔離するためのキュー</li></ul><h2 id="dynamodb選定" tabindex="-1">DynamoDB選定 <a class="header-anchor" href="#dynamodb選定" aria-label="Permalink to &quot;DynamoDB選定&quot;">​</a></h2><p>DynamoDBは、フルマネージドで高い拡張性を持つ反面、性能を最大化するために機能が意図的に絞り込まれており、RDBMSとは全く異なるクセの強い特性を持つ。技術選定ではそれらを理解した上での、慎重な判断が求められる。</p><p>DynamoDBとRDBMSの特性や用途は以下の通り。</p><ul><li><strong>DynamoDBの特性と用途</strong><ul><li>予測可能なアクセスパターンに対して、大規模なトラフィックでも安定した低遅延を提供できる</li><li>ECのカート、IoTのデータ収集など、シンプルなキーで高速に読み書きする要件がビジネス価値に直結する用途に向く。性能と拡張性を最大化するために、クエリの柔軟性を犠牲にしているとも言える</li></ul></li><li><strong>RDBMSの特性と用途</strong><ul><li>SQLによるクエリの柔軟性と、厳格なトランザクションによる一貫性に強みを持つRDBMS（Amazon Aurora PostgreSQLなど）は、データの関連性が複雑な業務システムや、多角的なデータ分析・集計が求められる要件に向く</li><li>正規化されたデータモデルとJOINは、将来の未知の要求に対する変化対応力を担保する</li></ul></li></ul><p>推奨は以下の通り。</p><ul><li>以下のいずれかの要件に該当する場合、それはDynamoDBの採用のノックアウト要件である。そのため、原則、RDBMSを選択または併用を検討する <ol><li>将来にわたる全てのアクセスパターンを、設計段階で定義できない場合。ビジネス要件の変更に伴い、未知の検索・集計要件が発生する可能性が高いシステムの場合、途方もない開発/運用コスト、インフラ費用がかかり技術的負債となる <ul><li>S3 Export + Athenaで緩和も可能だが、リアルタイム性はなく、データ転送やクエリ実行にもコストと手間がかかる点は変わらない</li></ul></li><li>BIツールやデータサイエンティストによるアドホックなクエリ要求や、エンドユーザーによる組み合わせの検索条件が求められる場合。GSIなどでカバーできる範囲もあるが、結果整合性であるため一貫性での課題もあり、SQLを利用できるRDBMS優位</li><li>複数のデータ集約をまたがる、厳格な一貫性が求められるアトミックな操作が必要な場合。DynamoDBもトランザクションはあるが、最大100アイテムという制限がある。また、RDBMSのような悲観的ロック（行ロック）とは異なり、競合発生時のエラーハンドリングがアプリケーション側に求められる</li></ol></li></ul><div class="tip custom-block"><p class="custom-block-title">適材適所で判断する</p><p>システムの全てのデータストアを単一技術で統一する必要はない。コアとなるSoR（System of Record）はRDBMS、キャッシュはDynamoDBといったように、機能要件ごとに最適なデータストアを組み合わせる、ポリグロットパーシステンスは常に考慮に入れる。</p></div><div class="tip custom-block"><p class="custom-block-title">迷ったらRDBMSを選定する</p><p>技術選定で確信が持てない場合、特に業務システムにおいては、まずRDBMSで実現できないかを検討すると安全である。DynamoDBは「RDBMSでは解決できない明確な課題（特に拡張性や遅延）」が存在する場合に採用を検討する、という判断手順が良い。</p></div><div class="tip custom-block"><p class="custom-block-title">DynamoDBとAuroraとの併用の是非</p><p>大量のINSERT/UPDATEが発生するというユースケース（ECや証券など）でAurora（PostgreSQL） 側の負荷軽減のため、DynamoDBでリクエストを受け止めDynamoDB StreamsなどでAuroraに反映するシステム構成を考えたい場合があるが、この場合も安易にDynamoDBの導入は行わない方が良い。</p><p>例えば、過去のプロジェクトでは、適切なインスタンスサイズとクエリチューニングを前提として、秒間700トランザクション（1トランザクションあたり3SQL程度）をAurora（PostgreSQL）で処理できた実績もある。高負荷を理由に単純にDynamoDBを導入するのではなく、まずはRDBMSで対応可能かを見極めるべきである。構成をシンプルにすることで、相当量の設計開発/運用コストを減らせるためである。負荷軽減を目的に部分的なDynamoDB導入を検討する場合は、負荷試験などを通して必要性を慎重に見極めるべきである。</p><p>注意点を紹介する。</p><ul><li>DynamoDBとAurora間でデータ反映が非同期（結果整合性）となるため、遅延や障害時にデータ不整合となるリスクを内包する。例えば、在庫数といったDynamoDBとAurora間で強い一貫性が求められるような業務特性へフィットさせることが難しい</li><li>NoSQLとRDBのデータモデルの差異や実装上の課題は多い。特に、倉庫在庫棚卸しのような絶対値での在庫数を洗替する処理などで、RDB側に加えられた大量のレコード更新を、DynamoDB側へ反映させるような双方向同期の要件がある場合は、データ整合性の担保が難しいため適さない</li></ul><p>なお、DynamoDBを ”正” としてメインのデータストアとして導入する場合は、こうしたデータ整合性の問題が発生しないため、この限りではない。</p></div><h2 id="命名規則" tabindex="-1">命名規則 <a class="header-anchor" href="#命名規則" aria-label="Permalink to &quot;命名規則&quot;">​</a></h2><p>DynamoDBの命名規則は、AWSリソース全般の命名規約と、データ属性に関する2つの側面から定義する。</p><ul><li>テーブルやインデックスといったAWSリソース: <a href="https://future-architect.github.io/coding-standards/documents/forAWSResource/AWS%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E5%91%BD%E5%90%8D%E8%A6%8F%E7%B4%84.html" target="_blank" rel="noreferrer">AWSインフラ命名規約</a> に準拠し、リソースの役割と環境を明確に識別できるようにする。</li><li>アイテムの属性: <a href="/arch-guidelines/documents/forDB/postgresql_guidelines.html">PostgreSQL設計ガイドライン</a> の命名規約を適用する。これにより、データモデルの可読性と一貫性を担保する。</li></ul><p>この2つを組み合わせることで、インフラ層からデータ層まで一貫した思想に基づいた命名を実現する。</p><p>推奨は以下の通り。</p><ul><li>テーブル名 <ul><li>「AWSインフラ命名規約」に準拠する。基本的なフォーマットと例は以下の通り。単語の区切り文字はハイフン(<code>-</code>)とする。</li></ul></li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{env}-{product}-{usage}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例1: ステージング環境のfugaプロダクトにおけるユーザーテーブル</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stg-fuga-user</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例2: 本番環境のhogeプロダクトにおけるユーザーアクセスログテーブル</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prod-fuga-user-access-log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>属性名 <ul><li>「PostgreSQL設計ガイドライン」の命名規約に準拠する</li><li>主要なルールをDynamoDBの文脈に合わせて適用する</li><li>基本 <ul><li><code>snake_case</code>を採用する。(例: <code>user_name</code>, <code>created_at</code>)</li><li>予約語（例: key, type, size など）は避ける。やむを得ず使用する場合は式属性名で対応する。</li></ul></li></ul></li><li>プライマリーキー <ul><li>そのキーが何を示すか明確な名前をつける。(例: <code>user_id</code>, <code>order_id</code>)</li></ul></li><li>グローバルセカンダリインデックス(GSI)名 <ul><li>gsi1, gsi2, …のように、汎用的な連番で命名する。キーの属性名を組み合わせた <code>user_id-created_at-index</code>のような命名は非推奨とする <ul><li>GSIのキー構成や射影する属性は、将来の要件変更に伴い変更される可能性があるため</li></ul></li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">属性名の長さはアイテムの合計サイズに影響する</p><p><a href="https://repost.aws/ja/knowledge-center/dynamodb-minimize-costs" target="_blank" rel="noreferrer">DynamoDB のコストを最小限に抑える | AWS re:Post</a> にコスト観点で、「短い属性名を使用する」というプラクティスがある。 属性名を短くするとストレージコストや、RCU/WCUを抑えることができる可能性がある。そのため、DynamoDBの公式ドキュメントの例示では <code>snake_case</code> ではなく <code>CamelCase</code> を利用することが多いと考えられる。 本ガイドラインでは、多少のコスト削減よりRDBに親しんだ開発運用者への混乱を少しでも抑えるという思想で、 <code>snake_case</code> を推奨している。</p></div><h2 id="データモデリング" tabindex="-1">データモデリング <a class="header-anchor" href="#データモデリング" aria-label="Permalink to &quot;データモデリング&quot;">​</a></h2><h3 id="設計アプローチ" tabindex="-1">設計アプローチ <a class="header-anchor" href="#設計アプローチ" aria-label="Permalink to &quot;設計アプローチ&quot;">​</a></h3><p>DynamoDBのスキーマレスであり、物理的なスキーマ変更自体は柔軟に行うことができる。しかし、誤った設計を行うと、ホットパーティションやScan利用が必須となり、設計が根本から破綻する可能性がある。そのためRDBMSと同レベルの、緻密な設計が求められる。</p><p>一方で、DynamoDBのデータモデリングの手順はRDBMSとは異なる。RDBMSであればデータ構造を正規化し、データ構造がビジネス要件を満たしていればクエリはSQL上の結合などで吸収できるため、柔軟性は高い。一方でDynamoDBは基本的に結合ができないため、どのようなデータアクセスが行われるかを分析し、最終的なデータ構造を決める必要がある。これは <a href="https://www.slideshare.net/slideshow/db-20190905/171086391" target="_blank" rel="noreferrer">https://www.slideshare.net/slideshow/db-20190905/171086391</a> や <a href="https://speakerdeck.com/_kensh/dynamodb-design-practice" target="_blank" rel="noreferrer">DynamoDB の基礎と設計 / DynamoDB Design Practice - Speaker Deck</a> などAWS公式ドキュメントでも述べられている。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">RDBMS</th><th style="text-align:left;">DynamoDB</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;">データの構造と正規化に重点を置いてデータモデルを設計する。その後でアプリケーション設計（クエリの作成）を行う</td><td style="text-align:left;">アプリケーションがデータをどのように利用するか、すなわち「アクセスパターン」の分析と、データモデルを同時に行う必要がある</td></tr><tr><td style="text-align:left;">図</td><td style="text-align:left;"><img src="`+r+'" alt=""></td><td style="text-align:left;"><img src="'+o+'" alt=""></td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>DynamoDBのデータモデリング設計手順は、公式のモデリングプロセスに従い、下表のようなツールを利用する</li></ul><table tabindex="0"><thead><tr><th style="text-align:left;">ステップ</th><th style="text-align:left;">成果物</th><th style="text-align:left;">利用ツール例</th></tr></thead><tbody><tr><td style="text-align:left;">①対象業務領域のデータモデリング</td><td style="text-align:left;">ERD</td><td style="text-align:left;">A5:SQL Mk-2など</td></tr><tr><td style="text-align:left;">②ユースケースとそれぞれのアクセスパターンの洗い出し</td><td style="text-align:left;">業務（ユースケース）一覧、機能一覧、基本設計書</td><td style="text-align:left;">スプレッドシート、Markdownなど</td></tr><tr><td style="text-align:left;">③スキーマ設計</td><td style="text-align:left;">テーブル定義書、インデックス定義書</td><td style="text-align:left;">Markdownなど</td></tr></tbody></table><ul><li>一般的に、③のスキーマ設計は②のユースケースが分かるまで開始すべきではない。①までに留めておく必要がある。もし、ユースケースが不明瞭である場合は、DynamoDBだけではなく、RDBMSへの切り替えや併用を検討する</li><li>AWSが推奨する、クエリ条件設計は、少なくとも条件付き更新/トランザクションが求められる、特殊なアクセスパターンに絞って確実に実施する</li><li>ユースケース一覧は、下記Tipsの内容を参考にした形式とする</li></ul><div class="tip custom-block"><p class="custom-block-title">IoTメーターのデータモデリング例</p><p>①のモデリング結果から、以下の3テーブルが存在するとする。</p><table tabindex="0"><thead><tr><th style="text-align:left;">テーブル名</th><th style="text-align:left;">用途</th><th style="text-align:left;">プライマリーキー</th><th style="text-align:left;">ソートキー</th><th style="text-align:left;">属性例</th></tr></thead><tbody><tr><td style="text-align:left;">MeterMeasurements</td><td style="text-align:left;">各種メーターから定期的に送信される時系列の測定値を保存</td><td style="text-align:left;">MeterID (例: 001)</td><td style="text-align:left;">Timestamp (例: YYYY-MM-DDTHH:MM:SSZ)</td><td style="text-align:left;">MeterType (ELECTRIC, WATER, GAS), Value（想定値）, Unit（単位）</td></tr><tr><td style="text-align:left;">MeterStatus</td><td style="text-align:left;">メーターの最新の状態情報を保存</td><td style="text-align:left;">MeterID</td><td style="text-align:left;">CurrentStatus (固定値 CURRENT)</td><td style="text-align:left;">MeterType (ELECTRIC, WATER, GAS), BatteryLevel, CommunicationStatus, WarningFlags</td></tr><tr><td style="text-align:left;">MeterConfigurations</td><td style="text-align:left;">各種メーターの設定変更の履歴を保存</td><td style="text-align:left;">MeterID</td><td style="text-align:left;">Timestamp (例: YYYY-MM-DDTHH:MM:SSZ)</td><td style="text-align:left;">MeterType (ELECTRIC, WATER, GAS), ParameterName, NewValue, AppliedBy</td></tr></tbody></table><p>②のアクセスパターンの洗い出しは以下のように一覧化することを指す（※ユースケースは、ID管理した方が良い）。もちろん、1つのユースケースで複数のテーブルにアクセスすることもありえる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">ユースケース</th><th style="text-align:left;">対象テーブル</th><th style="text-align:left;">アクセスキー</th><th style="text-align:left;">CRUD</th></tr></thead><tbody><tr><td style="text-align:left;">最新状況（測定値、メーター状態）の取得</td><td style="text-align:left;">MeterMeasurements</td><td style="text-align:left;">MeterID、Timestamp (降順ソート、Limit: 1)</td><td style="text-align:left;">R</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">MeterStatus</td><td style="text-align:left;">MeterID、CurrentStatus</td><td style="text-align:left;">R</td></tr><tr><td style="text-align:left;">期間指定で測定値の取得</td><td style="text-align:left;">MeterMeasurements</td><td style="text-align:left;">MeterID、Timestampの範囲</td><td style="text-align:left;">R</td></tr><tr><td style="text-align:left;">設定変更履歴の取得</td><td style="text-align:left;">MeterConfigurations</td><td style="text-align:left;">MeterID、Timestampの範囲またはプレフィックス</td><td style="text-align:left;">R</td></tr><tr><td style="text-align:left;">特定のステータスを持つメーターの一覧取得</td><td style="text-align:left;">MeterStatus</td><td style="text-align:left;">StatusType、StatusValue (例: BATTERY#LOW)</td><td style="text-align:left;">R</td></tr><tr><td style="text-align:left;">メーターの設定変更</td><td style="text-align:left;">MeterConfigurations</td><td style="text-align:left;">MeterID、Timestamp</td><td style="text-align:left;">C</td></tr></tbody></table></div><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/bp-general-nosql-design.html" target="_blank" rel="noreferrer">DynamoDB 用の NoSQL</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/bp-modeling-nosql.html" target="_blank" rel="noreferrer">DynamoDB でリレーショナルデータをモデル化するための最初のステップ</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/bp-modeling-nosql-B.html" target="_blank" rel="noreferrer">DynamoDB でリレーショナルデータをモデル化する例</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/bp-time-series.html" target="_blank" rel="noreferrer">DynamoDB で時系列データを処理するベストプラクティス。</a></li><li><a href="https://dev.classmethod.jp/articles/dynamodb-data-modeling-cmy304/#%E3%83%87%E3%83%BC%E3%82%BF%E3%83%A2%E3%83%87%E3%83%AA%E3%83%B3%E3%82%B0%E4%BE%8B" target="_blank" rel="noreferrer">[レポート]DynamoDBデータモデリング (CMY304) #reinvent | DevelopersIO</a></li><li><a href="https://dev.classmethod.jp/articles/dynamodb-nosql-workbench-datamodeling/" target="_blank" rel="noreferrer">DynamoDBのテーブル設計に最適！NoSQL WorkbenchのData modelerで今度こそDynamoDBを使いこなす！ | DevelopersIO</a></li></ul></div><h3 id="シングルテーブル-マルチテーブル" tabindex="-1">シングルテーブル/マルチテーブル <a class="header-anchor" href="#シングルテーブル-マルチテーブル" aria-label="Permalink to &quot;シングルテーブル/マルチテーブル&quot;">​</a></h3><p>シングルテーブル設計とは、RDBMSのようにエンティティごと（例: Users, Orders, Products）にテーブルを分割するのではなく、関連する複数のエンティティを1つのテーブルに格納する設計方法である。これにより、「隣接リストパターン」などのテクニックを用いて、RDBのJOINのように1回のQuery呼び出しで、例えばユーザーとその注文履歴をまとめて取得するといった処理が可能になった。</p><p>この設計パターンが広まった背景には、過去のDynamoDBが持っていた以下のような制約がある。</p><ul><li>過去はオンデマンドキャパシティモードが存在せず、プロビジョニングモードのみだった <ul><li>テーブルを細かく分割すると、アクセス頻度の低いテーブルでも最低限のRCU/WCUを確保する必要があり、無駄なコストが発生しがちであった。また、各テーブルのアクセスパターンは異なるため、個別にピーク性能を予測してプロビジョニングするのは困難だった</li><li>シングルテーブルでテーブルを集約することで、RCU/WCUを共有、平準化できるというメリットがあった</li></ul></li><li>過去、1つのAWSアカウント・リージョンで作成できるテーブル数に256個の上限があった <ul><li>今のようにAWSアカウントを用途ごとに分割することも少なかったので、よりテーブル数を節約する必要があった</li></ul></li></ul><p>現在では、オンデマンドモードの登場とテーブル数上限の変更（2500個まで）により、上記の制約は大きく緩和された。そのため、シングルテーブルを積極的に推す理由は減り、プロダクト特性で2つのパターンを使い分ける時代になっている。</p><table tabindex="0"><thead><tr><th style="text-align:left;">観点</th><th style="text-align:left;">シングルテーブル設計</th><th style="text-align:left;">マルチテーブル設計</th></tr></thead><tbody><tr><td style="text-align:left;">学習コスト</td><td style="text-align:left;">❌RDBMSと概念の乖離が大きい</td><td style="text-align:left;">✅ エンティティごとにテーブルが分かれており、理解しやすい</td></tr><tr><td style="text-align:left;">GSI設計</td><td style="text-align:left;">⚠️上限20に近づきやすい傾向</td><td style="text-align:left;">✅️個別最適な設計が可能</td></tr><tr><td style="text-align:left;">性能</td><td style="text-align:left;">✅関連データを1回のクエリで取得可能なため、高い</td><td style="text-align:left;">⚠️複数のエンティティ取得には、複数のAPIコールが必要</td></tr><tr><td style="text-align:left;">キャパシティ ユニット調整</td><td style="text-align:left;">✅️一律のプロビジョニングが可能</td><td style="text-align:left;">✅️あるエンティティのみプロビジョニングモードで動かすなど、柔軟な対応が可能</td></tr><tr><td style="text-align:left;">セキュリティ</td><td style="text-align:left;">⚠️IAMポリシーでのアクセス制御が複雑となる</td><td style="text-align:left;">✅テーブル単位でのIAMポリシー設定が容易</td></tr><tr><td style="text-align:left;">拡張性</td><td style="text-align:left;">❌新しいエンティティ追加に対して、大規模なデータ移行が必要になる場合もありえる</td><td style="text-align:left;">✅新しいエンティティはテーブル追加であり、既存影響はない</td></tr><tr><td style="text-align:left;">バックアップ</td><td style="text-align:left;">⚠️バックアップはAll or Nothingになる。特定のエンティティだけを対象にできない</td><td style="text-align:left;">✅エンティティ単位でのバックアップやPITR（ポイントインタイムリカバリ）が可能</td></tr><tr><td style="text-align:left;">OLAP連携（ScanやExport）</td><td style="text-align:left;">⚠️テーブル全体になるため、余計なレコードが入る場合があり非効率</td><td style="text-align:left;">✅️エンティティ単位で可能</td></tr><tr><td style="text-align:left;">費用分析</td><td style="text-align:left;">⚠️各エンティティの費用内訳が不明瞭</td><td style="text-align:left;">✅テーブル単位で費用が明確に分離され、分析が容易</td></tr><tr><td style="text-align:left;">テーブルクラス</td><td style="text-align:left;">⚠️エンティティごとの使い分けが不可</td><td style="text-align:left;">⚠️アクセス頻度が低い場合に、低頻度アクセスストレージクラスを有効にするといった最適化が可能</td></tr><tr><td style="text-align:left;">監視</td><td style="text-align:left;">✅️メトリクスなどの作成数を抑えられる</td><td style="text-align:left;">⚠️エンティティ単位でメトリクスなどを作成、費用増加要因にはなる</td></tr></tbody></table><p>また、シングルテーブル設計において1Queryで取得できるというのも、BatchGetItemsを用いれば1リクエストかつRCUも同等である。シングルテーブル設計では、キーにプレフィックスを付与して区別するため容量増加になり、GSIなどの余計なRCU/WCUが発生しうることを考慮すると、費用面でプラスになるとは一律に言い難くなっている。</p><p>推奨は以下の通り。</p><ul><li>マルチテーブル設計を第一に検討する <ul><li>開発速度、メンテナンス性、学習コストの観点が理由。特に顧客説明、新規参画者へのオンボーディング、引き継ぎ時などで大きなコストが発生する</li><li>ドキュメントを詳しく作成したとしても、理解できない・とても苦しむ人が出てきて大変になるため</li></ul></li><li>以下のように尖った要件を満たす必要がある場合のみ、シングルテーブル設計を検討する <ul><li>超低レイテンシが必須のシステム: 広告配信やリアルタイムゲームのバックエンドなど、リクエストのたびに複数のエンティティをミリ秒単位で取得する必要がある。</li></ul></li><li>シングルテーブルを採用する場合も、全てを1テーブルに集約するのではなく、必要最小限の数に留める</li></ul><div class="tip custom-block"><p class="custom-block-title">隣接リストデザインパターン</p><p>シングルテーブル設計を実現するための代表的なテクニック。1つのテーブル内でエンティティ間の階層関係（1対多）を表現し、関連データをまとめて取得するために使われます。</p></div><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://aws.amazon.com/jp/blogs/news/aws-week-in-review-march-14-2022/" target="_blank" rel="noreferrer">AWS Week in Review – 2022 年 3 月 14 日 | Amazon Web Services</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/data-modeling-foundations.html" target="_blank" rel="noreferrer">DynamoDB のデータモデリングの基盤</a></li><li><a href="https://aws.amazon.com/jp/blogs/news/single-table-vs-multi-table-design-in-amazon-dynamodb/" target="_blank" rel="noreferrer">Amazon DynamoDB におけるシングルテーブル vs マルチテーブル設計 | Amazon Web Services ブログ</a></li><li><a href="https://pages.awscloud.com/rs/112-TZM-766/images/DOL_09_AWSSummit_JP_2024.pdf?version=0" target="_blank" rel="noreferrer">https://pages.awscloud.com/rs/112-TZM-766/images/DOL_09_AWSSummit_JP_2024.pdf?version=0</a></li><li><a href="https://tmokmss.hatenablog.com/entry/20220528/1653672966" target="_blank" rel="noreferrer">DynamoDB、シングルテーブルにするか否か - maybe daily dev notes</a></li><li><a href="https://qiita.com/kazuya-sugawara/items/4f1c1d3147e82f9829ac" target="_blank" rel="noreferrer">AWS DynamoDB: シングルテーブル設計 vs マルチテーブル設計 - Qiita</a></li><li><a href="https://www.gomomento.com/jp/resources/blog-jp/single-table-design-for-dynamodb-the-reality/" target="_blank" rel="noreferrer">DynamoDBのシングルテーブル設計：現実解 - Momento</a></li></ul></div><h3 id="プライマリーキーの設計" tabindex="-1">プライマリーキーの設計 <a class="header-anchor" href="#プライマリーキーの設計" aria-label="Permalink to &quot;プライマリーキーの設計&quot;">​</a></h3><p>DynamoDBのプライマリーキーには以下の2パターンが存在する。</p><ul><li>「パーティションキー（PK）」のみの単一のキー <ul><li>以前は、ハッシュキーと呼ばれた</li><li>DynamoDBの物理的なパーティションのどこに保存されるかを決定するキー。負荷分散の要になるため、各パーティションへのアクセスが均一になるように設計する</li><li>パーティションキーのみで一意である必要がある</li></ul></li><li>「パーティションキー」と「ソートキー（SK）」の複合キー <ul><li>パーティションキーとソートキーで一意である必要がある</li><li>RDBMSと異なり、3つ以上のキーは指定できない。その場合は <code>#</code> などで文字列連結したキーを独自に作成することとなる</li></ul></li></ul><p>どちらの場合も、パーティションキーによって実データが複数ノードに分散される。アクセスが特定のパーティションキーに集中すると性能ネックになるため、カーディナリティが高いキーを選定する必要がある。</p><p>推奨は以下の通り。</p><ul><li>基本的に、複合キーを積極的に活用する。特に時系列データにはPKにID、SKにタイムスタンプを指定すると良い <ul><li>Queryにより、同一パーティションキー内でソートキーの範囲を指定（例：特定の日時以降のデータを取得）するなど、効果的な検索が可能となる</li></ul></li><li>連番をパーティションキーにする場合、性能劣化に注意する <ul><li>単調増加の連番の場合、同一パーティションに書き込まれる傾向がある。もし、これをキーにする場合は処理性能が要件を満たすか確認する</li></ul></li><li>タイムスタンプを利用する場合は、ソートキーにISO 8601形式（YYYY-MM-DDTHH:MM:SSZ）を使用する <ul><li>形式やタイムゾーンも、システムで固定する（検索ミスを無くすため）</li><li>UNIXタイムスタンプより可読性が高く、またBetweenなどのクエリ条件も直感的に指定しやすいため</li></ul></li><li>数値をソートキーにする場合、数値型と文字列型の特性を理解して選択する <ul><li>数値型はBETWEEN や &gt;, &lt; といった比較演算子 など、範囲指定する場合にマッチする</li><li>文字列型で大小関係を維持したい場合は0埋め（例：&quot;01&quot;, &quot;02&quot;, &quot;10&quot;）する必要がある。ステータスコードのような固定長の区分値は、文字列型で管理することが望ましい</li></ul></li><li>3項目以上の複合キーにする場合は、ソートキー側を文字列連結することを第一に考える <ul><li>パーティションキーは必ず特定する必要があるため（特定できない場合は、テーブルフルScanになるため）</li><li>ソートキーを [属性1]#[属性2] のように連結しておけば、begins_with 演算子を利用して前方一致での柔軟な検索が可能になるため</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">パーティションキーやソートキーには、List・Map・Set型は利用できない</p><p>プライマリーキーやインデックスのキーにはプリミティブなデータ型（Number, String, Binary）のみサポートしている。これらのコレクションはLSI、GSIのキー属性で利用できない。</p></div><div class="info custom-block"><p class="custom-block-title">参考</p><p>PK、SKなどの関係性は、 <a href="https://aws.typepad.com/sajp/2017/02/choosing-the-right-dynamodb-partition-key.html" target="_blank" rel="noreferrer">【AWS Database Blog】DynamoDB におけるパーティションキー設計の手引き</a> にある図が分かりやすい。<br><img src="'+c+'" alt=""></p></div><h2 id="インデックス設計" tabindex="-1">インデックス設計 <a class="header-anchor" href="#インデックス設計" aria-label="Permalink to &quot;インデックス設計&quot;">​</a></h2><h3 id="インデックスの使い分け" tabindex="-1">インデックスの使い分け <a class="header-anchor" href="#インデックスの使い分け" aria-label="Permalink to &quot;インデックスの使い分け&quot;">​</a></h3><p>DynamoDBのインデックスは、ローカルセカンダリインデックス（LSI）とグローバルセカンダリインデックス（GSI）の2種類がある。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">GSI</th><th style="text-align:left;">LSI</th></tr></thead><tbody><tr><td style="text-align:left;">プライマリーキー</td><td style="text-align:left;">ベーステーブルとは異なるPKとSKを持つことが可能</td><td style="text-align:left;">ベーステーブルと同じPKである必要があるが、異なるSKにはできる</td></tr><tr><td style="text-align:left;">作成数</td><td style="text-align:left;">1テーブルあたり20まで作成可能</td><td style="text-align:left;">1テーブルあたり5まで作成可能</td></tr><tr><td style="text-align:left;">変更/削除</td><td style="text-align:left;">テーブル作成後も変更・削除が可能</td><td style="text-align:left;"><strong>テーブル作成時にのみ定義可能、後からの変更削除は不可</strong></td></tr><tr><td style="text-align:left;">整合性</td><td style="text-align:left;">結果整合性（反映は非同期。PutItem後にGSIに対してGet/Queryすると未反映の可能性がある）</td><td style="text-align:left;">強い整合性（同期的に反映される）</td></tr><tr><td style="text-align:left;">キャパシティ</td><td style="text-align:left;">ベーステーブルとは独立したRCU/WCUを消費する</td><td style="text-align:left;">ベーステーブルのRCU/WCUを共有する</td></tr><tr><td style="text-align:left;">スパースインデックス</td><td style="text-align:left;">利用可能</td><td style="text-align:left;">利用可能（LSIのSK属性を持たない項目はインデックスに含まれない）</td></tr><tr><td style="text-align:left;">サイズ制限</td><td style="text-align:left;">制限なし</td><td style="text-align:left;">パーティションキーごとに10GBまで</td></tr></tbody></table><p>LSIとGSIのどちらを活用するべきかという議論はよく発生する。</p><p>推奨は以下の通り。</p><ul><li>原則、GSIの利用を第一に検討する <ul><li>後から自由に追加・削除できるため（多少ではあるが）設計上の柔軟性を確保できるため</li><li>データ反映に遅延が生じる（結果整合性）になるが、完全にそれらを許容できない場合はDynamoDBをそもそも選択すべきではないため</li></ul></li><li>LSIは以下の条件を全て満たす場合に利用する <ul><li>条件 <ul><li>強い整合性が必要である</li><li>ベーステーブルと同じパーティションキーに対するクエリである</li><li>ベーステーブルとは異なるソート順が必要である</li></ul></li><li>例 <ul><li>「あるユーザーの注文履歴を、注文日ではなく配送状況でソートしたい。データ登録後すぐに検索するユースケースがある」など</li></ul></li><li>LSIはテーブル初期構築時のみでしか定義できないため、将来のクエリ要件を全て把握する必要がある点に注意する</li></ul></li><li>GSIの利用数は、費用の観点からなるべく絞るように設計する <ul><li>将来使うかもしれない、という曖昧な理由でインデックスを作成しない。 必要になった時点で（GSIであれば）追加する</li></ul></li><li>GSIのスパースインデックスは利用が可能であれば、積極的に活用する <ul><li>費用、性能面で有利であるため</li></ul></li><li>GSIオーバーロード <ul><li>マルチテーブルの設計を推奨しているため、原則、利用しない</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">スパースインデックスとは</p><p>インデックスキーとして定義した属性が存在しない場合、その項目はインデックスの対象外となり、インデックスが作成されなくなる。これを利用して、意図的に「特定のステータスを持つアイテム」や「フラグが立っているアイテム」だけをインデックス化する手法が「スパースインデックス」である。例えば、OrderStatusが &#39;PENDING&#39; の項目のみを検索したい場合、処理が完了したアイテムからOrderStatus属性自体を削除する。これにより、GSIには&#39;PENDING&#39;のアイテムのみが含まれることになり、インデックスが非常に小さく（スパースに）なる。</p><p>参考: <a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/bp-indexes-general-sparse-indexes.html" target="_blank" rel="noreferrer">スパースインデックスの利用 - Amazon DynamoDB</a></p></div><div class="warning custom-block"><p class="custom-block-title">GSIはnullにするとエラーになる件</p><p>GSIのプライマリーキー（PK/SK）に設定する属性には、Null型や空のバイナリ/文字列を設定することはできない（実行時に、ValidationExceptionエラーになる）。スパースインデックスを実現したい場合は、Nullをセットするのではなく、アイテムからその属性自体を含めない（削除する）必要がある。</p></div><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/bp-indexes-general.html" target="_blank" rel="noreferrer">DynamoDB のセカンダリインデックスの一般的なガイドライン</a></p></div><h3 id="複合キー" tabindex="-1">複合キー <a class="header-anchor" href="#複合キー" aria-label="Permalink to &quot;複合キー&quot;">​</a></h3><p>複数の属性値を特定の区切り文字（例: #）で連結し、単一の文字列としてPKやSKに格納する設計パターンは、DynamoDBでは複合キーやコンポジットキーと呼ばれる。RDBMSではまずお目にかかれないが、DynamoDB界隈では一般的である。基本的にはPKは完全一致が必要であるため、SK側を複合キーにし、範囲検索に対応したり、1つのインデックスで複数の属性に対する絞り込みやソートを表現し、GSIの数を減らすことができる。</p><p>説明のため、ECサイトの注文 (Orders) テーブルのクエリ要件の例と設計案を紹介する。</p><ol><li>あるユーザー (UserID) の注文を、ステータス (OrderStatus) で絞り込み、日付 (OrderDate) 順に取得したい</li><li>あるステータス (OrderStatus) の全注文を、日付 (OrderDate) 順に取得したい</li></ol><p>それぞれの設計例を示す。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">要件1の設計案</th><th style="text-align:left;">要件2の設計案</th></tr></thead><tbody><tr><td style="text-align:left;">GSI PK</td><td style="text-align:left;">UserID</td><td style="text-align:left;">OrderStatus</td></tr><tr><td style="text-align:left;">GSI SK</td><td style="text-align:left;">OrderStatus#OrderDate</td><td style="text-align:left;">OrderDate</td></tr><tr><td style="text-align:left;">クエリ例</td><td style="text-align:left;">PK = &#39;user-123&#39; AND&lt;br&gt;SK begins_with &#39;SHIPPING_PENDING#&#39;</td><td style="text-align:left;">PK = &#39;COMPLETED&#39; AND&lt;br&gt;SK between &#39;2025-08-01&#39; AND &#39;2025-08-31&#39;</td></tr><tr><td style="text-align:left;">メモ</td><td style="text-align:left;">特定ユーザーに紐づくデータを、ステータスで絞り込み日付順に効率よく取得できる</td><td style="text-align:left;">ユーザーを横断して、特定のステータスのデータを効率よく取得できる。<br>ただし、IDを追加の検索条件にするとFilterExpressionとなり、効率は低下</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>区切り文字は <code>#</code> を利用する</li><li>フォーマットを統一する <ul><li>日付はISO 8601形式にする</li><li>数値は原則、ゼロ埋めで固定長にする。複合キーの場合は数値の属性も必ず文字列型になるため</li></ul></li><li>複合キーを作る場合も、単体の属性も項目として定義する <ul><li>フィルター条件などで利用する可能性があるためや、S3出力時の分析性を高めるため</li></ul></li><li>データモデルではなく、クエリファーストで設計する <ul><li>ユースケースに紐づくクエリを実現するために、PKとSKの構造を逆引き的に考える設計アプローチを遵守する</li></ul></li><li>SKの複合化を第一に検討する <ul><li>PKはアクセスパターンのグルーピング単位としてシンプルに保ち、SKで階層的な絞り込みを行うことで、理解のしやすさを維持する</li><li>要件1の設計案（<code>PK=UserID</code>, <code>SK=OrderStatus#OrderDate</code>）はこの典型例</li></ul></li><li>PKの複合化は、検索条件がセットで必須の場合に限定する <ul><li>PKの場合は完全一致が原則であり、複合化する場合はそれぞれのキーが常にセットで必須入力であることを確認する</li></ul></li><li>汎用GSI（Overloading）は利用しない <ul><li><code>GSI1_PK</code> のような汎用的なキー名を用意し、格納する値の種類を動的に変えることで、1つのGSIで多種多様なクエリを捌く最適化パターンもある。しかし、設計とアプリケーションロジックが極めて複雑になり可読性・保守性が低下するため、避けるべきである。顧客説明や引き継ぎが難しく、技術的な負債になる</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://repost.aws/ja/knowledge-center/dynamodb-create-composite-key" target="_blank" rel="noreferrer">DynamoDB テーブルの複合キーを作成するためのベストプラクティス | AWS re:Post</a></p></div><h3 id="インデックスの射影-プロジェクション" tabindex="-1">インデックスの射影（プロジェクション） <a class="header-anchor" href="#インデックスの射影-プロジェクション" aria-label="Permalink to &quot;インデックスの射影（プロジェクション）&quot;">​</a></h3><p>インデックスの射影（Projection）とは、GSI/LSIにベーステーブルのどの属性をコピーして含めるかを定義する設定である。適切な設定により、クエリ応答速度や費用削減に繋げることができる。</p><p>設定は以下3種類から選択できる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">KEYS_ONLY</th><th style="text-align:left;">INCLUDE</th><th style="text-align:left;">ALL</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;">インデックスキーとベーステーブルのPKのみを射影する</td><td style="text-align:left;">キー属性に加え、指定した一部の属性を射影する</td><td style="text-align:left;">ベーステーブルの全属性を射影する</td></tr><tr><td style="text-align:left;">ストレージ費用</td><td style="text-align:left;">✅インデックス自身のキー情報のみを保持するため最小</td><td style="text-align:left;">⚠️設定次第で増加</td><td style="text-align:left;">❌テーブルの完全な複製に近いため、最大</td></tr><tr><td style="text-align:left;">書き込み費用 (WCU)</td><td style="text-align:left;">✅インデックスキーが更新されない限り、WCU消費は発生しない</td><td style="text-align:left;">⚠️射影した属性が更新された場合に追加のWCUを消費する</td><td style="text-align:left;">❌ベーステーブルのどの属性が更新されてもインデックスの書き込みが発生</td></tr><tr><td style="text-align:left;">読み込み費用 (RCU)</td><td style="text-align:left;">❌ほとんどのケースでカバードクエリにならず、ベーステーブルへの追加読み込みが必須</td><td style="text-align:left;">✅カバードクエリを実現することで、高性能かつRCU消費も最適化できる</td><td style="text-align:left;">✅常にカバードクエリとなり、追加読み込みが一切発生しないため、読み込み性能は最高</td></tr><tr><td style="text-align:left;">柔軟性</td><td style="text-align:left;">❌クエリで必要な属性が少しでも増えると、すぐに性能問題に直面しやすい</td><td style="text-align:left;">⚠️事前にクエリパターンを分析する必要があるが、変更も射影属性を追加で対応可能</td><td style="text-align:left;">✅クエリ要件の変更に非常に強い</td></tr></tbody></table><p>KEYS_ONLYからINCLUDEのように、射影タイプ自体を変更することはできない。INCLUDEにした場合に、作成済みのGSIに対して、INCLUDEで含める属性を後から追加したり、削除することはできる。</p><p>推奨は以下の通り。</p><ul><li>原則、INCLUDE の採用を第一に検討する <ul><li>クエリパターンを分析し、必要最小限の属性をINCLUDEで射影し、インデックスへのクエリだけで処理が完結する「カバードクエリ」を実現し、性能向上とRCU消費の抑制を目指す</li></ul></li><li>GSIの設計時には、そのGSIが「どのクエリに使われることを意図しているか」の設計意図を明示的に定義し、ドキュメント化する <ul><li>意図しないユースケースでの利用を検知する</li></ul></li><li>GSIを利用する側のアプリケーションコードでは、必ず<code>ProjectionExpression</code>を使用して、実際に利用する属性のみを明示的に取得する <ul><li>将来インデックスの射影属性が変更されても、アプリケーションが意図せず大きなペイロードを受け取ることを防ぐことができる</li></ul></li><li>新しい検索要件（異なる属性セットが必要）が出てきた場合は、既存のGSIの射影属性の追加で対応できないか検討する</li><li>KEYS_ONLY を採用するケース <ul><li>インデックスの目的が「特定のアイテムの存在確認」や「プライマリーキーのリスト取得」のみで、それ以外の属性は不要な場合に採用する</li><li>例: 「特定のステータスを持つ注文IDの一覧だけが欲しい」といったユースケース</li></ul></li><li>ALL は原則、採用しない <ul><li>ALLはコストインパクトが非常に大きいため</li><li>許容されるケースは以下を総合的に判断となるが、アーキテクトによる個別レビューと承認を必須とする <ul><li>アイテムのサイズが非常に小さい</li><li>読み込みパフォーマンスが極めて重要で、書き込み頻度が低いテーブル</li><li>射影する属性の数が多く、INCLUDEで個別に指定するのが煩雑な場合</li></ul></li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">一律ALLにするという選択肢</p><p>KEY_ONLYやINCLUDEの射影にした場合、RDBMSとのメンタルモデルとは乖離が大きくアプリ開発者が混乱することも多い。例えば、DynamoDBで属性追加になった場合、GSI経由で取得する場合はその属性がINCLUDEの射影対象に入っていないため、取得不可といった事象にハマることが多い。そのため、費用を犠牲にしてでも一律ALLで倒すという設計判断もありえる。実際、複数のプロジェクトでALLに寄せた設計を採用した実績がある。<br> なお、システム共通項目だけ取り除き、残りの全属性をINCLUDE対象にするという方針も考えられるが、これは項目追加時に、INCLUDE側の属性に追加することが忘れやすいというデメリットがありオススメしない。INCLUDE設定で、明示的に項目除外設定ができれば嬉しいが、そういったオプションは存在しない。</p></div><h3 id="データ型" tabindex="-1">データ型 <a class="header-anchor" href="#データ型" aria-label="Permalink to &quot;データ型&quot;">​</a></h3><p>DynamoDBはテーブルの属性に対して、様々なデータ型がサポートされている。</p><table tabindex="0"><thead><tr><th style="text-align:left;">分類</th><th style="text-align:left;">データ型</th><th style="text-align:left;">型番</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">スカラー</td><td style="text-align:left;">String</td><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">プライマリーキー（PK/SK）、複合キー、ステータス、名前、日付（ISO 8601形式）など</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">Number</td><td style="text-align:left;"><code>N</code></td><td style="text-align:left;">価格、数量、スコア、Unixエポック秒、アトミックカウンターなど</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">Boolean</td><td style="text-align:left;"><code>BOOL</code></td><td style="text-align:left;"><code>true</code>または<code>false</code>の2値状態を表現。フラグなど</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">Binary</td><td style="text-align:left;"><code>B</code></td><td style="text-align:left;">バイナリデータ（小さな画像、圧縮データなど）</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">Null</td><td style="text-align:left;"><code>NULL</code></td><td style="text-align:left;">スパースインデックスを作成する際などに利用</td></tr><tr><td style="text-align:left;">ドキュメント</td><td style="text-align:left;">List</td><td style="text-align:left;"><code>L</code></td><td style="text-align:left;">リスト</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">Map</td><td style="text-align:left;"><code>M</code></td><td style="text-align:left;">ネストされた属性（例: <code>address</code>マップに<code>zipcode</code>, <code>city</code>を含む）が表現できる</td></tr><tr><td style="text-align:left;">セット</td><td style="text-align:left;">String Set</td><td style="text-align:left;"><code>SS</code></td><td style="text-align:left;">文字列のセット。タグ、カテゴリID、関連商品IDなど、順序を問わず一意な値の集合を管理したい場合に利用</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">Number Set</td><td style="text-align:left;"><code>NS</code></td><td style="text-align:left;">数値のセット</td></tr></tbody></table><h5 id="推奨は以下の通り。" tabindex="-1">推奨は以下の通り。 <a class="header-anchor" href="#推奨は以下の通り。" aria-label="Permalink to &quot;推奨は以下の通り。&quot;">​</a></h5><ul><li><p>コード、区分、UUIDはString型を用いる</p><ul><li>String型は最も基本的な型であり、特に避ける理由はない</li></ul></li><li><p>数量、数値、連番、金額はNumber型で保持する</p><ul><li>Stringにする場合は、0埋めなど固定長にしないと比較演算子などの検索条件が指定できない。その場合、データサイズが増えメリットがない</li></ul></li><li><p>フラグはBoolean型を用いる</p><ul><li>DynamoDBにおいては文字列の <code>&quot;0&quot;</code>/<code>&quot;1&quot;</code> を用いる意味は特にないため、直感的なBoolean型を利用することが自然</li></ul></li><li><p>日付・時刻は String (ISO 8601形式) で表現する</p><ul><li>DynamoDBには日付型が存在しない</li><li>例: <code>YYYY-MM-DD</code> や <code>YYYY-MM-DDTHH:MM:SS.sssZ</code> (例: <code>2025-08-05T21:33:00.123Z</code>)</li><li>辞書順のソートと時系列のソートが一致するため、SKとして利用しやすく可読性も高いため</li></ul></li><li><p>バイナリは、原則利用しない</p><ul><li>サムネイル画像など、ごく小さな場合のみ許容する</li><li>原則、S3にバイナリは格納し、パス情報のみを保持する（400KB制限と、ストレージコストとWCU/RCU消費を減らすため）</li></ul></li><li><p>TTL（Time To Live）利用の場合は、Number型を用いる</p><ul><li>Unixエポック秒（秒単位）かつNumber型の属性が必要となるため</li></ul></li><li><p>ドキュメントやセット型の利用は、最小限に抑える</p><ul><li>DynamoDBの各アイテムには400KBのサイズ上限があるため、履歴情報などを保持すると制限に引っかかる可能性がある。この場合は、SK違いで別アイテムとして格納すること</li><li>コレクション内の検索をKeyConditionExpressionなどで行うことはできないため（GSI化もできない。トップレベルの属性に昇格させる必要がある）</li><li>検索に用いず、ユーザー設定値など固定的に書き換えできる場合のみ、List、Set、Mapを利用する</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html" target="_blank" rel="noreferrer">Amazon DynamoDB でサポートされるデータ型と命名規則</a></p></div><h3 id="データの圧縮" tabindex="-1">データの圧縮 <a class="header-anchor" href="#データの圧縮" aria-label="Permalink to &quot;データの圧縮&quot;">​</a></h3><p>DynamoDBアイテムのコスト削減と400KB制限の緩和を目的とした、GZIPなどを用いたデータ圧縮の技法が存在する。</p><p>圧縮を行うことで生じる、主なデメリットは以下の通り。</p><ul><li>圧縮・解凍処理のため、クライアント側のCPU負荷が増加</li><li>NW転送量は減るものの、アプリケーション側の圧縮・解凍分、レイテンシが増加する懸念</li><li>圧縮した属性に対して、FilterExpression などのクエリが不可となる</li><li>AWSコンソール上などでの可読性が低下</li></ul><p>推奨は以下の通り。</p><ul><li>原則、圧縮は適用しない <ul><li>検索キーとしない大きな属性（ユーザーの自己紹介文や商品詳細説明など、サイズが大きいテキストデータなど）や、どうしても400KB制限の回避が必要な場合のみに限って許容する。この場合もソートキーを分けるなど、別アイテムで逃げることができないか検討する</li></ul></li><li>どうしても圧縮を行う場合は、全ての属性（あるいは全てのアイテム）に一律適用するのではなく、必要最小限に局所化する <ul><li>巨大データかつ検索に用いない属性に絞って行い、バイナリ（Binary）型の属性に格納する</li></ul></li></ul><h3 id="共通カラム" tabindex="-1">共通カラム <a class="header-anchor" href="#共通カラム" aria-label="Permalink to &quot;共通カラム&quot;">​</a></h3><p>DynamoDBの場合も、原則、<a href="https://future-architect.github.io/arch-guidelines/documents/forDB/postgresql_guidelines.html#%E5%85%B1%E9%80%9A%E3%82%AB%E3%83%A9%E3%83%A0" target="_blank" rel="noreferrer">共通カラム | テーブル論理設計 | PostgreSQL設計ガイドライン</a> に従う。ただし、patched_at, patched_by, patched_id は、データパッチ運用時に利用するものであり、アプリケーション設計からは除外する。DynamoDBはスキーマレスであるため、後から属性を追加することができる。</p><p>また、TTLを利用した改廃を行う場合は、最初から <code>ttl</code> 属性を付与しておくこと。</p><h2 id="api利用" tabindex="-1">API利用 <a class="header-anchor" href="#api利用" aria-label="Permalink to &quot;API利用&quot;">​</a></h2><p>主要なAPI操作に関する注意事項・推奨事項をまとめる。</p><h3 id="レコードの書き込み" tabindex="-1">レコードの書き込み <a class="header-anchor" href="#レコードの書き込み" aria-label="Permalink to &quot;レコードの書き込み&quot;">​</a></h3><p>アイテムの書き込みには、主に<code>PutItem</code>と<code>UpdateItem</code>の2つのAPIがある。</p><ul><li><code>PutItem</code>: 新規作成または既存アイテムの上書き時に使用する。一部属性だけを変更する場合に、<code>PutItem</code>を使うと指定しなかった属性は削除される</li><li><code>UpdateItem</code>: 特定の属性を部分的に変更する際に使用する。更新対象のアイテムが存在しない場合、自動的に新規作成(Upsert)される。属性の追加、削除、値の変更、リストやマップ内の要素の操作などが可能。ADDアクションを用いることで、アトミックなカウンター操作も実現できる。複数の属性を更新したり、複雑な条件式を設定したりする場合、UpdateExpressionの記述が複雑になりがち。アイテム全体を読み込んでから書き戻す「Read-Modify-Write」サイクルをアプリケーション側で実装する必要がないため、レイテンシ向上とRCU/WCUの消費を抑えられる</li></ul><p>推奨は以下の通り。</p><ul><li><code>UpdateItem</code>で可能な更新処理の場合は、<code>UpdateItem</code>の利用を第一に考える <ul><li>インクリメント/デクリメントなどのアトミックカウンターや、既存の属性値に基づいて更新を行う際は、競合条件の防止とパフォーマンス向上のため<code>GetItem</code>と<code>PutItem</code>を組み合わせた「Read-Modify-Write」サイクルではなく、<code>UpdateItem</code>の<code>ADD</code>や<code>SET</code>アクションを利用する</li></ul></li><li><code>UpdateItem</code>はアイテムが存在しなかった場合に意図しないレコードが作成される可能性があるため、 <code>attribute_not_exists(PK)</code>を利用する</li><li>アイテムを新規作成する場合や既存のアイテムを完全に新しいデータで上書きする場合にのみ<code>PutItem</code>を利用する</li><li>大量のデータをバッチで更新する場合は <code>BatchWriteItem</code>の利用を検討する</li></ul><h3 id="複数レコードの書き込み" tabindex="-1">複数レコードの書き込み <a class="header-anchor" href="#複数レコードの書き込み" aria-label="Permalink to &quot;複数レコードの書き込み&quot;">​</a></h3><p>DynamoDBに複数のレコードを書き込む場合、<code>PutItem</code>を繰り返し呼び出す方法と、<code>BatchWriteItem</code>を利用する方法がある。<code>BatchWriteItem</code>は一度のリクエストで最大25アイテム、かつ合計16MBまで書き込むことができ、NWラウンドトリップ数を削減することで性能向上が期待できる。<code>BatchWriteItem</code>は個々の操作に対して<code>ConditionExpression</code>（条件付き書き込み）をサポートしないため、アイテムの存在確認や特定の条件を満たす場合のみの書き込みには適さない。</p><p>BatchWriteItemを利用する場合、サイズチェックを行う必要はない。DynamoDBの各アイテムは最大400KBという制限があるため、1回の<code>BatchWriteItem</code>リクエストで送信できる最大25アイテムの合計サイズは、理論上最大10MBである。 (400KB×25 = 10MB)。これは、APIの制限である16MBを常に下回るため、サイズ超過を心配する必要はない。</p><div class="warning custom-block"><p class="custom-block-title">未処理のアイテムに注意</p><p><code>BatchWriteItem</code> は未処理のアイテム（UnprocessedItems）を返す可能性があるため、リトライロジックを全てのバッチ呼び出しで必ず実装する。</p></div><div class="warning custom-block"><p class="custom-block-title">WHERE句による一括更新の困難さ</p><p>RDBMSでは、WHERE句を用いて特定の条件に合致する複数のレコードを一括で更新することが一般的である。しかし、DynamoDBではプライマリーキーに基づかない条件での一括更新は直接サポートされていないため、以下の手順が必要である。</p><ol><li><code>Scan</code>または<code>Query</code>で更新対象を検索し、そのプライマリーキーや属性を取得</li><li>検索で得られたプライマリーキーに基づいて、各アイテムに対してUpdate、DeleteItem、BatchWriteItemなどを呼び出す</li></ol><p><code>BatchWriteItem</code> のバッチリクエストには <code>ConditionExpression</code> を含めることができない。そのため、もし個々のアイテムの更新に条件付きロジック（例: 「Aという値の場合のみ更新する」）が必要な場合、必要なリトライやエラーハンドリングを加えた上で UpdateItem を繰り返す必要がある。こうしたスクリプトをちょっとしたデータパッチの際にも開発する必要があり、大変である。</p></div><div class="tip custom-block"><p class="custom-block-title">条件付き書き込み (Conditional Writes)</p><p>DynamoDBの書き込み操作（PutItem, UpdateItem, DeleteItem）では、ConditionExpressionを使用して、特定の条件が満たされた場合にのみ操作を実行する、データ一貫性を保つ仕組みがある。主なユースケースは以下がある。</p><ul><li>楽観ロック <ul><li>バージョン番号などの属性を<code>ConditionExpression</code>でチェックすることで、楽観ロックを実現する</li></ul></li><li>新規作成の排他制御 <ul><li>アイテムが存在しない場合のみ<code>PutItem</code>を実行し、不正な上書きを防ぐ（例: <code>attribute_not_exists(PK)</code>）</li></ul></li><li>特定のビジネスロジックに基づく書き込み制御</li><li>在庫数が0より大きい場合のみ<code>UpdateItem</code>で在庫を減らすといった制御</li><li>特定のステータス（例: 承認待ち）の場合のみ、ステータスを「承認済み」に更新するといった制御</li></ul></div><h3 id="複数レコードの一括取得" tabindex="-1">複数レコードの一括取得 <a class="header-anchor" href="#複数レコードの一括取得" aria-label="Permalink to &quot;複数レコードの一括取得&quot;">​</a></h3><p>プライマリーキーを指定できる場合は、<code>BatchGetItem</code>を利用して、異なるテーブルを含む最大100アイテムまでを、単一のリクエストで効率的に取得できる。ただし、トランザクションは保証しない。パーティションキーが指定できる場合は、<code>Query</code>も利用できる。</p><p>推奨は以下の通り。</p><ul><li>Queryとフィルターの組み合わせでアイテムを検索するか、プライマリーキー完全指定でBatchGetItemを利用するか選択できる場合は、よりRCUが抑えられる BatchGetItemを利用する</li></ul><div class="warning custom-block"><p class="custom-block-title">Scanは原則、利用しない</p><p>Scan操作は、テーブルまたはセカンダリインデックスの全アイテムを読み込むため、非常にコストが高い。FilterExpressionを指定したとしても、Scan操作後にフィルターされるため、RCUを消費してしまう。Queryに置き換えられないかデータモデルを再検討する。Scanを許容する場合は、テーブルエクスポートなど運用目的やテーブルサイズが小さい場合にのみ許容する。もし、利用する場合はQuery同様、プロジェクション式を設定する。</p></div><div class="warning custom-block"><p class="custom-block-title">ページングによる取得漏れに注意する</p><p>Query、Scanは、一度に返せる結果が1MBまでという制約がある。超過した場合は LastEvaluatedKey を使用してページング処理をクライアント側で行う必要がある。これを怠ると、データの取りこぼしがあり得るため注意する。</p></div><div class="tip custom-block"><p class="custom-block-title">プロジェクション式を活用し応答に含める属性を明示的に指定する</p><p><code>Query</code>を用いる場合は、プロジェクション式 (<code>ProjectionExpression</code>）を使用して、必ず応答に含める属性を明示的に指定する。不要な属性の読み込みを回避し、性能向上が期待できる。ただし、RCUは返されるデータ量ではなく、アイテムサイズに基づき計算されるためRCU削減効果はない（<a href="https://docs.aws.amazon.com/cli/latest/reference/dynamodb/query.html#description" target="_blank" rel="noreferrer">AWS CLIのリファレンス</a>より）。</p></div><div class="tip custom-block"><p class="custom-block-title">ソート順の指定が可能</p><p>データの取得順序を制御したい場合、ソートキーに対してScanIndexForwardパラメータ（デフォルトはtrueで昇順、falseで降順）で指定可能である。</p></div><h3 id="結果整合性・強力な整合性の読み込み-consistent-reads" tabindex="-1">結果整合性・強力な整合性の読み込み (Consistent Reads) <a class="header-anchor" href="#結果整合性・強力な整合性の読み込み-consistent-reads" aria-label="Permalink to &quot;結果整合性・強力な整合性の読み込み (Consistent Reads)&quot;">​</a></h3><p>DynamoDBは、デフォルトで「結果整合性読み込み（Eventually Consistent Reads）」であるため、書き込み後すぐに読み込むと変更が反映されていない場合がある。「強力な整合性読み込み（Strongly Consistent Reads）」の指定もできるが、レイテンシとRCUが増加する。</p><p>推奨は以下の通り。</p><ul><li>性能・費用の観点から、「結果整合性読み込み」を第一に利用する</li><li>書き込み直後にその書き込み内容を確実に読み込む必要がある場合（Write-then-Readパターンなど）は、「強力な整合性読み込み」を利用する <ul><li>例: 在庫を更新した直後に最新の在庫数を表示する場合など、データの即時性がビジネス上のクリティカルな要件となるシナリオ</li><li>ただし、「結果整合性読み込み」と比較してRCUを倍消費するため、最小限の利用に留める</li></ul></li></ul><h2 id="dynamodb-streams" tabindex="-1">DynamoDB Streams <a class="header-anchor" href="#dynamodb-streams" aria-label="Permalink to &quot;DynamoDB Streams&quot;">​</a></h2><p>DynamoDB Streamsとは、DynamoDBテーブル内のアイテムレベルの変更（作成、更新、削除）をキャプチャし、変更内容を起点としてストリーム処理を実装できる機能である。DynamoDB Streams利用の是非は本章では触れず、主要な設計課題について解説する。</p><div class="info custom-block"><p class="custom-block-title">参考</p><p>DynamoDB Streamsの起動は、アイテムの変更であるため、属性の変更がないPutItemをしてもトリガーされない点に注意である。ストリームの再送（リプレイ）をしたい場合は、 <code>rerun_at:日次</code> などの項目を追加し、アイテムに変更を加える必要がある。</p><p>参考: <a href="https://future-architect.github.io/articles/20210122/" target="_blank" rel="noreferrer">オレのDynamoDB Streamsが再着火しないわけがない | フューチャー技術ブログ</a></p></div><h3 id="ストリームビュータイプ" tabindex="-1">ストリームビュータイプ <a class="header-anchor" href="#ストリームビュータイプ" aria-label="Permalink to &quot;ストリームビュータイプ&quot;">​</a></h3><p>ストリームビュータイプは、DynamoDBテーブルのデータが変更された際に、ストリームレコードにどの詳細度で情報を書き込むかの設定である。次の4種類から選択する。</p><table tabindex="0"><thead><tr><th style="text-align:left;">観点</th><th style="text-align:left;">KEYS_ONLY</th><th style="text-align:left;">NEW_IMAGE</th><th style="text-align:left;">OLD_IMAGE</th><th style="text-align:left;">NEW_AND_OLD_IMAGES</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;">変更後アイテムのプライマリーキーのみ</td><td style="text-align:left;">変更後アイテムの全属性</td><td style="text-align:left;">変更前アイテムの全属性</td><td style="text-align:left;">変更「前と後」アイテムの全属性</td></tr><tr><td style="text-align:left;">費用</td><td style="text-align:left;">⚠️下流のLambdaなどでGetItemすればベーステーブルへのRCUが別途必要で高くつく</td><td style="text-align:left;">✅️良い</td><td style="text-align:left;">✅️良い</td><td style="text-align:left;">✅️ペイロードが増える分、コンシューマーの実行時間がごく僅かに増える懸念はある</td></tr><tr><td style="text-align:left;">下流ロジックの複雑さ</td><td style="text-align:left;">❌️下流で、GetItemすればその分の複雑度は上がる。キャッシュの無効化や通知などプライマリーキーのみで良ければ問題なし</td><td style="text-align:left;">✅️要件を満たせれば問題なし</td><td style="text-align:left;">✅️要件を満たせれば問題なし</td><td style="text-align:left;">✅️要件を満たせれば問題なし</td></tr><tr><td style="text-align:left;">Lambdaバッチサイズ※1</td><td style="text-align:left;">✅️最大化</td><td style="text-align:left;">⚠️</td><td style="text-align:left;">⚠️</td><td style="text-align:left;">❌️ペイロードが増える分、最も少なくなる懸念</td></tr></tbody></table><p>※1 DynamoDB StreamsからLambdaを起動させる場合の、入力レコードの数（1〜10,000まで指定可能）。Lambdaの入力サイズが6MBまでであるため、DynamoDBのアイテムサイズが大きい場合は、バッチサイズが希望より小さくなるかもしれない。バッチウィンドウ、バッチサイズ、6MBのどれかの条件を満たした場合、Lambdaが起動される。</p><p>ビュータイプの途中変更は不可で、一度ストリームを無効化にして新しいストリームを作成する必要がある。この際、データ欠損が発生しうるため、ベーステーブルの更新を停止させるか、切り替え途中に発生した更新情報を何かしらの手法で救済する必要がある。</p><p>また、DynamoDB Streamsのコスト構造は以下である。</p><ol><li>Lambda以外の場合は、GetRecordsによるストリーム読み込み回数に対する課金</li><li>DynamoDB Streamsで保有するストレージ容量に対する課金</li><li>（加えて）DynamoDB Streamsのメトリクスや、コンシューマー側のコンピューティング費用などその他の費用 <ul><li>バッチサイズの関係上、Lambdaの呼び出し回数が増えればコスト増。またデシリアライズなどで余分に処理時間がかかる可能性</li></ul></li></ol><p>主な設計手法として以下のパターンが考えられる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">観点</th><th style="text-align:left;">方針A：一律 NEW_AND_OLD_IMAGES</th><th style="text-align:left;">方針B：適切なタイプを都度選択</th></tr></thead><tbody><tr><td style="text-align:left;">要件変更への柔軟性</td><td style="text-align:left;">✅ 途中で変更前データが必要になっても対応可能</td><td style="text-align:left;">❌ビュータイプの変更は困難（単純切り替えでは、データ欠損リスクあり）。GetItemでは最新値しか取れず、要件を満たせない懸念</td></tr><tr><td style="text-align:left;">費用</td><td style="text-align:left;">✅️誤差レベルで増える可能性がある（Lambda呼び出し回数、実行時間）</td><td style="text-align:left;">✅最適化される</td></tr><tr><td style="text-align:left;">Lambdaバッチサイズ</td><td style="text-align:left;">⚠️アイテムの平均サイズによってはLambdaのバッチサイズの上限6MBに引っかかりにくい。例えば、平均200KBの場合、新旧で400KBになるため、15レコードほどになる</td><td style="text-align:left;">✅️最適化したスループットを出しやすい</td></tr><tr><td style="text-align:left;">設計原則</td><td style="text-align:left;">❌「最小権限の原則」に反して、後続の処理に不要なデータ（多くは、過去データ）を常に渡す可能性</td><td style="text-align:left;">✅ 「最小権限の原則」を遵守でき、その目的に必要最小限のデータのみを連携可能</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>原則、一律 <code>NEW_AND_OLD_IMAGES</code> を設定する <ul><li>特にコンシューマーがLambdaの場合は、コスト影響が大きくないと推測できる（ペイロードが増えることによる変換コストも誤差レベルと考えられる）。ストレージコストはDynamoDB Streamsの場合は24時間と短く、大きく影響はないと想定</li></ul></li><li>DynamoDBの各アイテムのサイズが数百KBなどと大きく、処理性能のチューニングが必要な場合のみ、<code>NEW_IMAGE</code> などに個別調整する <ul><li>仮にアイテムの平均サイズが200KBだと、 <code>NEW_AND_OLD_IMAGES</code> で2倍の400KB。Lambdaのリクエストペイロードが6MB上限なので、6MB / 400KB = 15 レコードのバッチサイズとなり、スループットが思ったより出ない懸念がある。また、この平均サイズの場合は、DynamoDB Streamsのストレージ費用削減効果も期待できる</li><li>上記はレコードサイズが極端に大きな例であり、より一般的なアイテムサイズだと考えられる数KBでは差は無視できると考えられる</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/CostOptimization_StreamsUsage.html" target="_blank" rel="noreferrer">DynamoDB Streams の使用状況を評価する</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/api/API_CreateEventSourceMapping.html#SSS-CreateEventSourceMapping-request-BatchSize" target="_blank" rel="noreferrer">CreateEventSourceMapping - AWS Lambda</a> に、関数に送信する各バッチ内の最大レコード数（デフォルトで 100、最大 10,000）と、同期呼び出しのペイロード上限 (6 MB) までといった制約が記載されている</li><li><a href="https://repost.aws/knowledge-center/lambda-functions-fix-dynamodb-streams" target="_blank" rel="noreferrer">Troubleshoot DynamoDB Streams in Lambda functions | AWS re:Post</a> に、DynamoDB Streams Lambdaの起動条件について説明がある</li></ul></div><h3 id="ストリーミングオプション" tabindex="-1">ストリーミングオプション <a class="header-anchor" href="#ストリーミングオプション" aria-label="Permalink to &quot;ストリーミングオプション&quot;">​</a></h3><p>DynamoDB Streamsには2つのストリームオプションが提供されている。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">①DynamoDB Streams</th><th style="text-align:left;">②Kinesis Data Streams</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;">DynamoDBにネイティブのCDC機能</td><td style="text-align:left;">Kinesis Data StreamsをCDCの出力先として指定するパターン</td></tr><tr><td style="text-align:left;">保持期間</td><td style="text-align:left;">⚠️24時間</td><td style="text-align:left;">✅24時間〜1年</td></tr><tr><td style="text-align:left;">コンシューマー数</td><td style="text-align:left;">⚠️1シャードごとに最大2</td><td style="text-align:left;">✅1シャードごとに最大5。ファンアウトで最大20</td></tr><tr><td style="text-align:left;">性能拡張性</td><td style="text-align:left;">✅️シャード数に連動してスケール</td><td style="text-align:left;">✅テーブルと独立して、Kinesisストリーム自体のシャード数を増やしてスケールさせることが可能</td></tr><tr><td style="text-align:left;">費用</td><td style="text-align:left;">✅️安い</td><td style="text-align:left;">❌️シャード時間、PUTペイロードユニットなど追加費用</td></tr><tr><td style="text-align:left;">レコードの順序制御</td><td style="text-align:left;">✅️発生した順序を守る</td><td style="text-align:left;">⚠️異なる順序になる可能性がある</td></tr><tr><td style="text-align:left;">QoS（レコードの重複）</td><td style="text-align:left;">✅️Exactly Once</td><td style="text-align:left;">⚠️At Least Once</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>原則、①を選択する <ul><li>過去のフューチャー採用実績から、性能を含め課題が出ることが少なかった。費用メリットがあるため</li><li>保持期限の短さは、Iterator Ageなどの監視でカバーし、監査目的のデータ保持は別のデータストアで行うべきであるため</li></ul></li><li>以下の場合は、Kinesis Data Streamsの採用を検討する <ul><li>DynamoDBテーブルへの書き込みが非常に高頻度で、性能懸念が考えられる場合</li><li>ただし、この場合はLambdaをファンアウトさせる（例えば、LambdaからSQS、SNSトピックに振り分け、後続に複数のLambdaを並列で起動させる）ことでカバーできないか考える。Kinesisより安価な可能性がある</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/streamsmain.html" target="_blank" rel="noreferrer">Amazon DynamoDB の変更データキャプチャ</a></p></div><div class="tip custom-block"><p class="custom-block-title">監視</p><p>DynamoDB Streamsタイプを選択した場合、IteratorAgeメトリクスを必ず監視し、一定の値を超えたらアラートが飛ぶように設定する。保持期限が24時間であるため、Iterator Ageが24時間以上になると論理的にはデータ欠損してしまうため。Kinesis Data Streams については<br><a href="https://future-architect.github.io/arch-guidelines/documents/forAWS/aws_guidelines.html#kinesis-data-streams" target="_blank" rel="noreferrer">Kinesis Data Streams | CloudWatch Metrics メトリクス監視 | AWS設計ガイドライン</a> を参考に監視設定を行う。</p></div><h3 id="コンシューマー" tabindex="-1">コンシューマー <a class="header-anchor" href="#コンシューマー" aria-label="Permalink to &quot;コンシューマー&quot;">​</a></h3><p>ストリームオプションで、DynamoDB Streams コンシューマーアプリケーションは大別すると以下の2パターンである。</p><ol><li>Lambda</li><li>ECS上で、AWS SDK を使用した個別アプリケーション</li></ol><p>DynamoDB Streamsは、GetRecords（最大1,000 件または1MBの応答）のリクエスト数で課金される。ただし、Lambdaの場合はこの読み取りリクエストが無料になる（Lambda自体のコンピューティング費用は課金される）。</p><p>推奨は以下の通り。</p><ul><li>原則、コンシューマーアプリはLambdaを利用する <ul><li>特に、ストリームオプションがDynamoDB Streamsの場合はコストメリットがあるため</li><li>ECSなどと比較して、インフラ的な保守要素を減らすことができるため</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">イベントフィルタリングの活用</p><p>Lambdaトリガーにはイベントフィルタリング機能がある。例えば、{&quot;eventName&quot;: [&quot;INSERT&quot;]}と設定すれば、作成時のみにLambda呼び出しを絞ることができ、節約となる。</p></div><h3 id="エラーハンドリング" tabindex="-1">エラーハンドリング <a class="header-anchor" href="#エラーハンドリング" aria-label="Permalink to &quot;エラーハンドリング&quot;">​</a></h3><p>DynamoDB StreamsをLambdaで処理する際のエラーハンドリングについて説明する。デフォルトでは、Lambdaが受け取ったレコードのバッチ（例: 100件の変更データ）のうち、1件の処理に失敗しただけでも、バッチ全体が成功するまで何度も再試行される。この挙動のため、1件の不正レコードが原因で、後続の正常レコード全てが影響を受けてしまう。対応としては以下3パターンが考えられる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">①個別のエラー処理</th><th style="text-align:left;">②バッチを二分して再試行</th><th style="text-align:left;">③DLQ指定</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;">エラーハンドリングして失敗レコードはログ出力やDLQ送信する</td><td style="text-align:left;">BisectBatchOnFunctionError のトリガー設定を有効にすることで、AWSが自動で問題のレコードを特定する</td><td style="text-align:left;">On-failureデスティネーションとしてSQSキュー（DLQ）を指定する</td></tr><tr><td style="text-align:left;">エラーの隔離</td><td style="text-align:left;">✅️不正レコードを柔軟に制御可能</td><td style="text-align:left;">✅️失敗したレコードのみが最終的にエラーとなる</td><td style="text-align:left;">✅失敗したイベント全体を後から分析・再処理可能</td></tr><tr><td style="text-align:left;">正常レコードの部分取り込み</td><td style="text-align:left;">✅️可能</td><td style="text-align:left;">✅️可能</td><td style="text-align:left;">⚠️すでに成功済みのレコードもDLQに入るため、重複排除などの仕組みが必要</td></tr><tr><td style="text-align:left;">性能</td><td style="text-align:left;">✅️個別実装のため、高くできる</td><td style="text-align:left;">⚠️問題レコードの特定まで複数回の再試行が実行されるため、即時性は低い</td><td style="text-align:left;">⚠️DLQの監視とリカバリ次第</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>②と③を組み合わせる <ul><li>Bisect Batch + DLQとすることで、コードを変更することなく、問題のあるレコードを効率的に特定してくれる</li><li>数回の再試行でも成功しなかった、本当に処理不能なレコードのみDLQに送られるため、メインのストリーム処理がブロッキングされることがなくなり、失敗したイベントは後から調査＆リカバリが可能</li></ul></li></ul><div class="warning custom-block"><p class="custom-block-title">冪等性の確保</p><p>すべての処理は、複数回実行されても結果が同じになるように設計する。<br> 例えば、イベントIDなどを記録し重複チェックしたり、Upsert/Mergeを用いる。</p></div><div class="warning custom-block"><p class="custom-block-title">デッドレターキュー（DLQ）の運用計画</p><p>エラーをDLQに隔離するだけでなく、その後の運用フローが必要である。例: 「DLQにメッセージが届いたら、インシデント管理システムに起票する」→「Slackにも通知する」 →手順書に沿ってリカバリするといった流れと、それを行う担当者（体制）を決めておく。</p></div><h2 id="他のデータストアとの組み合わせ" tabindex="-1">他のデータストアとの組み合わせ <a class="header-anchor" href="#他のデータストアとの組み合わせ" aria-label="Permalink to &quot;他のデータストアとの組み合わせ&quot;">​</a></h2><p>AWSのPurpose-Built（目的別）データベースの考え方は、用途に合わせて複数のデータストアサービスを併用する意味がある。各機能のニーズに特化したデータベースをそれぞれ採用することで、システム全体の性能、拡張性、信頼性を最大化できる。</p><h3 id="olap連携" tabindex="-1">OLAP連携 <a class="header-anchor" href="#olap連携" aria-label="Permalink to &quot;OLAP連携&quot;">​</a></h3><p>DynamoDBからDWHやデータレイクといったOLAP系のシステムへデータ連携が必要な場合がある。主要な方式には以下がある。</p><table tabindex="0"><thead><tr><th style="text-align:left;">観点</th><th style="text-align:left;">①S3増分エクスポート</th><th style="text-align:left;">②DynamoDB Streams</th><th style="text-align:left;">③Glueジョブ</th></tr></thead><tbody><tr><td style="text-align:left;">データ鮮度</td><td style="text-align:left;">⚠️バッチ（数分〜数時間）</td><td style="text-align:left;">✅ ニアリアルタイム（秒〜分）</td><td style="text-align:left;">❌バッチ（ジョブ実行時の断面）</td></tr><tr><td style="text-align:left;">費用</td><td style="text-align:left;">✅WCU/RCUの消費ゼロ。S3ストレージ課金</td><td style="text-align:left;">✅️Lambda費用</td><td style="text-align:left;">❌大。テーブルスキャンでRCUを大きく消費。Glueの実行時間（DPU）費用</td></tr><tr><td style="text-align:left;">データ変換能力</td><td style="text-align:left;">❌なし。DynamoDB JSON形式</td><td style="text-align:left;">⚠️中。後続のLambdaで変換可能</td><td style="text-align:left;">✅高。Spark ETLで複雑な変換・集計・結合が可能</td></tr><tr><td style="text-align:left;">削除データの扱い</td><td style="text-align:left;">✅可能</td><td style="text-align:left;">✅可能。REMOVEイベントとしてストリームに流れる</td><td style="text-align:left;">❌不可。スキャン時点で存在しないデータは取得できない</td></tr><tr><td style="text-align:left;">実装の容易さ</td><td style="text-align:left;">✅️簡単。PITR有効化とエクスポートAPI呼び出しのみ</td><td style="text-align:left;">✅️簡単。ストリームを有効化し、Lambdaトリガーを設定</td><td style="text-align:left;">⚠️中。Glueジョブのスクリプト開発と実行管理が必要</td></tr><tr><td style="text-align:left;">主な制約</td><td style="text-align:left;">PITRが有効である必要</td><td style="text-align:left;">DynamoDB Streamsの保持期限24時間など</td><td style="text-align:left;">テーブルフルスキャンによるRCU消費が大きすぎることがネック</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>原則、S3増分エクスポートを第一に検討する <ul><li>費用が最も安く、Glueジョブなど後でETL処理を追加しやすいため</li><li>どうしても、即時反映が必要な場合のみ、②を採用する</li></ul></li><li>③は、ソーステーブルへのRCU負荷が非常に大きいため、原則利用しない <ul><li>削除されたデータを追跡できず、データレイク側との差分整合性が取れなくなる懸念もある</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">DynamoDBデータ形式を変換する</p><p>DynamoDBの<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/S3DataExport.Output.html" target="_blank" rel="noreferrer">エクスポートデータ形式</a>は、分析クエリには不向きであるため、GlueジョブなどでApache Parquet（Apache Iceberg）などに変換することで効率を上げることができる。これにより、鮮度は劣るもののSQLによるデータ調査などが行いやすいメリットがある。</p></div><div class="tip custom-block"><p class="custom-block-title">スキーマ変更への対応</p><p>アプリケーションの改修によって新しい属性が追加された場合、OLAPシステム側の追従方法を考慮する必要がある。AthenaやRedshift Spectrumからのクエリは、Glueクローラーで定期的にスキャンさせることで、自動でスキーマ変更に追随できる。</p></div><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://aws.amazon.com/jp/about-aws/whats-new/2023/09/incremental-export-s3-amazon-dynamodb/" target="_blank" rel="noreferrer">Amazon DynamoDB の S3 への増分エクスポートについての発表</a></li><li><a href="https://aws.amazon.com/jp/blogs/news/use-amazon-dynamodb-incremental-exports-to-drive-continuous-data-retention/" target="_blank" rel="noreferrer">Amazon DynamoDB の増分エクスポートを使用した継続的なデータ保持</a></li><li><a href="https://aws.amazon.com/jp/blogs/database/use-amazon-dynamodb-incremental-export-to-update-apache-iceberg-tables/" target="_blank" rel="noreferrer">https://aws.amazon.com/jp/blogs/database/use-amazon-dynamodb-incremental-export-to-update-apache-iceberg-tables/</a></li></ul></div><h3 id="全文検索サービス連携" tabindex="-1">全文検索サービス連携 <a class="header-anchor" href="#全文検索サービス連携" aria-label="Permalink to &quot;全文検索サービス連携&quot;">​</a></h3><p>サービスの成長とともに、以下のような全文検索のような複雑な全文検索要件に対応する必要が出てくる場合がある。</p><ul><li><strong>関連度スコアリング</strong>: 検索キーワードとの関連性が高い順に結果を並べ替える</li><li><strong>形態素解析</strong>: 単語の区切りを正しく認識し、検索精度を向上させる（例：「東京都」を「東京」と「都」に分割）</li><li><strong>柔軟な検索</strong>: あいまい検索、類義語検索、オートコンプリートなど</li></ul><p>対応方針としては大きく3つ考えられる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">①OpenSearch連携</th><th style="text-align:left;">②DynamoDB転置インデックス</th><th style="text-align:left;">③Aurora PostgreSQL連携</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;">DynamoDBのデータを、OpenSearch Serviceに同期し、検索処理をオフロード</td><td style="text-align:left;">GSIを使い、検索キーワードをPKとした転置インデックスを擬似的に作成する</td><td style="text-align:left;">DynamoDBのデータをRDBであるAuroraに同期し、拡張機能（<code>pg_bigm</code>など）を使って全文検索を行う</td></tr><tr><td style="text-align:left;">検索機能</td><td style="text-align:left;">✅ 非常に高機能</td><td style="text-align:left;">❌ 単一キーワードのみ</td><td style="text-align:left;">✅️高機能。<code>pg_bigm</code>によるN-gram方式の全文検索や、<code>pg_trgm</code>によるあいまい検索が可能</td></tr><tr><td style="text-align:left;">性能</td><td style="text-align:left;">✅ 非常に高い</td><td style="text-align:left;">✅️ Queryのため高速</td><td style="text-align:left;">✅ 高い</td></tr><tr><td style="text-align:left;">費用</td><td style="text-align:left;">⚠️OpenSearchクラスタの運用費が別途必要</td><td style="text-align:left;">⚠️GSIの追加書き込み（WCU）とストレージコストが増加</td><td style="text-align:left;">⚠️Auroraクラスタの運用費が別途必要</td></tr></tbody></table><p>特に①、③を利用する場合は、データストアへの連携方針として以下の2方式が考えられる。</p><ol><li>DynamoDB Streamsで同期 <ul><li>非同期的な反映になるが、システム安定度や拡張性は増す</li></ul></li><li>アプリケーション側で両投げ <ul><li>反映タイミングを制御しやすいが、アプリケーションロジック側にリトライなどが入り複雑化</li><li>アプリケーション上のテストは行いやすい、ローカル環境は作りやすい</li></ul></li></ol><p>推奨は以下の通り。</p><ul><li>本格的な全文検索にはOpenSearch Serviceを利用する <ul><li>OpenSearch Serviceを利用する場合は、アプリからの両投げを推奨する。ローカル環境の構築の容易さ、テストのしやすさなどが理由。そのうえで、拡張性などが必要な場合は、DynamoDB Streamsの採用を考える</li></ul></li><li>DynamoDB単体で複雑な検索条件に対応しすぎない <ul><li>検索条件の追加には、基本的にはGSIで対応することになる。Scanを使う必要がある場合は、設計が破綻したことを示すため、他のデータストアとの併用を検討する</li><li>GSIで転置インデックスを実装することも可能だが、形態素解析などを自前で行う必要があり運用コストが高い。また、関連度スコアリングや、AND/OR検索の複数キーワード対応、あいまい検索などの実装ハードルも高い。RCU/WCUコストも想定外に膨れ上がる</li></ul></li></ul><h2 id="sdk" tabindex="-1">SDK <a class="header-anchor" href="#sdk" aria-label="Permalink to &quot;SDK&quot;">​</a></h2><h3 id="go言語" tabindex="-1">Go言語 <a class="header-anchor" href="#go言語" aria-label="Permalink to &quot;Go言語&quot;">​</a></h3><p>GoでDynamoDBを操作する場合、大別すると以下3つの選択肢がある。</p><ol><li>公式のAWS SDK(aws-sdk-go-v2)を利用する</li><li><a href="https://github.com/guregu/dynamo" target="_blank" rel="noreferrer">guregu/dynamo</a></li><li><a href="https://gocloud.dev/" target="_blank" rel="noreferrer">Go CDK</a>（旧gocloud）</li></ol><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">AWS SDK</th><th style="text-align:left;">guregu/dynamo</th><th style="text-align:left;">Go CDK (docstore)</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;">公式のAWS SDK for Go v2のこと</td><td style="text-align:left;">公式SDKをラップし、より高レベルで直感的な操作を提供する</td><td style="text-align:left;">Googleが中心となって開発する、マルチクラウド対応を目的としたライブラリ</td></tr><tr><td style="text-align:left;">機能網羅性</td><td style="text-align:left;">✅高い</td><td style="text-align:left;">✅️ほぼ全ての操作が可能（テーブル作成など管理系の操作は対象外）</td><td style="text-align:left;">❌抽象化のため低い</td></tr><tr><td style="text-align:left;">開発生産性</td><td style="text-align:left;">❌低い</td><td style="text-align:left;">✅高い</td><td style="text-align:left;">✅高い</td></tr><tr><td style="text-align:left;">マルチクラウド対応</td><td style="text-align:left;">❌ なし</td><td style="text-align:left;">❌ なし</td><td style="text-align:left;">✅ あり</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>原則、<code>guregu/dynamo</code> を選択する <ul><li>開発生産性が高く、機能的な網羅も高い。フューチャー社内実績も多く品質が高いと評判が良いため</li></ul></li><li><code>guregu/dynamo</code> がサポートしていない機能（管理系の機能や、例えばDAXのネイティブ利用など）のみ、公式SDKを利用する</li><li>Go CDKは、クラウドベンダーロックインに対する要求度が高い場合に限り、導入を検討する</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://future-architect.github.io/articles/20200225/" target="_blank" rel="noreferrer">DynamoDB×Go連載#1 GoでDynamoDBでおなじみのguregu/dynamoを利用する | フューチャー技術ブログ</a></li><li><a href="https://future-architect.github.io/articles/20200227/" target="_blank" rel="noreferrer">DynamoDB×Go連載#2 AWS SDKによるDynamoDBの基本操作 | フューチャー技術ブログ</a></li><li><a href="https://future-architect.github.io/articles/20200228/" target="_blank" rel="noreferrer">DynamoDB×Go#3 Go CDKでどこまでいける？機能を調べてみた | フューチャー技術ブログ</a></li></ul></div><h2 id="テスト" tabindex="-1">テスト <a class="header-anchor" href="#テスト" aria-label="Permalink to &quot;テスト&quot;">​</a></h2><h4 id="ローカルモック" tabindex="-1">ローカルモック <a class="header-anchor" href="#ローカルモック" aria-label="Permalink to &quot;ローカルモック&quot;">​</a></h4><p>ローカルモックの選択肢として代表的なものには<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/DynamoDBLocal.html" target="_blank" rel="noreferrer">DynamoDB local</a> および <a href="https://docs.localstack.cloud/aws/services/dynamodb/" target="_blank" rel="noreferrer">LocalStack</a> がある。Local Stackは内部的にDynamoDB localを使用しているため、機能自体に大きな差はないが、TTLのサポートやリソースブラウザ（GUI）の提供など、DynamoDB localにはない機能も提供している。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">DynamoDB local</th><th style="text-align:left;">LocalStack</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;">AWSが公式に提供するDynamoDBのエミュレータ</td><td style="text-align:left;">LocalStack社が提供するエミュレータ。内部的にはDynamoDB localを使用している</td></tr><tr><td style="text-align:left;">起動</td><td style="text-align:left;">JAR / Docker</td><td style="text-align:left;">Docker</td></tr><tr><td style="text-align:left;">プロビジョニングスループット</td><td style="text-align:left;">❌ 非サポート</td><td style="text-align:left;">❌ 非サポート</td></tr><tr><td style="text-align:left;">DynamoDB Streams</td><td style="text-align:left;">✅ サポート</td><td style="text-align:left;">✅ サポート</td></tr><tr><td style="text-align:left;">TTL</td><td style="text-align:left;">❌ 非サポート</td><td style="text-align:left;">✅ サポート</td></tr><tr><td style="text-align:left;">GUI</td><td style="text-align:left;">❌ 提供なし（<a href="https://github.com/aaronshaf/dynamodb-admin" target="_blank" rel="noreferrer">dynamodb-admin</a>等のGUIと組み合わせ可能）</td><td style="text-align:left;">✅ 提供</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>単体テストでは、テスト効率の観点から本物のDynamoDBに接続する代わりに、原則、ローカルモックを使用する</li><li>第一に公式のDynamoDB localの使用を検討する</li><li>ただし他のAWSサービス（例. S3 、SQS、Lambda）のエミュレータとしてLocalStackを使用する場合、ツールを統合するという観点から LocalStackの利用を推奨する</li></ul><h4 id="dynamodb-streamsとの統合" tabindex="-1">DynamoDB Streamsとの統合 <a class="header-anchor" href="#dynamodb-streamsとの統合" aria-label="Permalink to &quot;DynamoDB Streamsとの統合&quot;">​</a></h4><p>DynamoDB local および LocalStackはDynamoDB Streamsをサポートしているが、DynamoDB StreamsをトリガーとしたLambda等の起動をローカルでエミュレートするには工夫が必要となる。</p><ul><li>LambdaのエミュレータとしてLocalStack Lambdaを使用する場合 <ul><li>ローカルのストリームARNに対してイベントソースマッピングを設定できるため、シームレスな統合が可能となる</li></ul></li><li>LocalStack Lambdaを使用しない場合 <ul><li>自前でDynamoDB Streamsのクライアントを作成し、ストリームの変更をポーリングすることで（AWS SAM Local等との）統合を実現する形になる</li></ul></li></ul><p>推奨は以下の通り。</p><ul><li>DynamoDB Streamsを多用するアーキテクチャにおいては、LocalStack Lambda / LocalStack Dynamo をはじめ、LocalStackを中心的なモックツールとすること</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://www.isoroot.jp/blog/7753/" target="_blank" rel="noreferrer">https://www.isoroot.jp/blog/7753/</a></li><li><a href="https://qiita.com/waterada/items/7f99adb4b1485b521e59" target="_blank" rel="noreferrer">https://qiita.com/waterada/items/7f99adb4b1485b521e59</a></li></ul></div><h2 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h2><h3 id="キャパシティモード" tabindex="-1">キャパシティモード <a class="header-anchor" href="#キャパシティモード" aria-label="Permalink to &quot;キャパシティモード&quot;">​</a></h3><p>DynamoDBは、テーブルへの読み書き要求を処理するためのスループットキャパシティを管理する方法として、2つの異なるモードを提供している。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">プロビジョンドモード</th><th style="text-align:left;">オンデマンドモード</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>説明</strong></td><td style="text-align:left;">・1秒あたりの読み込み/書き込みスループットをそれぞれRCU/WCUとして事前に定義する<br> ・設定されたキャパシティを超えるリクエストはスロットリングされ、エラーとして返却される <br>・AutoScaling機能を用いることで、トラフィック量に応じて事前定義したキャパシティを自動的に増減させることが可能 <br>・ただしAutoScalingはCloudWatchのアラーム起点で動作するため数分のリードタイムがあり、瞬間的なスパイクに即座に反応することは難しい</td><td style="text-align:left;">・キャパシティを事前定義せず、リクエスト量に応じて自動的に必要なスループットを確保する <br>・本モードは、以前観測されたピークトラフィックの2倍までのリクエストに即座に対応できるバースト能力を持つ<br> ・ただし、これを超える極端なスパイクが発生した場合には、オンデマンドモードであってもスロットリングが発生する可能性がある</td></tr><tr><td style="text-align:left;"><strong>費用</strong></td><td style="text-align:left;">・事前に割り当てたキャパシティに対する時間単位の課金 <br>・リクエスト単位の単価はオンデマンドモードよりも安価に設定されている ・長期利用にはリザーブドキャパシティによる割引もある</td><td style="text-align:left;">・実際に実行された読み書きリクエスト単位の従量課金 ・アイドル時間にはコストが発生しない</td></tr><tr><td style="text-align:left;"><strong>バーストキャパシティ機能</strong></td><td style="text-align:left;">過去5分間（300秒）に使用されなかったキャパシティを蓄積し、一時的ではあるがプロビジョニングされたレベルを超えるトラフィックスパイクを処理することができる</td><td style="text-align:left;">この機能はオンデマンドモードでは利用できない</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>原則、オンデマンドモードを利用する</li><li>リザーブドキャパシティによる割引を利用してとにかく費用を抑えたい場合にはプロビジョンモードでも良いが、その際はトラフィック量の見通しが立っていることが前提となる</li></ul><div class="tip custom-block"><p class="custom-block-title">アダプティブキャパシティ機能</p><ul><li>全テーブルに対して自動的に有効化される</li><li>特定パーティションへアクセスが集中した場合、該当パーティションのキャパシティを自動的に増加させスロットリングを緩和する</li><li>ただしホットパーティションの検知から本機能の発動までは5～30分程度かかるため、ホットパーティションを発生させないための設計を行っておくことは大前提である</li></ul></div><h3 id="amazon-dynamodb-accelerator-dax" tabindex="-1">Amazon DynamoDB Accelerator(DAX) <a class="header-anchor" href="#amazon-dynamodb-accelerator-dax" aria-label="Permalink to &quot;Amazon DynamoDB Accelerator(DAX)&quot;">​</a></h3><p>読み取りリクエストが非常に多いワークロードやマイクロ秒レベルのレイテンシが安定して求められるようなアプリケーションにおいては、キャッシュ層を導入することが有効な手段となりうる。この際に利用できる機能がDAXである。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">内容</th></tr></thead><tbody><tr><td style="text-align:left;">概要</td><td style="text-align:left;">・DAXはDynamoDBのために設計されたフルマネージドインメモリキャッシュ <br>・アプリケーションとDynamoDBの間に配置されるキャッシュクラスタ</td></tr><tr><td style="text-align:left;">キャッシュの中身</td><td style="text-align:left;">・アイテムキャッシュとして <code>GetItem</code> と <code>BatchGetItem</code> の結果をキャッシュ <br>・クエリキャッシュとして <code>Query</code> と <code>Scan</code> の結果をキャッシュ</td></tr><tr><td style="text-align:left;">メリット</td><td style="text-align:left;">・読み取りリクエストの応答性能を大きく向上させる<br> ・DAXが処理したリクエストはRCUを消費しないため、CUコストを削減できる</td></tr><tr><td style="text-align:left;">デメリット</td><td style="text-align:left;">・DAX利用に追加のコストが発生する <br>・DAXを経由することで書き込みレイテンシはわずかに増加する<br> ・テーブル本体の更新とキャッシュの更新にわずかながらタイムラグが生じる</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>基本的にはDAXを利用せずに性能要求を満たすよう設計・構築する</li><li>ただし、ミリ秒単位を下回る超低レイテンシが求められるケースなどでは利用を検討する</li></ul><h2 id="コスト" tabindex="-1">コスト <a class="header-anchor" href="#コスト" aria-label="Permalink to &quot;コスト&quot;">​</a></h2><p>DynamoDBを利用する上での課金項目や発生費用について記載する。</p><p>コストが発生する主な要素を下表に示す。</p><table tabindex="0"><thead><tr><th style="text-align:left;">課金項目</th><th style="text-align:left;">説明</th><th style="text-align:left;">注意点</th></tr></thead><tbody><tr><td style="text-align:left;">データストレージ料金</td><td style="text-align:left;">テーブルに保存しているデータ量に応じてコストが発生する</td><td style="text-align:left;">ストレージ単価のみに着目するとAuroraの2.3倍程度、S3の11倍程度のコスト差がある</td></tr><tr><td style="text-align:left;">書き込み/読み込み料金</td><td style="text-align:left;">データの書き込みと読み込みの量に応じてコストが発生する。<br>料金体系は「プロビジョンド」と「オンデマンド」の2種類が存在する</td><td style="text-align:left;">Scanオペレーションはテーブル全体を読み込むため、コストが高くなりがちで注意</td></tr><tr><td style="text-align:left;">DynamoDB Streams</td><td style="text-align:left;">ストリームからのデータ読み込みに対してコストが発生する</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">バックアップとリストア</td><td style="text-align:left;">オンデマンドバックアップやポイントインタイムリカバリ機能を利用した場合、<br>そのストレージ量やリストア操作に応じてコストが発生する</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">グローバルテーブル</td><td style="text-align:left;">レプリケーションされる書き込みやデータ転送量に応じてコストが発生する</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">データ転送</td><td style="text-align:left;">DynamoDBからインターネットへのデータ転送量に応じてコストが発生する</td><td style="text-align:left;">リージョンを跨ぐ転送は転送元、転送先の両方でコストが発生する</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">削除コストの節約</p><p>TTL(Time to Live)でアイテムを削除する際にはコストは発生しない。TTLを利用しない場合には書き込みと読み込みに対してコストが発生する。そのため、時間経過と共にアイテムを削除した方が、都合の良いテーブルであれば積極的に利用する。</p></div><div class="tip custom-block"><p class="custom-block-title">テーブルクラス</p><p>下記2つのテーブルクラスが提供されており、テーブルの利用特性によってコスト低減が期待できる。なお、テーブルクラスはテーブル作成後に変更することが可能。</p><ul><li>DynamoDB 標準</li><li>DynamoDB 標準 - 低頻度アクセス</li></ul><p>低頻度アクセスのストレージ単価は標準と比較して60%低い。しかし書き込みと読み込みに関しては25%割高となる。</p><p>高速に読み書きすることが求められるが普段はアクセスされない傾向にあるテーブルであれば、低頻度アクセスに変更することでコストの節約が期待できる。例えば月毎に作成されるテーブルで、直近1か月のデータは頻繁に読み込まれるが、1年以上前のデータへは滅多にアクセスされない場合などに有効。</p></div><div class="tip custom-block"><p class="custom-block-title">ポイントインタイムリカバリ(PITR)に掛かるコスト</p><p>PITRに掛かるコストは下記の2つ。</p><ul><li><strong>継続的バックアップのコスト</strong>: PITRするためにはテーブルのデータの継続的なバックアップが必要で、2025年9月時点の価格で$0.228/GB-月 掛かる(東京リージョンの場合)。このコストはPITRが有効である期間において毎月発生する</li><li><strong>リストア実施のコスト</strong>: リストアを実施する際に1回発生し、コスト体系はテーブルのデータサイズに依存する。2025年9月時点の価格で$0.171/GB 掛かる(東京リージョンの場合)</li></ul><p>ここまでがPITRに掛かるコストであり、リストア後は通常のDynamoDBテーブルとしてコストが掛かる。</p></div><h2 id="可用性" tabindex="-1">可用性 <a class="header-anchor" href="#可用性" aria-label="Permalink to &quot;可用性&quot;">​</a></h2><h3 id="日常保護-運用ミス対策" tabindex="-1">日常保護（運用ミス対策） <a class="header-anchor" href="#日常保護-運用ミス対策" aria-label="Permalink to &quot;日常保護（運用ミス対策）&quot;">​</a></h3><h4 id="テーブルの誤削除への備え" tabindex="-1">テーブルの誤削除への備え <a class="header-anchor" href="#テーブルの誤削除への備え" aria-label="Permalink to &quot;テーブルの誤削除への備え&quot;">​</a></h4><p>DynamoDBには誤操作によるテーブル削除を防ぐために、「削除保護機能」が存在する。EC2 や RDS の削除保護機能と同様、IAMなどの権限を持っていても、削除保護機能を無効にしない限り削除が行えないようにできるため、誤操作の防止に有効である。</p><p>推奨は以下の通り。</p><ul><li>原則、全てのデプロイメント環境の、全てのテーブルに対して有効にする</li></ul><div class="tip custom-block"><p class="custom-block-title">他のガイドラインとの整合性</p><p><a href="https://future-architect.github.io/arch-guidelines/documents/forTerraform/terraform_guidelines.html#%E5%89%8A%E9%99%A4%E4%BF%9D%E8%AD%B7" target="_blank" rel="noreferrer">削除保護 | Terraform設計ガイドライン</a> にも「削除保護」が提供されている場合、原則有効にすると記載があり、整合性がある。</p></div><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/WorkingWithTables.Basics.html#WorkingWithTables.Basics.DeletionProtection" target="_blank" rel="noreferrer">DynamoDB テーブルの基本的なオペレーション</a></li><li><a href="https://dev.classmethod.jp/articles/amazon-dynamodb-now-supports-delete-protection/" target="_blank" rel="noreferrer">皆さん待望の削除保護機能が Amazon DynamoDB でサポートされました | DevelopersIO</a></li></ul></div><h4 id="偶発的データ損失への備え" tabindex="-1">偶発的データ損失への備え <a class="header-anchor" href="#偶発的データ損失への備え" aria-label="Permalink to &quot;偶発的データ損失への備え&quot;">​</a></h4><p>開発者の誤操作によるデータ削除やアプリケーションの不具合によるデータ破損などのインシデントは、起こしてはならないものである。しかし発生してしまった場合への備えは多くの業務システムで考えておくべきである。ポイントインタイムリカバリ (PITR: Point-in-Time Recovery)を有効にすると、過去35日以内の任意の秒単位の状態にテーブルを復元できる。性能への影響は無く、基本的にリストアは新テーブル作成で復元する。そのため、完了後に必要に応じて環境変数切り替えと、リストアまでに変更されたデータの反映などの対応が必要となる。PITRは誤操作によるデータ損失を救済できるセーフティネットとして有効だが、ストレージ使用量による課金が発生する。</p><p>推奨は以下の通り。</p><ul><li>原則、PITRは全てのマスタ・トラン系のテーブルで有効にする <ul><li>一時的なワークテーブルであれば、PITRは不要にしても良い</li><li>費用などの観点で、別経路でリストア可能なバックアップが取れているのであれば、不要にしても良い（例えば、DymamoDB Streams経路でS3などにバックアップが時系列で蓄積されている、など）</li></ul></li><li>期間は最大値（35日）を一律設定とする <ul><li>「<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/PointInTimeRecovery_Howitworks.html" target="_blank" rel="noreferrer">テーブルのサイズに基づいて PITR の料金を請求します。復旧期間を (35 日から 1 日などに) 変更しても、料金は削減されません。選択した復旧期間に関係なく、コストは変わりません</a>」とあるため、コスト観点で短くする意味があまりない</li><li>ただし、一定期間に、更新/削除&amp;登録が大量に繰り返されるなど特殊なワークロードの場合は、費用観点で期間を最適化することはありえる</li><li>また、コンプライアンス要件で、「ユーザー退会時に7日以内にユーザー情報を完全削除する」、といった対応が必要な場合は、PITRもそれに合わせる必要がある</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/PointInTimeRecovery_Howitworks.html" target="_blank" rel="noreferrer">DynamoDB でポイントインタイムリカバリを有効にする</a></p></div><h3 id="dr" tabindex="-1">DR <a class="header-anchor" href="#dr" aria-label="Permalink to &quot;DR&quot;">​</a></h3><p>DynamoDBには可用性について以下の選択肢がある。</p><ul><li><strong>構成シングルリージョン</strong>: DynamoDBは自動的に複数AZにデータを複製し、AZ障害への耐性がある。リージョン全体の障害で数分～数時間のデータ損失が発生する可能性がある</li><li><strong>グローバルテーブル</strong>: 複数のリージョンにアクティブ-アクティブ構成でテーブルを複製する。リージョン障害時にリージョン切り替えでサービス継続が可能。追加費用が発生する。可用性SLAを99.999%</li></ul><p>これらの選択は、DR（Disaster Recovery、災害回復）計画から策定する。DR対策は、リージョン障害が発生した場合の許容ダウンタイム (RTO: Recovery Time Objective、回復時間目標) とデータ損失 (RPO: Recovery Point Objective、回復ポイント目標) を元に行う。</p><p><img src="'+p+'" alt=""></p><p>RPO/RTOの値により決定する、復旧シナリオの対応パターンは以下の通り。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">アクティブスタンバイ</th><th style="text-align:left;"></th><th style="text-align:left;"></th><th style="text-align:left;">アクティブアクティブ</th></tr></thead><tbody><tr><td style="text-align:left;">復旧シナリオ</td><td style="text-align:left;">①バックアップ・リストア</td><td style="text-align:left;">②パイロットライト</td><td style="text-align:left;">③ウォームスタンバイ</td><td style="text-align:left;">④マルチサイト</td></tr><tr><td style="text-align:left;">説明</td><td style="text-align:left;">On-DemandバックアップやPITRを使い、データを別リージョンに復元する。頻繁なバックアップスケジューリングが必要</td><td style="text-align:left;">セカンダリリージョンに空テーブルを待機させ、障害時にデータをレプリケートして起動する。コストを抑えつつ中程度の回復速度を提供できる</td><td style="text-align:left;">セカンダリリージョンにスケールダウンしたアクティブ環境を維持する。リアルタイム同期と自動フェイルオーバーを実装が必要</td><td style="text-align:left;">Global Tablesを使い、複数リージョンにレプリケートする。競合解決のため、アプリケーションはローカルエンドポイントのみ使用するなど注意</td></tr><tr><td style="text-align:left;">RPO</td><td style="text-align:left;">数時間（バックアップ間隔依存）</td><td style="text-align:left;">数分</td><td style="text-align:left;">数分</td><td style="text-align:left;">秒単位</td></tr><tr><td style="text-align:left;">RTO</td><td style="text-align:left;">数時間（復元時間）</td><td style="text-align:left;">数十分</td><td style="text-align:left;">数分</td><td style="text-align:left;">ほぼゼロ</td></tr><tr><td style="text-align:left;">主な実装技術</td><td style="text-align:left;">On-Demandバックアップ, PITR, クロスリージョンコピー</td><td style="text-align:left;">Global Tablesの部分利用など</td><td style="text-align:left;">DynamoDB Streams, Lambda, Route 53</td><td style="text-align:left;">Global Tables</td></tr><tr><td style="text-align:left;">コスト</td><td style="text-align:left;">低</td><td style="text-align:left;">中</td><td style="text-align:left;">中〜高</td><td style="text-align:left;">高い。データ転送コストにも注意する</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>RPO、RTOに基づき復旧シナリオを選択する</li><li>もし、明確な復旧計画を立てるようなプロダクト特性やプロダクトフェーズでなければ、①から初めて成長に応じて②に移行する</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><img src="'+h+`" alt=""> 画像は <a href="https://aws.amazon.com/jp/blogs/news/disaster-recovery-strategy-in-the-cloud/" target="_blank" rel="noreferrer">事業継続性が求められる基幹システムの DR 戦略 | Amazon Web Services</a> より</p><p><a href="https://docs.aws.amazon.com/ja_jp/wellarchitected/2022-03-31/framework/w44aac19b9c11c13.html" target="_blank" rel="noreferrer">REL 13 災害対策 (DR) はどのように計画するのですか? - AWS Well-Architected Framework</a> も参考になる。</p></div><h2 id="監視" tabindex="-1">監視 <a class="header-anchor" href="#監視" aria-label="Permalink to &quot;監視&quot;">​</a></h2><p>DynamoDB | CloudWatch Metrics メトリクス監視 | <a href="https://future-architect.github.io/arch-guidelines/documents/forAWS/aws_guidelines.html#dynamodb" target="_blank" rel="noreferrer">AWS設計ガイドライン</a> を参照すること。</p><h2 id="セキュリティ" tabindex="-1">セキュリティ <a class="header-anchor" href="#セキュリティ" aria-label="Permalink to &quot;セキュリティ&quot;">​</a></h2><h3 id="アクセス制御-iam" tabindex="-1">アクセス制御（IAM） <a class="header-anchor" href="#アクセス制御-iam" aria-label="Permalink to &quot;アクセス制御（IAM）&quot;">​</a></h3><p>適切な権限設定を行うことで、情報漏洩やデータ改ざんリスクを軽減できる。</p><p>推奨は以下の通り。</p><ul><li>最小権限の原則を追求する <ul><li>開発者に対する権限は、本当に必要な操作のみに絞る（例えば、本番データ調査が必要であればGetItemのみ、データパッチする必要があるユーザーのみPutItemを付与など）</li><li>アプリケーションに対しての権限付与は、少なくともDynamoDBを操作するアプリケーションのみに <code>dynamodb:*</code> 権限を付与する</li><li>テーブル単位xAPI単位などの細かい粒度制御は、アプリケーションの環境変数との整合性をチェックするツールなどの開発とセットで検討する。手動でのメンテナンスは設定ミスを誘発するため、行わない</li></ul></li></ul><div class="warning custom-block"><p class="custom-block-title">マルチテナントの場合は、アイテムレベルのアクセス制御を実装する</p><p>マルチテナントではデータ分離が強く求められる。そのため、アイテムレベルのアクセス制御（Row-Level Securityに相当） をIAMポリシーで強制することが望ましい。</p><p>【実装例】パーティションキーに、テナントIDを含め、IAMポリシーのCondition句とポリシー変数を使い、「リクエスト元のユーザーIDと、アクセスしようとしているアイテムのパーティションキーが一致する場合のみ、操作を許可する」というルールを課す。AssumeRole時のセッションタグにUserIDを設定しているイメージ。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2012-10-17&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Statement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Effect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Allow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dynamodb:*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Resource&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;arn:aws:dynamodb:REGION:ACCOUNT_ID:table/YourTable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Condition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;ForAllValues:StringEquals&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;dynamodb:LeadingKeys&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${aws:PrincipalTag/UserID}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></div><div class="tip custom-block"><p class="custom-block-title">環境識別子で絞り込む</p><p>デプロイメント環境は、dev、stg、 prodごとに作成することが、AWS設計ガイドラインでも求められている。これに従う場合も、本ガイドラインでは命名規則は \${ENV}_TableName といったプレフィックスを付与する方針である。そのため、IAMポリシーのResource句でワイルドカードを使い、特定のプレフィックスを持つテーブルへのみ許可するようにする。これにより、例えば開発用のIAMロールが、誤って本番テーブルを操作してしまうといったヒューマンエラーのリスクを軽減できる。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;Version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2012-10-17&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;Statement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Effect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Allow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dynamodb:*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Resource&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;arn:aws:dynamodb:REGION:ACCOUNT_ID:table/\${env}_*&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div><h3 id="暗号化" tabindex="-1">暗号化 <a class="header-anchor" href="#暗号化" aria-label="Permalink to &quot;暗号化&quot;">​</a></h3><p>DynamoDBテーブルの暗号化設定は、以下の3つのキーで行うことができる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">AWS所有キー</th><th style="text-align:left;">AWSマネージドキー</th><th style="text-align:left;">カスタマー管理キー（CMKs）</th></tr></thead><tbody><tr><td style="text-align:left;">デフォルト。追加料金なしで暗号化できる</td><td style="text-align:left;">KMSで管理されるキー。監査証跡（CloudTrail）でキーの使用状況を追跡できる</td><td style="text-align:left;">ユーザーが自身で管理するKMSキー。キーのローテーションや無効化を能動的に制御でき、任意のコンプライアンス要件に対応可能</td></tr></tbody></table><p>DynamoDBテーブルの暗号化は透過的に復号化されるため、例えば、AWSの管理者すら平文を読めなくする必要がある場合は、クライアントサイドで暗号化する必要がある（この場合、DynamoDBでのフィルターなどは行えなくなる）。</p><p>推奨は以下の通り。</p><ul><li>特別なコンプライアンス要件をまず確認する <ul><li>例えば、PCI-DSS対応を行う場合、AWSマネージドキーにする必要がある</li></ul></li><li>もし、遵守すべきコンプライアンス要件が無ければ、AWS所有キーでの暗号化で十分とし、KMS・カスタマー管理キーでの暗号化は不要とする <ul><li>インフラコスト・管理コストを下げることができるため</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/EncryptionAtRest.html" target="_blank" rel="noreferrer">保管時の DynamoDB 暗号化</a></li><li><a href="https://d1.awsstatic.com/whitepapers/compliance/pci-dss-compliance-on-aws-v4-102023.pdf" target="_blank" rel="noreferrer">Payment Card Industry Data Security Standard (PCI DSS) v4.0 on AWS</a><ul><li>「You should use KMS Customer Managed Keys (CMKs) for encryption of account data」とあるように、PCI DSSではカスタマーCMKsが求められる</li></ul></li></ul></div><h3 id="ネットワークセキュリティ" tabindex="-1">ネットワークセキュリティ <a class="header-anchor" href="#ネットワークセキュリティ" aria-label="Permalink to &quot;ネットワークセキュリティ&quot;">​</a></h3><p>意図しないネットワークからのアクセスを遮断することで、セキュリティを強化できる。</p><p>推奨は以下の通り。</p><ul><li>原則、VPCエンドポイントを利用する</li><li>VPCエンドポイントポリシーの利用は推奨しない <ul><li>IAM設定側に寄せることで、定義を一元管理する方が直感的で分かりやすいため</li><li>VPCエンドポイントで制御する場合、複数の経路を考えてそれらが間違いなく動くようにしなければならないため、複雑性が増し、何か変更を加えた時の影響範囲が増えてしまうため</li></ul></li></ul><h3 id="監査" tabindex="-1">監査 <a class="header-anchor" href="#監査" aria-label="Permalink to &quot;監査&quot;">​</a></h3><p>インシデント発生時に、誰が・いつ・何をしたか、原因調査を可能とする。</p><p>推奨は以下の通り。</p><ul><li>AWS CloudTrailを有効化し、DynamoDBへのAPIコール（コントロールプレーン操作とデータプレーン操作）をすべて記録する <ul><li>「誰がテーブルを作成したか」「誰がどのアイテムにアクセスしたか」を監査可能とする</li><li>アプリケーションでのデータプレーンの操作は出力を抑制し、ユーザー操作は全て出力すると言った濃淡を付けたい場合は、CloudTrailレイヤーでは対応できないため、CloudTrail -&gt; EventBridgeでフィルタリングする</li></ul></li></ul><h2 id="移行" tabindex="-1">移行 <a class="header-anchor" href="#移行" aria-label="Permalink to &quot;移行&quot;">​</a></h2><h3 id="dynamodb-から-cassandra" tabindex="-1">DynamoDB から Cassandra <a class="header-anchor" href="#dynamodb-から-cassandra" aria-label="Permalink to &quot;DynamoDB から Cassandra&quot;">​</a></h3><p>TBD</p><h2 id="謝辞" tabindex="-1">謝辞 <a class="header-anchor" href="#謝辞" aria-label="Permalink to &quot;謝辞&quot;">​</a></h2><p>このアーキテクチャガイドラインの作成にご協力いただいた皆様に、心より感謝申し上げる。</p><ul><li><strong>作成者</strong>: 真野隼記、後藤玲雄、武田大輝、村田靖拓、村瀬善則、宮崎将太、市川燿、山本竜玄、澁川喜規</li><li><strong>レビュアー</strong>: 八木雅斗、大江聖太郎</li></ul><p>皆様のご尽力なしには、本ガイドラインは完成しなかった。深く感謝する。</p>`,273))])}const S=l(y,[["render",u]]);export{k as __pageData,S as default};
