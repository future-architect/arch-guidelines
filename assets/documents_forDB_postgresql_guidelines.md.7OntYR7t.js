import{_ as g,C as r,c as o,o as a,G as e,a4 as n,b as h,j as t,w as l,a as i,a8 as p}from"./chunks/framework.BJEXY-5A.js";const E="/arch-guidelines/assets/image7.Gf1GnjVN.png",y="/arch-guidelines/assets/image8.ao0Cxhtt.png",c="/arch-guidelines/assets/image9.Bf9R6IqE.png",b="/arch-guidelines/assets/image12.CmF7cC0W.jpg",L=JSON.parse('{"title":"PostgreSQL設計ガイドライン","description":"","frontmatter":{"sidebarDepth":4,"title":"PostgreSQL設計ガイドライン","author":"フューチャー株式会社","head":[["meta",{"name":"keywords","content":"PostgreSQL"}]]},"headers":[],"relativePath":"documents/forDB/postgresql_guidelines.md","filePath":"documents/forDB/postgresql_guidelines.md"}'),u={name:"documents/forDB/postgresql_guidelines.md"};function f(x,s,A,m,D,F){const k=r("page-title"),d=r("Mermaid");return a(),o("div",null,[e(k),s[3]||(s[3]=n(`<p>本ガイドラインは、世の中のシステム開発プロジェクトのために無償で提供する。<br> ただし、掲載内容および利用に際して発生した問題、それに伴う損害については、フューチャー株式会社（以下、フューチャー）は一切の責務を負わないものとする。<br> また、掲載している情報は予告なく変更する場合があるため、あらかじめご了承いただきたい。</p><div class="warning custom-block"><p class="custom-block-title">免責事項: 有志で作成したドキュメントである</p><ul><li>フューチャーには多様なプロジェクトが存在し、それぞれの状況に合わせて工夫された開発プロセスや高度な開発支援環境が存在する。本ガイドラインはフューチャーの全ての部署／プロジェクトで適用されているわけではなく、有志が観点を持ち寄って新たに整理したものである</li><li>相容れない部分があればその領域を書き換えて利用することを想定している <ul><li>プロジェクト固有の背景や要件への配慮は、ガイドライン利用者が最終的に判断すること</li></ul></li><li>本ガイドラインに必ず従うことは求めておらず、設計案の提示と、それらの評価観点を利用者に提供することを主目的としている</li></ul></div><h2 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h2><p>本ガイドラインはPostgreSQLを使用する開発者向けに、DBのテーブルやカラムの命名・型桁・制約などのスキーマ管理に加え、履歴・排他制御・マルチテナント対応などアプリケーション設計を含む内容についての設計標準を紹介する。これにより、DB設計の主な論点／設計項目／設計観点を提供することで、開発者の考慮漏れを防ぐとともに、チームでの設計上の合意形成を手助けし、システム開発における標準ラインとなる設計手法を提供することでナレッジやツールの横展開を容易にすることを目指す。</p><h2 id="前提条件" tabindex="-1">前提条件 <a class="header-anchor" href="#前提条件" aria-label="Permalink to &quot;前提条件&quot;">​</a></h2><p>作成にあたって以下の想定を持つ。</p><ul><li>利用データベース：PostgreSQL</li><li>ワークロード： OLTP（オンライントランザクション処理）の業務システム開発</li><li>主にクラウド上のマネージドサービスの利用（Amazon Auroraを利用など）</li></ul><h2 id="テーブル種別" tabindex="-1">テーブル種別 <a class="header-anchor" href="#テーブル種別" aria-label="Permalink to &quot;テーブル種別&quot;">​</a></h2><p>DBで利用するテーブルを、以下のような分類で捉えるとチーム内で認識が一致しやすい。本ガイドラインでは次のような名称を利用する。</p><ol><li><strong>トランザクションテーブル（トラン）</strong><ul><li>日々発生するイベント、契約、指示、やり取りや操作などを記録するテーブル</li><li>例） 販売システムにおける売上履歴や、銀行の取引履歴などが該当</li><li>改廃あり（保持期間：比較的長い）</li></ul></li><li><strong>マスタテーブル (マスタ)</strong><ul><li>システムにおけるリファレンスに該当するデータ</li><li>例） 顧客テーブル、商品テーブル</li><li>顧客が増えるというイベントは日々発生するが、帳簿としての利用ではないため顧客マスタと呼称させることが多い</li><li>改廃無し</li></ul></li><li><strong>ワークテーブル （ワーク）</strong><ul><li>トランやマスタに反映するためや、帳票や画面出力するために中間的に利用される</li><li>例）バッチ処理の中間結果の保存目的</li><li>例）複雑なクエリを実行する際の中間結果の保存</li><li>改廃あり（保持期間：短い）</li></ul></li><li><strong>サマリテーブル(サマリ)</strong><ul><li>日次、週次、月次などの統計をバッチによって集計して作成する。経営情報のビューの高速化のために利用する</li><li>例）月別売上実績サマリ</li><li>例）日別在庫分析サマリ</li><li>改廃あり（保持期間：比較的長い）</li></ul></li></ol><p>ワークテーブルの派生として、以下のようなテーブルが存在する。</p><ul><li>I/F受信ワークテーブル</li><li>I/F送信ワークテーブル</li></ul><h2 id="正規化" tabindex="-1">正規化 <a class="header-anchor" href="#正規化" aria-label="Permalink to &quot;正規化&quot;">​</a></h2><p>原則、第3正規形を基本とする。</p><p>非正規化については、データ整合性の観点から極めて慎重に取り扱いを検討する。例えば以下の場合に非正規化を検討する。</p><ul><li>インデックス設計、実行計画の最適化では対応できないほど、応答要件が厳しいクエリが存在し、リレーションの結合回数を減らすために、非正規化が有効な選択肢である場合</li></ul><h2 id="命名" tabindex="-1">命名 <a class="header-anchor" href="#命名" aria-label="Permalink to &quot;命名&quot;">​</a></h2><h3 id="バリュードメイン" tabindex="-1">バリュードメイン <a class="header-anchor" href="#バリュードメイン" aria-label="Permalink to &quot;バリュードメイン&quot;">​</a></h3><p>DB設計における「ドメイン」は定義域とも呼ばれ、その属性が取りうる値の集合を示す。例えば、<code>NUMERIC(10, 2)</code> というデータ型は、定義域の1つの形態である。他にも、性別区分などの区分値を示す定義域のようなものがある。ドメインと呼ぶこともあるが、Webのドメインや、ドメイン駆動開発のドメインなどと区別がややこしいため、ここではISO 11179での呼称であるバリュードメインと呼ぶ（一般には型ドメインと呼ぶことも多い）。</p><p>バリュードメインを整理することで、個々のカラムのデータ型設計の揺れを減らすことができる。例えば、顧客コードというドメインを作成し、請求先顧客コード／取引先顧客コードといった具体的なカラムと紐づけることで、データ型の揺れを減らすことができる。またそういったメタデータをデータサイエンティストが利用することで、データ利活用を促進できる可能性がある。</p><p>推奨は以下の通り。</p><ul><li>個別のカラムやデータ型の設計を行うと同時に、バリュードメインを整備していく</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://a5m2.mmatsubara.com/tips/er_domain/" target="_blank" rel="noreferrer">ERエディタで型ドメインを使う A5:SQL Mk-2</a></li><li><a href="https://qiita.com/abe_masanori/items/371d61048b7654cf4be5" target="_blank" rel="noreferrer">ドメイン管理のデータモデリングにおける重要性 #データモデリング - Qiita</a></li></ul></div><h3 id="論物変換" tabindex="-1">論物変換 <a class="header-anchor" href="#論物変換" aria-label="Permalink to &quot;論物変換&quot;">​</a></h3><p>PostgreSQLの識別子（テーブル名、カラム名、シーケンス名、インデックス名、制約名、関数名など）の最大は<a href="https://www.postgresql.jp/docs/16/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS" target="_blank" rel="noreferrer">PostgreSQL 文書 4.1.1. 識別子とキーワード</a> によると63文字である。業務システムでは、専門用語の組み合わせで長くなる傾向がある（例: 配送センター別商品在庫数量: <code>inventory_quantity_by_distributioncenter</code>）。業務用語とのマッピングは後述する論物変換辞書で行うが、その際は、なるべく短く簡潔な名称になるよう設計する。</p><p>論物変換とは論理名を物理名に変換する行為を示す。名称揺れ/翻訳揺れが無いよう、辞書を用意し文言管理をする。辞書は論理名と物理名の対応がなされていれば形式を問わない。</p><p>例）</p><div class="language-csv vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csv</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ID,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">記事,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">article</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ヘッダ,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">header</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">タイトル,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">title</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">内容,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">content</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>辞書では分解不可能な粒度の単語から順に定義し、固有名詞としての登録は可能な限り避ける。例えば、「商品一覧」という単語を辞書で定義する場合、「商品」 「一覧」を単語として登録し、「商品一覧」は登録しない。</p><p>「商品一覧」のように、単語の合成で構成される用語を辞書に登録してしまうと、一部の物理名が変わった際に二重メンテナンスが必要になってしまい、命名揺れから品質低下に繋がる危険性がある。ただし、変換対象の単語が専門的、または論物変換結果が著しく長大になった場合に、短縮したい場合は、分解可能な粒度であっても一語として登録する。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#OKパターン</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">商品,item</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">一覧,list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#NGパターン</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">商品,item</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">一覧,list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">商品一覧,item_list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h5 id="論物変換ツール" tabindex="-1">論物変換ツール <a class="header-anchor" href="#論物変換ツール" aria-label="Permalink to &quot;論物変換ツール&quot;">​</a></h5><p>ER図がA5M2により作成されていれば、下記ツールにより論物変換が可能である。</p><ul><li><a href="https://github.com/future-architect/a5er-dictionary" target="_blank" rel="noreferrer">https://github.com/future-architect/a5er-dictionary</a></li></ul><p>CSV形式で論理名と物理名の対応表を作成する。</p><h3 id="区分値" tabindex="-1">区分値 <a class="header-anchor" href="#区分値" aria-label="Permalink to &quot;区分値&quot;">​</a></h3><p>区分値とは、DMBOKでは参照データ（リファレンスデータ）とほぼ同義で、例えば性別コードのような意味のある値の集合のことを指す。画面上のプルダウンで選択できる検索条件や、業務上の意思決定を行うためのレポート作成の集計軸などで扱われる。</p><p>区分値の例:</p><ul><li>購入区分「<code>00:未購入</code> <code>01:購入済</code> <code>02:予約済</code>」</li><li>性別区分「<code>0:不明</code> <code>1:男性</code> <code>2:女性</code> <code>9:適用不能</code>」</li></ul><p>区分値の管理手法として以下の2つがある。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">説明</th><th style="text-align:left;">例</th></tr></thead><tbody><tr><td style="text-align:left;">連番コード値で管理</td><td style="text-align:left;">01、02などのコード値と、業務上の区別したい状態を紐づける。<br>初期値を00としたり、90を不明にするなど体系を持つことがある</td><td style="text-align:left;">購入区分: <code>00:未購入</code> <code>90:不明</code></td></tr><tr><td style="text-align:left;">意味のある文字列で管理</td><td style="text-align:left;">未購入を00ではなく、unpurchasedといった文字列で管理する方法</td><td style="text-align:left;">サイズ区分: <code>L:Large</code> <code>M:Medium</code></td></tr></tbody></table><p>それぞれの特徴を下表でまとめる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">連番コード値</th><th style="text-align:left;">意味のある文字列</th></tr></thead><tbody><tr><td style="text-align:left;">容量増による性能劣化/費用増</td><td style="text-align:left;">✅️優れている</td><td style="text-align:left;">⚠️富豪的と言える</td></tr><tr><td style="text-align:left;">キャッチアップコスト</td><td style="text-align:left;">⚠️主要な区分は慣れれば覚えるが、当初は理解しにくい</td><td style="text-align:left;">✅️直感的に理解できる</td></tr><tr><td style="text-align:left;">視認性</td><td style="text-align:left;">✅️桁が揃っている</td><td style="text-align:left;">❓️人による</td></tr><tr><td style="text-align:left;">拡張性</td><td style="text-align:left;">✅️容易</td><td style="text-align:left;">✅️容易</td></tr><tr><td style="text-align:left;">入力ミス</td><td style="text-align:left;">✅️typoミスは抑えられる</td><td style="text-align:left;">⚠️typoなどが発生しやすい</td></tr><tr><td style="text-align:left;">データサイエンティストの利用</td><td style="text-align:left;">⚠️常に最新のドキュメントを連携する必要があり、変更管理時の運用設計も必要</td><td style="text-align:left;">✅️項目値である程度判断可能</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>「連番コードでの管理」とする <ul><li>費用／性能の観点と、typoミスを減らすことで品質／生産性を安定させることを優先したいため</li></ul></li></ul><p>区分値や表示名称の紐づけをはじめとした、区分値の管理には、RDM（Reference Data Management）を導入することもある。システム開発においては、区分値一覧のような設計ドキュメントを作成し管理することも多い。開発上は以下やその組み合わせで利用することが考えられる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">項目</th><th style="text-align:left;">1. ソースコードで管理</th><th style="text-align:left;">2. 区分値管理テーブルで一括管理</th><th style="text-align:left;">3. 区分値別に参照テーブルを作成</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;">ソースコードやJSON/YAMLなどの定義ファイルで管理する方法。<br>定義ファイルを正とする場合はコード生成と組み合わせることがベター</td><td style="text-align:left;">区分値グループコードと、区分値コードで管理する方法</td><td style="text-align:left;">区分値ごとにテーブルを作成して管理する方法</td></tr><tr><td style="text-align:left;">Pros</td><td style="text-align:left;">✅️バージョン管理が容易 <br>✅️CI/CD環境との相性が良い</td><td style="text-align:left;">✅️区分値追加でもテーブル変更が不要 <br>✅️アプリケーションのデプロイなしに区分値の追加・変更が可能</td><td style="text-align:left;">✅️そのままデータ基盤に連携すれば、メタデータ連携の手間などを省ける</td></tr><tr><td style="text-align:left;">Cons</td><td style="text-align:left;">❌️データ基盤／データサイエンティストに信頼できるドキュメントを提供し続ける必要</td><td style="text-align:left;">❌️区分値テーブルのメンテナンスコスト<br>❌️データサイエンティストが区分値特定に手間が必要</td><td style="text-align:left;">❌️区分値の種別追加でテーブル追加になり開発の手間がある</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>（1）を採用し、開発効率を上げる</li><li>データ基盤連携時には、（3）を採用することで、データ利活用を促進する工夫を取る</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://dbflute.seasar.org/ja/manual/function/genbafit/implfit/classification/index.html" target="_blank" rel="noreferrer">区分値 (Classification) | DBFlute</a></li><li><a href="https://zenn.dev/tonbi_attack/articles/fb796ac3cf9720" target="_blank" rel="noreferrer">DBで区分値などのCODEは数値ではなく文字列を利用するべき</a></li><li><a href="https://data-engineer-tech.com/datamanagement-reference-and-master/" target="_blank" rel="noreferrer">【データマネジメント】参照データとマスタデータについて解説 | データエンジニアのTech blog</a></li></ul></div><h3 id="物理名の命名ポリシー" tabindex="-1">物理名の命名ポリシー <a class="header-anchor" href="#物理名の命名ポリシー" aria-label="Permalink to &quot;物理名の命名ポリシー&quot;">​</a></h3><p>業務用語をローマ字表現にするか、英訳するかはチームごとのポリシーを持って決定する。そのうえで「論物変換辞書」を運用し、揺れを無くすように命名する。</p><p>昨今はデータ利活用の観点から、対象のシステムだけに特化した名称にするのではなく、全社データガバナンスの観点から、体系を合わせて命名することが好ましい。本ガイドラインで記載する以降の内容も、対象企業内のデータガバナンス／統一的な設計ポリシーがあればそちらを優先し適用する必要がある。</p><div class="warning custom-block"><p class="custom-block-title">予約語はテーブル名やカラム名に利用しない</p><p><code>like</code> <code>offset</code> <code>constraint</code> <code>order</code> などの予約語をテーブル名やカラム名にすると、SQLでの扱いが面倒になる（予約語との区別のためにクォートで囲む必要があり、可読性も下がる）ため避けること。通常は、CREATE文でもクォートでの囲みが必要だが、ツールなどで自動生成すると気が付かない可能性があるため注意する。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- テーブル名 like に囲み文字が必要</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">like</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot; (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    like_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- カラム名 order に囲み文字が必要</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sales</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sales_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;order&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- テーブル名 like に囲み文字が必要</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;like&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (user_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- カラム名 order に囲み文字が必要</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sales (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>推奨は以下の通り。</p><ul><li><a href="https://www.postgresql.org/docs/17/sql-keywords-appendix.html" target="_blank" rel="noreferrer">PostgreSQL: Documentation: 17: Appendix C. SQL Key Words</a> に記載された全てのキーワードをテーブル名やカラム名に利用しない <ul><li>正確には、「Table C.1. SQL Key Words」のPostgreSQL列が <code>reserved</code> 以外のキーワードは利用できる</li><li>しかし、DBリプレイスや今後のバージョンアップ時の互換性を意識して、使用しない方針とする</li><li><code>like</code> や <code>order</code> であれば <code>user_likes</code>（関連するテーブル名を付与） や <code>orders</code> （複数形にする）でも回避できるが、<a href="#テーブル種別の識別子">テーブル種別の識別子</a> や<a href="#カラム名">カラム名</a> にあるように、 <code>t_like</code> などのプレフィックスや、<code>order_id</code> のような命名ルールにすることで自然と回避できる</li></ul></li></ul></div><h3 id="テーブル種別の識別子" tabindex="-1">テーブル種別の識別子 <a class="header-anchor" href="#テーブル種別の識別子" aria-label="Permalink to &quot;テーブル種別の識別子&quot;">​</a></h3><p>商品マスタを <code>item_master</code> <code>m_item</code> のどちらにするかといった揺れをはじめとして、保守運用性のためには、命名規則を作り統制を取ることが望ましい。本ガイドラインでは以下の方針を取る。</p><ul><li>テーブル種別がプレフィックスで識別可能とする</li><li>プレフィックスは最大文字数の制約からなるべく短い識別子とする（下表）</li><li>最大文字数の制約から、テーブル名は複数形にしない <ul><li>例: orders -&gt; order</li><li>例: employees -&gt; employee</li></ul></li></ul><table tabindex="0"><thead><tr><th style="text-align:left;">テーブル種別</th><th style="text-align:left;">識別子</th><th style="text-align:left;">例</th><th style="text-align:left;">備考</th></tr></thead><tbody><tr><td style="text-align:left;">マスタ</td><td style="text-align:left;"><code>m_</code></td><td style="text-align:left;"><code>m_item</code></td><td style="text-align:left;"><code>master</code>の略</td></tr><tr><td style="text-align:left;">トラン</td><td style="text-align:left;"><code>t_</code></td><td style="text-align:left;"><code>t_sale</code></td><td style="text-align:left;"><code>transaction</code>の略</td></tr><tr><td style="text-align:left;">ワーク</td><td style="text-align:left;"><code>w_</code></td><td style="text-align:left;"><code>w_item</code></td><td style="text-align:left;"><code>work</code>の略</td></tr><tr><td style="text-align:left;">受信ワーク</td><td style="text-align:left;"><code>wr_</code></td><td style="text-align:left;"><code>wr_item</code></td><td style="text-align:left;"><code>work receive</code>の略</td></tr><tr><td style="text-align:left;">配信ワーク</td><td style="text-align:left;"><code>ws_</code></td><td style="text-align:left;"><code>ws_item</code></td><td style="text-align:left;"><code>work send</code>の略</td></tr><tr><td style="text-align:left;">ビュー</td><td style="text-align:left;"><code>v_</code></td><td style="text-align:left;"><code>v_m_item</code></td><td style="text-align:left;"><code>view</code> の略</td></tr><tr><td style="text-align:left;">マテリアルビュー</td><td style="text-align:left;"><code>mv_</code></td><td style="text-align:left;"><code>mv_m_item</code></td><td style="text-align:left;"><code>mview</code>の略</td></tr><tr><td style="text-align:left;">一時表</td><td style="text-align:left;"><code>tmp_</code></td><td style="text-align:left;"><code>tmp_item</code></td><td style="text-align:left;"><code>temporary</code>の略</td></tr><tr><td style="text-align:left;">サマリ</td><td style="text-align:left;"><code>s_</code></td><td style="text-align:left;"><code>s_sale</code></td><td style="text-align:left;"><code>summary</code>の略</td></tr><tr><td style="text-align:left;">履歴</td><td style="text-align:left;"><code>h_</code></td><td style="text-align:left;"><code>hist_sales</code></td><td style="text-align:left;"><code>history</code>の略</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">期間の粒度が異なるサマリテーブル</p><p>日次サマリ、週次サマリ、月次サマリなど異なる粒度のサマリテーブルが複数存在する場合は、それぞれ<code>day</code> <code>week</code> <code>month</code> から先頭1文字をもらって、 <code>sd_</code> <code>sw_</code> <code>sm_</code> などとルールを決めて区別すると良い。</p></div><h3 id="カラム名" tabindex="-1">カラム名 <a class="header-anchor" href="#カラム名" aria-label="Permalink to &quot;カラム名&quot;">​</a></h3><p>全社データガバナンスのポリシーを優先して命名する。もし、存在しない場合は、バリュードメインに応じて、論物変換辞書を作成してマッピングすべきである。その上で、以下のような命名ルールを作成することを推奨する。</p><p><strong>【命名ルールの例】</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;">対象</th><th style="text-align:left;">ルール例</th><th style="text-align:left;">備考</th></tr></thead><tbody><tr><td style="text-align:left;">日付</td><td style="text-align:left;"><code>{カラム}_date</code></td><td style="text-align:left;">order_dateなど</td></tr><tr><td style="text-align:left;">タイムスタンプ</td><td style="text-align:left;"><code>{カラム}_at</code></td><td style="text-align:left;">ordered_atなど</td></tr><tr><td style="text-align:left;">名称</td><td style="text-align:left;"><code>{カラム}_name</code></td><td style="text-align:left;">item_nameなど</td></tr><tr><td style="text-align:left;">ID</td><td style="text-align:left;"><code>{カラム}_id</code></td><td style="text-align:left;">item_idなど。IDは重複がない数値やUUIDなどのサロゲートキーで、基本的に画面などに出ないもの</td></tr><tr><td style="text-align:left;">コード</td><td style="text-align:left;"><code>{カラム}_code</code></td><td style="text-align:left;">item_codeなど。コードは商品コードなどのナチュラルキー（ビジネスキー）で画面などに表示される可能性があるもの。<br>重複がない方が望ましいが、ISBNなどのようにビジネスルール上再利用の可能性がある</td></tr><tr><td style="text-align:left;">フラグ</td><td style="text-align:left;"><code>is_{カラム}</code><br> <code>has_{カラム}</code></td><td style="text-align:left;">is_expired</td></tr><tr><td style="text-align:left;">区分</td><td style="text-align:left;"><code>{カラム}_typ</code></td><td style="text-align:left;">item_category_typ</td></tr><tr><td style="text-align:left;">整数</td><td style="text-align:left;"><code>{カラム}_min</code><br> <code>{カラム}_km</code></td><td style="text-align:left;">route_distance_kmなど。単位を記載する</td></tr><tr><td style="text-align:left;">数量</td><td style="text-align:left;"><code>{カラム}_count</code></td><td style="text-align:left;">order_countなど。発注数などの想定</td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">テーブル名とカラム名を同じ名称にしない方が良い</p><p>PostgreSQLでは、テーブル名とそのテーブルに含まれるカラム名を同じ名称にすることが可能である。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TEXT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UNIQUE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      -- タグ名 (テーブル名とカラム名が同じである)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- データの挿入例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag (tag) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;プログラミング&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag (tag) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;データベース&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- データの参照例 (テーブル名とカラム名が同じでも問題なく動作する)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id, tag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;データベース&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>推奨は以下の通り。</p><ul><li>テーブル名とカラム名は同じ名称にしない <ul><li>コードの可読性が下がるため（SQLでテーブルかカラムのどちらを指しているか混乱する）</li><li>影響度調査などで、コードを検索する必要がある場合に精度が低下するため</li></ul></li><li><a href="#テーブル種別の識別子">テーブル種別の識別子</a> や<a href="#カラム名">カラム名</a> にあるように、テーブル名は <code>m_tag</code> 、カラム名は <code>tag_name</code> のような命名ルールにすることで自然と回避できるが、それに従わない場合も同一名称は避けた方が良い</li></ul></div><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://docs.getdbt.com/best-practices/how-we-style/1-how-we-style-our-dbt-models" target="_blank" rel="noreferrer">How we style our dbt models | dbt Developer Hub</a></p></div><h3 id="インデックス名" tabindex="-1">インデックス名 <a class="header-anchor" href="#インデックス名" aria-label="Permalink to &quot;インデックス名&quot;">​</a></h3><p>インデックスは通常、アプリケーション開発や運用時に明示的に指定することは減っており、命名規則を設けるメリットは減ってきている。一方で、以下の場合は名称を指定することがある。</p><table tabindex="0"><thead><tr><th style="text-align:left;">操作内容</th><th style="text-align:left;">SQL例</th></tr></thead><tbody><tr><td style="text-align:left;">インデックスのリビルド</td><td style="text-align:left;"><code>REINDEX INDEX your_index_name;</code></td></tr><tr><td style="text-align:left;">ヒント句でのインデックス名指定</td><td style="text-align:left;"><code>SELECT /*+ Index(your_index_name) */ * FROM your_table WHERE your_column = &#39;value&#39;;</code></td></tr><tr><td style="text-align:left;">インデックス項目の追加、削除</td><td style="text-align:left;"><code>ALTER INDEX your_index_name …;</code></td></tr></tbody></table><p>また、インデックス名はスキーマ内で一意である必要があるため、名称の構成要素にテーブル名を持たせることが望ましい。</p><p>そのため、以下のような命名規則を作ることが望ましい。例として紹介する。</p><p><strong>【命名ルールの例】</strong></p><ol><li><code>pk_{テーブル名}</code></li><li><code>uk_{テーブル名}</code></li><li><code>idx_{連番}_{テーブル名}</code></li></ol><div class="warning custom-block"><p class="custom-block-title">文字数制限が厳しい要件がある場合</p><p>物理名が長くなりがちな業界、業務領域がある。そのような条件に一致する場合はなるべくプレフィックスを短くすることを推奨する。特にインデックスはPKやUKより長くなるため、<code>i{連番}_{テーブル名}</code> といった体系を採る方が防御的である。</p></div><h3 id="シーケンス名" tabindex="-1">シーケンス名 <a class="header-anchor" href="#シーケンス名" aria-label="Permalink to &quot;シーケンス名&quot;">​</a></h3><p>シーケンスは、開発／運用時に名称を明示的に指定し操作することは減っている。例えばシーケンスでは、IDENTITY列での自動採番や、TRUNCATE時のシーケンスリセットオプションを利用すれば、直接シーケンスオブジェクトを意識することは減ってきている。</p><p>一方で以下のようなケースは引き続き、シーケンス名を指定する場合があり、何かしら命名規則に従っていることが望ましい。</p><table tabindex="0"><thead><tr><th style="text-align:left;">操作内容</th><th style="text-align:left;">SQL例</th></tr></thead><tbody><tr><td style="text-align:left;">データ移行でシーケンス値を明示的に進める</td><td style="text-align:left;"><code>ALTER SEQUENCE your_sequence_name RESTART WITH 3000;</code></td></tr><tr><td style="text-align:left;">テーブル名／カラム名変更に合わせて、シーケンス名もリネームする</td><td style="text-align:left;"><code>ALTER SEQUENCE name RENAME TO new_name:</code></td></tr></tbody></table><p>命名規則は以下のような2つの方針が考えられる。1の場合は、テーブル名／カラム名それぞれ29文字を超過した場合、オミットされることに留意が必要である。</p><ol><li><code>seq_{テーブル名}_{カラム名}</code></li><li><code>seq_{テーブル名}_{連番}</code></li></ol><p>推奨は以下の通り。</p><ul><li>(2)のテーブル名と連番で管理する</li></ul><h2 id="インデックス" tabindex="-1">インデックス <a class="header-anchor" href="#インデックス" aria-label="Permalink to &quot;インデックス&quot;">​</a></h2><p>インデックス設計全体に共通する、推奨は以下の通り。</p><ul><li>最初から様々な機能を使い込んでいくのではなく、シンプルに保つ</li><li>必要になったタイミングで、各種のチューニング（設定）を行う</li></ul><p>理由は以下の通り。</p><ul><li>例えば、後述する部分インデックスなどは、設定しなくても要件を満たせる場合がある。その場合、あえて部分インデックスにした意図が不明瞭になるため</li><li>設計者によって使う／使わないの揺れが生じ、統制が取れなくなることを防ぐため</li></ul><h3 id="インデックス種別" tabindex="-1">インデックス種別 <a class="header-anchor" href="#インデックス種別" aria-label="Permalink to &quot;インデックス種別&quot;">​</a></h3><p>PostgreSQL 16時点では、以下のインデックス作成方法を選択できる</p><ul><li>B-tree、btree（デフォルト）</li><li>Hash、hash</li><li>GiST、gist</li><li>SP-GiST、spgist</li><li>GIN、gin</li><li>BRIN、brin</li><li>bloom</li></ul><p><a href="https://www.postgresql.jp/docs/16/indexes-types.html" target="_blank" rel="noreferrer">PostgreSQL 16.4文書</a>に使い分けについては以下のように記載がある（btree, hash以外は省略）</p><ol><li><code>&lt;</code> <code>&lt;=</code> <code>=</code> <code>&gt;=</code> <code>&gt;</code> や <code>between</code> 、 <code>in</code> を用いたクエリを利用する場合、<strong>btreeを用いる</strong></li><li>等価比較のみ <code>=</code> にアクセスが絞られる場合は <code>hash</code> を用いる</li></ol><p>推奨は以下の通り。</p><ul><li><code>btree</code> を利用する</li><li><code>hash</code> を含めそれ以外の利用は非推奨とする <ul><li><code>hash</code> は等価条件 <code>=</code> の場合に有利だが、業務処理では大半の場合ORDER BYが必要となり、ソートのために <code>hash</code> インデックスの利用ができないため</li></ul></li></ul><h3 id="インデックス設計" tabindex="-1">インデックス設計 <a class="header-anchor" href="#インデックス設計" aria-label="Permalink to &quot;インデックス設計&quot;">​</a></h3><p>インデックスの追加は書き込み性能に悪影響を及ぼすため、むやみに追加せず、必要最小限に抑える方針を取ること。</p><p>また、使用していないインデックスを定期的に削除することを推奨する。複数ノード存在する場合は、マスタ、リードレプリカそれぞれで確認すること（リードレプリカでは使用していないが、マスタでのみ利用していたり、その逆はよくあるため）。</p><p>注意点は以下である。</p><ul><li>PostgreSQL 17時点では、Oracleと異なり複数パーティションにまたがるインデックス（いわゆる、グローバルインデックス）が未対応。全てローカルインデックスとなる</li></ul><p>インデックスは文脈とその特徴によって次節で表現する名称で呼ぶことがある。</p><p>推奨は下表の通り。</p><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">利用方針</th><th style="text-align:left;">主な注意点</th></tr></thead><tbody><tr><td style="text-align:left;">１．複数列インデックス</td><td style="text-align:left;">任意</td><td style="text-align:left;">4列以上の場合は有識者確認</td></tr><tr><td style="text-align:left;">２．ユニークインデックス</td><td style="text-align:left;">一意制約より優先して利用</td><td style="text-align:left;">デフォルトはNULL許容</td></tr><tr><td style="text-align:left;">３．式インデックス</td><td style="text-align:left;">原則利用禁止。個別カラムにインデックス追加で代替する</td><td style="text-align:left;">乱用すると運用者が混乱する可能性</td></tr><tr><td style="text-align:left;">４．部分インデックス</td><td style="text-align:left;">原則利用禁止。チューニング時に必要に応じて利用する</td><td style="text-align:left;">クエリパターンとカーディナリティ見極めが重要</td></tr><tr><td style="text-align:left;">５．カバリングインデックス</td><td style="text-align:left;">同上</td><td style="text-align:left;">インデックスサイズ増大懸念や、テーブルのワークロード見極めが必要</td></tr><tr><td style="text-align:left;">６．付加列インデックス</td><td style="text-align:left;">同上</td><td style="text-align:left;">同上</td></tr></tbody></table><h4 id="_1-複数列インデックス" tabindex="-1">１．複数列インデックス <a class="header-anchor" href="#_1-複数列インデックス" aria-label="Permalink to &quot;１．複数列インデックス&quot;">​</a></h4><p>複数の列にまたがるインデックスのことを強調したい場合に、複数列インデックスと表現することがある。1列のみのインデックスは、単一列インデックスと呼ぶ。</p><p>推奨は以下の通り。</p><ul><li>パーティションキーはインデックス項目に含める必要はない</li><li>4つ以上の複数列インデックスを用いる場合は、アーキテクト／DBA確認を推奨する <ul><li>公式ドキュメント（※<a href="https://www.postgresql.jp/document/16/html/indexes-multicolumn.html" target="_blank" rel="noreferrer">11.3. 複数列インデックス</a>）にも4列以上のインデックスは不適切の可能性があると記載がある</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://www.postgresql.jp/document/16/html/indexes-multicolumn.html" target="_blank" rel="noreferrer">11.3. 複数列インデックス</a></p></div><h4 id="_2-ユニークインデックス" tabindex="-1">２．ユニークインデックス <a class="header-anchor" href="#_2-ユニークインデックス" aria-label="Permalink to &quot;２．ユニークインデックス&quot;">​</a></h4><p>UNIQUE制約をつけたインデックスのことを強調したい場合に、ユニークインデックスと呼ぶことがある。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UNIQUE INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (column [, ...]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>一意制約と機能上は同じである（一意制約も暗黙的にユニークインデックスが作成される）。一般的に両者の使い分けを決めることが望ましい。</p><p>推奨は以下の通り。</p><ul><li>一意制約ではなくユニークインデックスを用いる <ul><li>一意制約の方がデータモデルとして一意であることがより明示的であるが、ユニークインデックスの構成カラムの変更などの作業を考えると、ユニークインデックスの方が保守性で有利と考えられるため</li><li>後述するオプション・部分インデックス・式インデックスなどと組み合わせたいなど特殊対応が必要になる場合は、そもそもユニークインデックスで対応する必要がある</li></ul></li></ul><p>利用について、以下に注意する。</p><ul><li>パーティションテーブルの場合は、ユニークインデックスにパーティションキーを追加する必要がある（付与しないと作成する際に実行時エラーになる）</li><li>デフォルトでは、NULLの重複は許容される。許容しない場合はNULLS NOT DISTINCTを追加する</li><li>後述する、文字列型のデフォルト値を空文字にする方針だと、NULLとは異なり重複は許容されない</li></ul><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- NULL許容しないユニークインデックス</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UNIQUE INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> idx1_example</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULLS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DISTINCT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://www.postgresql.jp/docs/16/indexes-unique.html" target="_blank" rel="noreferrer">11.6. 一意インデックス</a></p></div><h4 id="_3-式に対するインデックス-関数インデックス" tabindex="-1">３．式に対するインデックス（関数インデックス） <a class="header-anchor" href="#_3-式に対するインデックス-関数インデックス" aria-label="Permalink to &quot;３．式に対するインデックス（関数インデックス）&quot;">​</a></h4><p>式インデックスは、式や関数の結果に基づいたインデックスである。例えば、受注で <code>unit_price（単価）</code> と <code>quantity（数量）</code> があり、これらの積に対してインデックスを作成できる。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> idx01_total_amount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> orders ((unit_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quantity));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>式インデックスを使わない場合は、<code>total_amount</code> カラムを追加しインデックスを貼り、アプリケーション側で行った計算結果を保存することになる。</p><p>以下に比較表を示す。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">式インデックス</th><th style="text-align:left;">個別カラムにインデックス追加</th></tr></thead><tbody><tr><td style="text-align:left;">DB負荷</td><td style="text-align:left;">⚠️データ更新時にインデックス更新が走るため、式の内容によっては高くなる</td><td style="text-align:left;">✅️アプリ側にオフロードするため、スケールする</td></tr><tr><td style="text-align:left;">ストレージ容量</td><td style="text-align:left;">✅️</td><td style="text-align:left;">⚠️計算結果を保存するカラム分、追加で容量が必要</td></tr><tr><td style="text-align:left;">データ整合性の維持</td><td style="text-align:left;">✅️DB側でインデックスが自動で更新されることを強制付けられる</td><td style="text-align:left;">⚠️アプリケーション側で担保する必要がある</td></tr><tr><td style="text-align:left;">保守性</td><td style="text-align:left;">⚠️複雑な計算結果の値を後で確認したい場合に不便である。後々、別の式の結果をインデックスに乗せたい場合、既存の式インデックスに気が付かず、カラム追加する方針を取ってしまう懸念がある</td><td style="text-align:left;">✅️開発者が意識しやすい。データがカラムに振り下ろされているので確認しやすい</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>式インデックスは原則、利用禁止 <ul><li>開発者にとって設計手法の揺れをなくすという観点に立つと、式インデックスにするか、個別カラムにするか判断基準を設けることが難しく、開発者によって揺れる懸念があるため</li></ul></li><li>リリース前後などでどうしても改修が難しいなどの場面で、最後の手段として式インデックスの利用を検討する。その際は利用について設計ドキュメントに注意書きを残すこと</li></ul><h4 id="_4-部分インデックス" tabindex="-1">４．部分インデックス <a class="header-anchor" href="#_4-部分インデックス" aria-label="Permalink to &quot;４．部分インデックス&quot;">​</a></h4><p>部分インデックスは、特定の条件にマッチする行だけに対してインデックスを作成する方法で、インデックスサイズを小さく抑えることができる。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- orderテーブルで、statusが完了になっているレコードのみに部分インデックスを貼る例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> idx_completed_orders</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order (order_date) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;completed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>推奨は以下の通り。</p><ul><li>最初から適用せず、チューニングが必要になったタイミングで利用する <ul><li>シンプルな構成を維持することで、設計の揺れを減らす／ハマりどころを減らす／チューニング条件を明瞭にするため</li></ul></li><li>データのカーディナリティとチューニングしたいSQLクエリをよく見極めた上で利用する</li><li>アーキテクト／DBAと相談の上で利用する</li></ul><h4 id="_5-カバリングインデックス" tabindex="-1">５．カバリングインデックス <a class="header-anchor" href="#_5-カバリングインデックス" aria-label="Permalink to &quot;５．カバリングインデックス&quot;">​</a></h4><p>カバリングインデックスは、クエリで必要とされるすべてのカラムの値を保持したインデックスを指す。いわゆる、 Index-only-scan になると実表を見なくて済むため、性能を向上させることができる。</p><p>推奨は以下の通り。</p><ul><li>原則、カバリングインデックスの利用禁止（最初からこれに頼った設計にしない）</li><li>どうしても性能を出す必要がある処理（画面検索などでシビアな要件がある）の場合に限り導入を検討する</li></ul><p>理由は以下の通り。</p><ul><li>インデックスサイズが想定以上に大きくなること</li><li>インデックス更新コストが増加すること</li><li>Index-only-scan になるための条件として、可視性マップ（VM：Visibility Map）で各ページのビットが立っている必要がある（更新が多いテーブルの場合、直近VACUUMされている必要がある）など、クエリ単体以外の考慮が必要</li><li>後述する、<a href="#_6-付加列インデックス">付加列インデックス</a>の方が細かい調整が効く分有利であるため</li></ul><h4 id="_6-付加列インデックス" tabindex="-1">６．付加列インデックス <a class="header-anchor" href="#_6-付加列インデックス" aria-label="Permalink to &quot;６．付加列インデックス&quot;">​</a></h4><p>付加列インデックスは、カバリングインデックスの一種と言える。検索用列に加え、値を返すだけの列もインデックスに含めることができる（つまり、付加された列は、ソートや検索には使用されない）。PostgreSQL 11以降で利用でき、次のようにINCLUDEを用いて指定する。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> idx_employee_with_include</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees (first_name) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INCLUDE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (last_name, department);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>カバリングインデックスと比較して以下の点で有利である。</p><ul><li>検索列としては必要ない列をインクルード列として追加できるため、インデックスのサイズを最小化しつつ、Index-only-scanを狙うことができる</li></ul><p>推奨は以下の通り。</p><ul><li>原則、利用禁止する <ul><li>課題や制約が、カバリングインデックスと同様であるため</li><li>万が一必要になった場合は、性能チューニングの最後の手段として、アーキテクト／DBAと相談する</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://www.postgresql.jp/docs/16/sql-createindex.html#:~:text=%E3%81%8C%E5%BF%85%E9%A0%88%E3%81%A7%E3%81%99%E3%80%82-,INCLUDE,-%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AEINCLUDE" target="_blank" rel="noreferrer">https://www.postgresql.jp/docs/16/sql-createindex.html</a> の「INCLUDE」オプション</li><li><a href="https://www.techscore.com/blog/2019/12/25/performance_index/" target="_blank" rel="noreferrer">パフォーマンスを考慮したIndex定義設計 | TECHSCORE BLOG</a></li></ul></div><h2 id="カラム" tabindex="-1">カラム <a class="header-anchor" href="#カラム" aria-label="Permalink to &quot;カラム&quot;">​</a></h2><h3 id="生成列" tabindex="-1">生成列 <a class="header-anchor" href="#生成列" aria-label="Permalink to &quot;生成列&quot;">​</a></h3><p>生成列は他の列から計算されるビューのようなものである。 生成列には格納と仮想の2種類があり、PostgreSQLは格納生成列のみサポートされている。</p><ul><li>格納生成列は実際にストレージが割り当てられる、マテリアライズドビューに似ている</li><li>仮想生成列は列の参照時に計算される、ビューに似ている</li></ul><p>以下の特徴がある。</p><ul><li>生成列に関して、明示的にINSERT/UPDATEができない（DEFAULTキーワードの指定は可能）</li><li>現行の行のみを指定できる</li><li>生成式はほかの生成列を参照できない</li><li>生成列はパーティションキーにできない</li><li>概念的には、生成列はBEFOREトリガーが走った後に更新される</li></ul><p>主なユースケース例は以下である。</p><ul><li>単価・数量カラムで「金額」を生成</li><li>氏名カラムから、「フルネーム」を生成</li><li>JSON項目のある要素を、別カラムとして生成する（下に例を記載）</li><li>pg_bigmで部分一致検索用途に、小文字変換した検索用のカラムを追加</li></ul><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- JSONBを含むテーブル</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> json_data_table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JSONB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TEXT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) STORED,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INTEGER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INTEGER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) STORED</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- データの挿入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json_data_table (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{&quot;name&quot;: &quot;John Doe&quot;, &quot;age&quot;: 30}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json_data_table (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{&quot;name&quot;: &quot;Jane Doe&quot;, &quot;age&quot;: 25}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 参照</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json_data_table;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id |   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   | age</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+----------+-----</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | John Doe |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | Jane Doe |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>推奨は以下の通り。</p><ul><li>DB論理設計については <a href="#導出属性">導出属性</a> 章の考え方に準じる</li><li>生成列は、原則利用しない <ul><li>生成列で実現したい要件は、ビジネス要件に近くアプリケーションライフサイクルに近いため</li><li>生成列の式変更のリリース作業が難しいため（AccessExclusiveLockと全レコード探索を必要とするため）</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://www.postgresql.jp/docs/16/ddl-generated-columns.html" target="_blank" rel="noreferrer">5.3. 生成列</a></li><li><a href="https://dba.stackexchange.com/questions/324349/is-it-possible-to-add-a-generated-column-to-a-large-table-without-locking-downti" target="_blank" rel="noreferrer">Is it possible to add a GENERATED COLUMN to a large table without locking/downtime on postgres? - Database Administrators Stack Exchange</a></li></ul></div><h3 id="データ型" tabindex="-1">データ型 <a class="header-anchor" href="#データ型" aria-label="Permalink to &quot;データ型&quot;">​</a></h3><p>PostgreSQLにはユーザーが使用可能な豊富な<a href="https://www.prisma.io/dataguide/postgresql/introduction-to-data-types" target="_blank" rel="noreferrer">データ型</a>が存在する。そのうえで、システムで利用するポリシーを統一することで開発生産性／保守性を高めることができる。例えば、商品コードを数値型、社員コードを文字列型で定義した場合、「コード値」でありながら型が揺れることとなり、DB利用者が少なからず混乱してしまう。設計の一貫性を保つためには、何かしらの方針が必要である。</p><p>推奨は以下の通り。</p><ul><li>利用するデータ型種別数をなるべく絞り込む方針とする <ul><li>設計者によってどの型を利用するか、判断のゆらぎをなるべく減らすため</li><li>DBスキーマからコード生成する場合や、独自ツールを開発するうえで、ハマりうる事項をなるべく減らすため</li><li>多少の非効率さ（データ容量、処理性能）より、業務システムでは上記の設計品質の安定性、開発生産性を重視するため</li></ul></li></ul><p>【凡例】✅️:必須で付与する</p><table tabindex="0"><thead><tr><th style="text-align:left;">カラム値種別</th><th style="text-align:left;">データ型</th><th style="text-align:left;">非NULL</th><th style="text-align:left;">Default</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">コード</td><td style="text-align:left;"><code>varchar(n)</code></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">商品コード、支店コードなど。 コード値が数字であっても、文字列として扱う。</td></tr><tr><td style="text-align:left;">区分</td><td style="text-align:left;"><code>varchar(n)</code></td><td style="text-align:left;">✔</td><td style="text-align:left;"></td><td style="text-align:left;">値が数字だとしても、区分はコードの一種として扱うため文字列とする（例: 性別区分: <code>Not known:0</code> <code>Male:1</code> <code>Female:2</code> <code>Not applicable:9</code>）。 上記ISO 5218で定義されている区分値については、数字以外取りうることが無いため、idとして格納するほうが本来効率的である（参考: <a href="https://lets.postgresql.jp/documents/technical/text-processing/1" target="_blank" rel="noreferrer">文字列型の使い分け - Let&#39;s POSTGRES</a>）。一方で、業務区分値は現時点で数字のみだったとしても、将来的に変化する可能性は否定できない。安全側に倒し、一部の非効率さより設計の一貫性を重視するため、varcharを用いる。</td></tr><tr><td style="text-align:left;">日時</td><td style="text-align:left;"><code>timestamptz</code> (<code>timestamp with time zone</code>)</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">タイムゾーン付きを選択する。</td></tr><tr><td style="text-align:left;">日付（yyyy-MM-dd）</td><td style="text-align:left;"><code>date</code></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"><code>date</code> ではなく <code>varchar(10)</code> を用いる流派もあるが、好みの問題である。より入る値が明示的となるdate型を利用する。 なお、日付項目はパーティションキーとして利用することが多いが、date、varcharのどちらを利用しても機能としては問題ない。パーティションキーの場合はNOT NULL制約を付ける。</td></tr><tr><td style="text-align:left;">年月（yyyy-MM）</td><td style="text-align:left;"><code>varchar(7)</code></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">月次パーティションを作成する場合に利用することが多いカラムである。パーティションキーの場合は<code>NOT NULL</code>制約を付ける。 ハイフンをいれるかどうかだが、PostgreSQLのデフォルト日付フォーマットが <code>yyyy-MM-dd</code> の拡張書式であるため、それに合わせる</td></tr><tr><td style="text-align:left;">数量</td><td style="text-align:left;"><code>bigint</code> <code>integer</code></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">在庫数／受発注数／入出荷数など。連番がbigserialを用いる規則であるため、それに相当するカラムの場合はbigintを利用する。 なお、業務およびシステム上、integerで事足りる場合はこれらを利用することも許容する。デフォルト値は0にしない</td></tr><tr><td style="text-align:left;">連番</td><td style="text-align:left;"><code>bigint</code></td><td style="text-align:left;">✔</td><td style="text-align:left;"></td><td style="text-align:left;"><code>integer</code>/<code>serial</code>の場合、一巡によりシーケンスのリセットや後々<code>bigint</code>/<code>bigserial</code>に切り替えるなどの作業が発生する懸念がある。安全側に倒すため<code>bigint</code>を用いる。IDENTITY列にすることで<code>serial</code>は利用しない</td></tr><tr><td style="text-align:left;">係数</td><td style="text-align:left;"><code>numeric(p, s)</code></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">割引率／消費税率 など。floatは利用しない。要件次第だがデフォルト値は0にしない</td></tr><tr><td style="text-align:left;">金額／計算結果</td><td style="text-align:left;"><code>numeric(p, s)</code></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">支払金額／請求金額／使用量など、正確な計算結果の格納が求められる場合。要件次第だがデフォルト値は0にしない</td></tr><tr><td style="text-align:left;">文字列</td><td style="text-align:left;"><code>varchar(n)</code></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">名称／説明文など。textは桁数が不明となり、システム間連携やデータサイズ見積もりで扱いにくいため、使用しない</td></tr><tr><td style="text-align:left;">フラグ</td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">✔</td><td style="text-align:left;">false</td><td style="text-align:left;">必ず<code>NOT NULL</code>制約を付与する。MySQLではbooleanはtinyint型に置き換えられる。tinyintは0と1以外の値を格納することが可能なので、厳密なboolean型を扱うには挿入・更新時に値チェックが必要になることから、MySQLではbooleanの利用は考慮が必要である。PostgreSQLでは上記の問題ないとして推奨する。 フラグの表現として、<code>char(1)</code>やsmallintで表現する流派もあるが、入力値が明確になるという点でbooleanを用いる。<a href="#boolean型を別の型にできないか考える">boolean型を別の型にできないか考える</a> 章も参考にする</td></tr><tr><td style="text-align:left;">UUID</td><td style="text-align:left;"><code>uuid</code></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"><code>UUID</code>型か<code>varchar(36)</code>の選択があるが、<code>UUID</code>型の場合は16byteで済み、性能／コスト上のメリットが大きい。なお、<code>gen_random_uuid()</code>も<code>UUID</code>型である</td></tr><tr><td style="text-align:left;">配列</td><td style="text-align:left;"><code>[]</code></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">原則、配列は正規化を行い利用しない。もし、利用する場合は<code>json</code>/<code>jsonb</code> 型と同様の利用方針とする。</td></tr><tr><td style="text-align:left;">構造化データ</td><td style="text-align:left;"><code>json</code> <code>jsonb</code></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">原則JSONデータは正規化を行い、<code>json</code>/<code>jsonb</code> 型は利用しない。 ただし、次の1、2のような場合は許容する 1️⃣外部のWeb API応答の生データをログ的に保存したい 2️⃣システム間連携で、自システムで利用せず横流しするだけの場合<br> ※JSON型は挿入が高速、JSONB型は検索が高速であるため、例えば2️⃣のケースではJSON型を利用する</td></tr></tbody></table><p>なお、次のデータ型は利用しない。理由は以下の通り。</p><ul><li><code>timestamp</code>（ timestamp <strong>without</strong> time zone） <ul><li>代わりに <code>timestamptz</code>（timestamp <strong>with</strong> time zone）を用いる</li><li>Web APIなど異なるタイムゾーンの日時情報の入力があり、アプリケーション側でタイムゾーンの正規化が行われなかったとしても正しい時間で保存／利用できるため</li><li>海外拠点でのアプリケーション利用など、異なるタイムゾーンでの利用時にも対応しやすくなるため</li></ul></li><li><code>char</code><ul><li>代わりに <code>varchar(n)</code> を用いる</li><li>データサイズの削減メリットがあり、対象のカラム値が最小桁数＝最大桁数 である場合に、明示するという目的で<code>char</code> を利用をしたい場合がある</li><li>テストデータ投入・データパッチ・アプリケーション不備等が原因で、桁不足があると末尾にスペースが入る。それにより動作検証でハマる事が多い</li><li>本ガイドラインでは後者の開発生産性観点を優先とし、利用を禁止とする</li></ul></li><li><code>text</code> および長さの指定がない <code>varchar</code><ul><li>代わりに長さを指定したvarcharを用いる</li><li><a href="https://wiki.postgresql.org/wiki/Don%27t_Do_This#Don.27t_use_varchar.28n.29_by_default" target="_blank" rel="noreferrer">Don&#39;t Do This - PostgreSQL wiki</a> には、<code>varchar</code> ではなく <code>text</code> を使おうととあるが、これに従わず本ガイドラインでは禁止とする。</li><li>システム開発、特に基幹系やそれに近い領域であると、システム間の連携が通常であり、連携用のWeb APIやファイルのスキーマ定義が求められる。その際に桁数の上限が存在しないとすると、連携先システムの都合（採用しているDBなどの制約）によっては対処ができない場合があるため</li><li>桁数があると、テーブルサイズの見積もりにも役立つ</li><li><code>text</code> 型にindexを貼ると、データサイズによってはエラーになるため、通常インデックスを貼る用途は無いと考えられるが、万が一利用する場合は注意する（<a href="https://zenn.dev/onozaty/articles/postgresql-text-index" target="_blank" rel="noreferrer">https://zenn.dev/onozaty/articles/postgresql-text-index</a>）</li></ul></li><li><code>serial</code><ul><li>代わりに <code>bigint</code>（IDENTITYカラム）を用いる</li><li>当初は呼び出し数が少ないと想定しても、想定以上のアクセス数が来ることや稼働が続くと、<code>integer</code>/<code>serial</code>で不足するケースも否定できない</li><li>シーケンス値が1周すると、アプリケーション改修が大変になることが多いこと。型を <code>integer</code>/<code>serial</code> -&gt; <code>bigint</code>/<code>bigserial</code> に変更する運用の難易度が高いため。最初から保護主義的に <code>bigint</code> を採用する</li><li><code>serial</code> の代わりに、よりSQL標準であるIDENTITY列を利用する</li></ul></li><li><code>smallint</code><ul><li>代わりに <code>integer</code> または <code>bigint</code> を用いる</li><li>設計者に選択させる余地をできる限り減らすため</li></ul></li><li><code>float</code><ul><li>代わりに <code>double</code> を用いる</li><li>ドキュメント（<a href="https://www.postgresql.org/docs/current/datatype-numeric.html" target="_blank" rel="noreferrer">PostgreSQL: Documentation: 17: 8.1. Numeric Types</a>）によると、<code>float</code> 型の精度は小数点6桁程度、<code>double</code> 型は15桁程度。DBの型がJavaやGoなどの型にマッピングされることが多く、計算結果の精度の影響することを考えると、最初からdouble型を利用し、精度落ちを事前に回避する方針とする</li></ul></li><li><code>money</code>（通貨）型 <ul><li>代わりに桁数と適切な精度を設定した <code>numeric</code> を用いる</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title"><code>integer</code> ではなく <code>bigint</code> に統一すべきかどうか</p><p>整数型はintegerとbigintを使い分けることが本ガイドラインの推奨だが、設計の揺れを防ぐためや、考慮漏れなどで<code>integer</code> から <code>bigint</code> への型変更を完全に避けるために、多少のオーバーヘッドを犠牲に<code>bigint</code> に統一する考え方もある。これについては意見が分かれることが多く、採用についてはシステムのワークロードや設計上のトレードオフを考慮して検討すること。</p></div><div class="warning custom-block"><p class="custom-block-title">char(n) 型にハマる</p><p><code>char(n)</code> 型はカラム値が桁数未満の場合に、半角スペースでパディングされる仕様がある（桁数超過の場合はエラーになるが、桁数以下の場合はエラーにならない）。 そのため、単体テストデータの比較などで、見た目は正しいが半角スペースの存在で値が不一致となり、テストが落ちてしまうことがある。初心者が良く陥るミスの1つであるが、初見殺しである。</p><p>以下に例を示す。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sales_category</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    code_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    category_code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 固定長8文字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- ダミーデータ登録（5文字）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sales_category (category_code) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DUMMY&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>SQLで検索すると、表示上は <code>DUMMY</code> に見えるが、<code>CONCAT()</code> で文字列結合すると半角スペースが3桁でパディングされた値に <code>123</code> が追加されていることがわかる。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> category_code, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CONCAT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(category_code, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sales_category;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> category_code |  concat</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---------------+-----------</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DUMMY         | DUMMY   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> row</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>回避策としては正しく宣言された桁数（先程の例では8文字）でテストデータを登録することが考えられるが、開発者の負荷が高まってしまう。そのため <code>varchar(n)</code> を代わりに使い、発生原因を根本から無くすことを推奨する。</p></div><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://wiki.postgresql.org/wiki/Don%27t_Do_This" target="_blank" rel="noreferrer">Don&#39;t Do This - PostgreSQL wiki</a></p></div><h3 id="identity列" tabindex="-1">IDENTITY列 <a class="header-anchor" href="#identity列" aria-label="Permalink to &quot;IDENTITY列&quot;">​</a></h3><p>PostgreSQL 10から、挿入する列に数値を割り当てるための構文「GENERATED AS IDENTITY」構文が追加された。SERIAL／BIGSERIAL型と似ているが、SQL標準準拠である点が異なる。</p><p>以下が定義例である。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    color_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    color_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>また、IDENTITY列には、<code>BY DEFAULT</code> <code>ALWAYS</code> のオプションがある。</p><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">説明</th><th style="text-align:left;">備考</th></tr></thead><tbody><tr><td style="text-align:left;"><code>BY DEFAULT</code></td><td style="text-align:left;">アプリケーション側で明示的に値を指定可能。<code>SERIAL</code>／<code>BIGSERIAL</code> と同等の挙動</td><td style="text-align:left;">アプリケーション側からの誤登録がより起こりやすい懸念</td></tr><tr><td style="text-align:left;"><code>ALWAYS</code></td><td style="text-align:left;">アプリケーション側で明示的に指定が不可。<br>ただし、INSERT文に、<code>OVERRIDING SYSTEM VALUE</code> を明示的に記載すれば登録可能</td><td style="text-align:left;">COPYを利用した場合は、IDENTITY列に明示的に値を指定しても登録可</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li><code>SERIAL</code>/<code>BIGSERIAL</code>ではなく、よりSQL標準準拠なIDENTITY列を利用する</li><li><code>ALWAYS</code>オプションを利用することで、アプリケーション側からの誤登録を防ぐ</li></ul><p>次のように、<code>DEFAULT</code> キーワードを指定して、明示的なクエリを記載可能だが、<code>DEFAULT</code> の記載は禁止とする。</p><p>例: color_idにDEFAULTを指定</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> color (color_id, color_name) OVERRIDING </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SYSTEM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VALUE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Black&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">利用時の注意事項</p><p>テーブル名、カラム名がそれぞれ29文字以上の場合、シーケンス名がオミットされて作成される。29文字超過時に自動生成された命名を利用するか、明示的にシーケンス名を変えるのか、一律体系を変えるのかはチームごとにポリシーを作成し統一すること。</p></div><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://www.sraoss.co.jp/tech-blog/pgsql/10-0/" target="_blank" rel="noreferrer">PostgreSQL 10 に関する技術情報</a></li><li><a href="https://www.postgresql.org/docs/current/ddl-identity-columns.html" target="_blank" rel="noreferrer">PostgreSQL: Documentation: 17: 5.3. Identity Columns</a></li><li><a href="https://future-architect.github.io/articles/20241113a/" target="_blank" rel="noreferrer">PostgreSQLで連番を自動生成するIDENTITY列。SERIALとどちらを使うべきか | フューチャー技術ブログ</a></li></ul></div><h3 id="文字列のデフォルト値" tabindex="-1">文字列のデフォルト値 <a class="header-anchor" href="#文字列のデフォルト値" aria-label="Permalink to &quot;文字列のデフォルト値&quot;">​</a></h3><p>文字列型のデフォルト値については、以下の3流派が存在する。</p><table tabindex="0"><thead><tr><th style="text-align:left;">項目</th><th style="text-align:left;">１．何もしない</th><th style="text-align:left;">２．空文字のみに限定</th><th style="text-align:left;">３．NULLのみに限定</th></tr></thead><tbody><tr><td style="text-align:left;">デフォルト値</td><td style="text-align:left;">任意</td><td style="text-align:left;">空文字</td><td style="text-align:left;">NULL</td></tr><tr><td style="text-align:left;">制約</td><td style="text-align:left;">なにもしない</td><td style="text-align:left;">NOT NULL制約</td><td style="text-align:left;">CHECK制約で空文字を拒否する</td></tr><tr><td style="text-align:left;">備考</td><td style="text-align:left;">空文字／NULLを併用することになる。<br>SQLで文字列結合する際にエスケープの考慮が必要</td><td style="text-align:left;">WHERE句では IS NULLを使わないよう注意</td><td style="text-align:left;">Oracle DBの挙動に近づけたい場合に有効</td></tr></tbody></table><p>これらの対応が求められた背景を具体例とともに説明する。</p><ul><li><code>項目A || 項目B</code> とした場合、1の場合はどちらかがNULLだと連結結果もNULLとなる</li><li>回避するためには、 <code>coalesce(項目A) || coalesce(項目B)</code> や <code>concat(項目A, 項目B)</code> といった処理が必要</li><li>デフォルト値を空文字にした場合、<code>項目A || 項目B</code>としても、空文字でない方の項目の値が取得可能となり、機能横断的な考慮（≒NULL許容のカラムを文字列結合している全クエリで、適切な関数を使っているかのチェック）が不要にできる</li></ul><p>1、2の手法のメリット、デメリットを下表にまとめる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">観点</th><th style="text-align:left;">１．何もしない</th><th style="text-align:left;">２．空文字のみに限定</th></tr></thead><tbody><tr><td style="text-align:left;">文字列結合</td><td style="text-align:left;"><code>concat(項目A, 項目B)</code> などのエスケープ</td><td style="text-align:left;"><code>項目A || 項目B</code> で実装可</td></tr><tr><td style="text-align:left;">初期値の比較</td><td style="text-align:left;"><code>IS NULL</code>／<code>IS NOT NULL</code> を指定</td><td style="text-align:left;"><code>= &#39;&#39;</code> <code>&lt;&gt; &#39;&#39;</code> などを指定する。数値や日付型は IS NULL などなので使い分けの注意が必要</td></tr><tr><td style="text-align:left;">ストレージ容量</td><td style="text-align:left;">有利</td><td style="text-align:left;">空文字という値を確保するメタデータ分、わずかに不利</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>新規構築（≒Oracle DBを利用したシステムのリプレイスではない）であれば、1または2を選択することが合理的であり、3は選択しない</li><li>より品質が安定すると考えられる2を採用する <ul><li>NOT NULLの文字列カラムと、NULLを許容するカラムで回避処理の有無を開発者が個別に判断するのは抜け漏れが生じる懸念があるし、レビュアーの負荷も大きい</li><li>NOT NULLの文字列カラムも含めて、一律エスケープさせるのは手間がかかり、可読性も低いと考えられるため</li><li>INSERT／UPDATE時にNULLを空文字にエスケープする処理は、アプリケーション側のフレームワークなどで一律でカバーしやすいため</li></ul></li></ul><p>何かしらの事情で2ではなく1の手法を採用する場合は、 SQLによる文字列結合は一律<code>concat()</code> を用い、 <code>||</code> での文字列結合を禁止することを推奨する。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   concat</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-------------</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hello world</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> row</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>文字列型を空文字にする場合は、以下の点に注意する。</p><ul><li>文字列カラムがNOT NULLからデフォルト値を空文字にした場合に、ユニークインデックスがあると、NULLとは異なり重複が許容されない。通常NULLになりえる項目を含んだユニークインデックスを作成することは無いと考えられるが留意すること</li></ul><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- sampleテーブルにユニークインデックスを追加</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">postgres</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">postgres</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UNIQUE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sample_name_idx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 空文字の場合は、重複を許容しない</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">postgres</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">postgres</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERROR:  duplicate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> violates </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unique</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> constraint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sample_name_idx&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DETAIL:  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() already </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">exists</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- NULLの場合は許容される</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">postgres</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">postgres</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>この挙動はOracleと異なる。OracleではNULL値でも重複を許容しない。PostgreSQLにてOracle風の動作をさせたい場合は、<code>NULLS NOT DISTINCT</code> オプションを利用する必要がある。</p><h3 id="json型" tabindex="-1">JSON型 <a class="header-anchor" href="#json型" aria-label="Permalink to &quot;JSON型&quot;">​</a></h3><p>JSONデータ型には <code>json</code> <code>jsonb</code>型の2種類が存在し、それぞれの特徴は以下である。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">１．json</th><th style="text-align:left;">２．jsonb</th></tr></thead><tbody><tr><td style="text-align:left;">導入バージョン</td><td style="text-align:left;">9.2</td><td style="text-align:left;">9.4</td></tr><tr><td style="text-align:left;">得意なワークロード</td><td style="text-align:left;">挿入</td><td style="text-align:left;">検索</td></tr><tr><td style="text-align:left;">インデックス作成</td><td style="text-align:left;">非対応</td><td style="text-align:left;">対応（GINインデックス）</td></tr><tr><td style="text-align:left;">重複キー</td><td style="text-align:left;">保持する</td><td style="text-align:left;">最後のキーのみ保持</td></tr><tr><td style="text-align:left;">キーの順序</td><td style="text-align:left;">保持</td><td style="text-align:left;">保持しない</td></tr></tbody></table><p>ユースケースとしては次のようなケースが考えられる。</p><ul><li>ログ保存: アプリのJSON Lines形式のログをDBに格納したいケース。通常はAWS CloudWatch Logs、S3などにログを格納すると想定するが、運用保守観点で部分的にログをDBに格納したいケースが考えられる。外部のWeb API応答の生データをログ的に保存したい場合も該当する</li><li>システム間連携で、自システムで利用せず横流しするだけの場合</li><li>設定データ保存: 取り出して表示するだけの設定データやテンプレート</li></ul><h4 id="jsonデータ型の利用方針" tabindex="-1">JSONデータ型の利用方針 <a class="header-anchor" href="#jsonデータ型の利用方針" aria-label="Permalink to &quot;JSONデータ型の利用方針&quot;">​</a></h4><p>原則、構造化データは正規化して格納する方針であるため<code>json</code> <code>jsonb</code>型の利用は非推奨とする。一方で、システム上は直接利用せず、画面や外部システムで横流しするだけのようなケースは<code>json</code> <code>jsonb</code>型の利用を許容する。json型の方が挿入速度で有利であるが、jsonb型の方がバイナリ形式であるため、データ容量を抑えられる可能性があるため、処理性能とストレージ費用のどちらを優先するかで判断する。</p><p>バリデーションについて、以下のようにCHECK制約を付けることは可能であるが、性能劣化の懸念やスキーママイグレーション時のALTERによるテーブルロックなど、運用の難易度が上がることが多い。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> api_response_log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsonb,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    CHECK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (jsonb_typeof(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;number&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsonb_typeof(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>また、外部キー制約を指定できないなどの制限もある。</p><p>そのため、JSONのスキーマのバリデーションは、アプリケーション側でJSON Schemaなどを用いて実施することを必須とする。</p><p>その他、利用上の注意点は以下である。</p><ul><li><code>json</code> <code>jsonb</code>型カラムのスキーマについては、別途テーブル定義書にJSON Schemaのパスなどリンクし、ドキュメントで管理する（野放図にしない）</li><li>入力のチェックは、PostgreSQLのCHECK制約ではなく、アプリケーション側で行う</li><li><code>json</code> <code>jsonb</code>型カラムに対して、途中でインデックスを貼りたくなった場合、正規化する。原則インデックスで検索させない <ul><li>正規化がシステム側の制御下にない場合（例えば、プラグインなどの仕組み、3rdパーティ製のツールとの連携など）は、例外として別途検討する</li></ul></li></ul><h3 id="ラージオブジェクト" tabindex="-1">ラージオブジェクト <a class="header-anchor" href="#ラージオブジェクト" aria-label="Permalink to &quot;ラージオブジェクト&quot;">​</a></h3><p>PostgreSQLには BLOB という名前の型は存在せず、類似の仕組みに「ラージオブジェクト」があり、実質的にBLOBの役割を果たしている。巨大なバイナリファイルなどラージオブジェクトを利用することで、ストリーミングアクセスで操作することが可能である。DB上で管理することで、以下のメリットがあるとされる。</p><ul><li>レコードとファイルを同一トランザクションで管理できる</li><li>レコード削除でファイルの実態も削除可能</li><li>ファイルもレコードと同一アクセス権限で管理できる</li><li>バックアップがDB側の機能だけではなく、外部ストレージ側でも行う必要がある</li></ul><p>また、レコードにファイルのリンクだけ格納する設計は「ファントムファイル」 と呼ばれアンチパターンであるとされる。</p><p>推奨は以下の通り。</p><ul><li>巨大になりえるバイナリファイルはオブジェクトストレージに保存し、DB側はパスのみ保存する <ul><li>オブジェクトストレージの容量単価は通常、DBより安価であるため</li><li>ユーザー向けのダウンロードは、オブジェクトストレージの署名付きURLを用いて容易・セキュアに扱えるため</li><li>オブジェクトストレージ側が、トランザクションで守られないデメリットはあるものの、エラーハンドリング、リトライなどに気をつければ実用上問題ないことが多い</li><li>オブジェクトストレージ側でも権限管理が必要なため手間が増えるのは事実だが、DBの権限とは独立してファイルへのアクセスを厳密に管理できるとも言える</li><li>オブジェクトストレージ側の、バックアップ機能は豊富に存在するため。また、DB側のバックアップ時間を短縮できる可能性がある</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://aws.amazon.com/jp/about-aws/whats-new/2022/06/amazon-aurora-postgresql-supports-lo-module/" target="_blank" rel="noreferrer">Amazon Aurora PostgreSQL が LO モジュールをサポート</a>のアナウンスがあるように、ラージオブジェクトは2022年にAmazon Auroraでもサポートが始まった。</p></div><h2 id="独自型" tabindex="-1">独自型 <a class="header-anchor" href="#独自型" aria-label="Permalink to &quot;独自型&quot;">​</a></h2><h3 id="domain" tabindex="-1">DOMAIN <a class="header-anchor" href="#domain" aria-label="Permalink to &quot;DOMAIN&quot;">​</a></h3><p>CREATE DOMAINで新しいデータドメイン（特別な制約（設定可能な値集合に対する制限）を持つ）を作成できる。DOMAINの利用によりデータの整合性を保ち、コードの再利用性と読みやすさを向上させることができる。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 正の数値を持つドメインとテーブルを作成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DOMAIN</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> posint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> CHECK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (id posint);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 成功</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> example </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 失敗</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> example </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>便利なDOMAINであるが、以下の観点から利用は禁止とする。</p><ul><li>DOMAINを何かしらの理由で変更が必要になった場合、ALTER DOMAINで定義が変更可能であるが、該当のDOMAINを利用しているテーブルが新しい制約に準拠しているかチェックするため、テーブルロックがかかってしまうため、メンテナンスウィンドウが必要となる</li><li>ドメインをvarcharなどの基本型に戻す場合は、ALTER TABLEを行うことになるが、<code>ACCESS EXCLUSIVE</code>ロックを取ってしまい、メンテナンスウィンドウが必要となる</li><li>DOMAINの内容はビジネスロジックと密接であることが多く、リリースライフサイクルがアプリケーションコード側と一致することが多い。通常、DBのスキーママイグレーションとアプリケーションでは、アプリケーション側のリリースのほうが容易であるため、アプリケーション側にバリデーションを寄せる <ul><li>データ整合性に対する全てのバリデーションをDB層に寄せることはそもそも不可能であり、アプリケーション側でバリデーション処理が残るのであればそちらに寄せる設計ポリシーにすることは妥当である</li></ul></li><li>データ移行など大量データの取り扱いで性能劣化の懸念がある</li></ul><h3 id="enum" tabindex="-1">ENUM <a class="header-anchor" href="#enum" aria-label="Permalink to &quot;ENUM&quot;">​</a></h3><p>以下のように、独自のENUM型を作成しカラムの制約として利用できる。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> order_state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ENUM (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Pending&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Processing&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Shipped&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Delivered&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    customer_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INTEGER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TIMESTAMPTZ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order_status order_state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>適切にENUMを利用することで、DB層で整合性が保たれメリットも大きい。</p><p>ENUMのメンテナンスは作業内容によって以下の制約がある。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">作業内容</th><th style="text-align:left;">メンテナンスウィンドウ</th></tr></thead><tbody><tr><td style="text-align:left;">１．ENUMの区分値リネーム</td><td style="text-align:left;">ALTER TYPE name ADD VALUE …</td><td style="text-align:left;">瞬時</td></tr><tr><td style="text-align:left;">２．ENUMの区分値追加</td><td style="text-align:left;">ALTER TYPE name RENAME VALUE…</td><td style="text-align:left;">瞬時</td></tr><tr><td style="text-align:left;">３．ENUMの区分値削除</td><td style="text-align:left;">ALTER TYPEで削除する構文が提供されていないため、元のENUMをリネーム、新規でENUM作成、ALTER TABLEで変更。<br>-- ENUMをリネーム<br> ALTER TYPE order RENAME TO order_old;<br> -- 区分値を減らしたENUMを作成<br> CREATE TYPE order_state AS ENUM (&#39;Pending&#39;, &#39;Processing&#39;, &#39;Shipped&#39;);<br> -- テーブル側のカラムの方変更<br> ALTER TABLE order ALTER COLUMN order_status TYPE mood USING order_status::text::order_state;</td><td style="text-align:left;">ALTER TABLEで、ACCESS EXLUSIVEロックを取ってしまう</td></tr></tbody></table><p>ENUMの削除の代わりに、CHECK制約で代替することも考えられる。CHECK制約の場合は、区分値の削除時でもロックを限定的にできる（※NOT VALID、VALIDATEを利用すれば）ためである。その場合はCHECK制約側の利用ポリシーに依存する。</p><p>推奨は以下の通り。</p><ul><li>ENUMは原則利用を禁止する <ul><li>区分値の削除のメンテナンスが大変であるため</li></ul></li><li>区分値削除が必ず発生しないカラムに関しての、限定的な利用はDBA／アーキと相談の上で利用を許容する <ul><li>同じ区分値だが、ENUMを使うカラム・使わないカラムが揺れないように、ポリシーを決定の上で検討すること</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://www.postgresql.jp/docs/16/sql-altertype.html" target="_blank" rel="noreferrer">ALTER TYPE</a></li><li><a href="https://making.close.com/posts/native-enums-or-check-constraints-in-postgresql" target="_blank" rel="noreferrer">Native enums or CHECK constraints in PostgreSQL? | The Making of Close</a></li></ul></div><h3 id="ltree" tabindex="-1">ltree <a class="header-anchor" href="#ltree" aria-label="Permalink to &quot;ltree&quot;">​</a></h3><p>ltreeとは、格納されているデータのラベルを階層型ツリー構造で表すためのデータ型である。PostgreSQL拡張を有効にすると利用できる。Amazon RDS、Google CloudSQLなどで利用可能である。</p><p>推奨は以下の通り。</p><ul><li>新規開発者の負荷が高いため通常利用しない</li><li>性能・開発生産性上、大きなメリットがある場合は、アーキ／DBAと相談して決定する</li><li>特定のPostgreSQL拡張を有効にすることで利用できるデータ型についても同様である</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://tech-blog.rakus.co.jp/entry/20241008/postgresql" target="_blank" rel="noreferrer">Postgresqlのltreeを活用した階層構造の便利な利用法 - RAKUS Developers Blog | ラクス エンジニアブログ</a></p></div><h2 id="制約" tabindex="-1">制約 <a class="header-anchor" href="#制約" aria-label="Permalink to &quot;制約&quot;">​</a></h2><h3 id="主キー制約" tabindex="-1">主キー制約 <a class="header-anchor" href="#主キー制約" aria-label="Permalink to &quot;主キー制約&quot;">​</a></h3><p>利用について制限はない。データモデルに即して適切に設定すること。 「一意制約」 「ユニークインデックス」の章と関連があるため、参照すること。</p><h3 id="外部キー制約" tabindex="-1">外部キー制約 <a class="header-anchor" href="#外部キー制約" aria-label="Permalink to &quot;外部キー制約&quot;">​</a></h3><p>外部キー制約を用いることで、列の値が他テーブルの値と一致しなければならないことを指定することで、テーブル間の参照整合性を維持できる。アプリケーションではなく、DB層でデータ整合性を守れるため利点は大きい。</p><p>以下は売上ヘッダ／売上明細で外部キー制約を使った例である。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sales_header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sales_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sales_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    customer_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    total_amount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NUMERIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    created_at </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TIMESTAMP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CURRENT_TIMESTAMP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sales_detail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    detail_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sales_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sales_item_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    quantity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sales_unit_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NUMERIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    amount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NUMERIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    created_at </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TIMESTAMP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CURRENT_TIMESTAMP,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    CONSTRAINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fk_sales_detail_sales_header </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FOREIGN KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (sales_id)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        REFERENCES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sales_header(sales_id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>推奨は以下の通り。</p><ul><li>論理DB設計までは、論理設計として外部キー制約を作成する</li><li>実テーブルへのデプロイを行わない</li></ul><p>理由は以下の通り。</p><table tabindex="0"><thead><tr><th style="text-align:left;">観点</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">設計の揺れや間違い</td><td style="text-align:left;">外部キー参照の設計に揺れが生じやすい点がある。例えば、外部キー参照を付ける／付けないの判断基準を明確に設けることが難しい</td></tr><tr><td style="text-align:left;">適切に設計を貫くコスト</td><td style="text-align:left;">「関連がある=外部キー制約をかける」が適切ではない。例えばユーザアカウントと注文履歴は関連はあるものの、ユーザアカウントを削除した場合にも注文履歴は監査上残しておきたい場合がある。この例は分かりやすいが、より複雑なドメインでは設計ミスが発生しやすくなる（もちろん常に有識者をアサインし判断すべきだが、PJライフサイクルによっては不在になることもある）。</td></tr><tr><td style="text-align:left;">単体/性能テスト時のデータ登録</td><td style="text-align:left;">例えば、売上ヘッダ/売上明細の親子テーブルが存在するが、親または子しか参照していない機能をテストする場合にも、どちらのテーブルに対してダミーデータを登録する手間がかかる。回避するためにはテスト時のみ外部キーなど制約を外す運用が必要だが、これを非推奨としたい前提がある。</td></tr><tr><td style="text-align:left;">データ移行</td><td style="text-align:left;">特に初期データ移行などCOPYで大量データを扱う際に課題になりやすい。外部キー制約を一時的に外すという手間がある。</td></tr><tr><td style="text-align:left;">誤ったCASCADE理解による事故懸念</td><td style="text-align:left;">ON DELETE、ON UPDATEなどの挙動を理解しないと、誤ったデータ削除をしてしまう懸念がある</td></tr><tr><td style="text-align:left;">インデックス作成有無のハマり</td><td style="text-align:left;">外部キー制約をつけた場合に、参照先／元の両方にインデックス追加が必要。これは教育やツール（Linter）などで回避可能だが、ケアできない場合は性能劣化の懸念がある</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://qiita.com/masudakz/items/ecbfc0f4ace2a7cef0f0" target="_blank" rel="noreferrer">PostgreSQLアンチパターン：外部キー制約の更新コストを見くびる - Qiita</a></p></div><h3 id="not-null制約" tabindex="-1">NOT NULL制約 <a class="header-anchor" href="#not-null制約" aria-label="Permalink to &quot;NOT NULL制約&quot;">​</a></h3><p>データモデルに合わせて適切に設定する。 <a href="#データ型">データ型</a> 章に関連する記載があるので、参照すること。</p><p>基本姿勢としてはできる限りNOT NULL化できないか考えることを推奨する。</p><p>例えば、<a href="https://mickindex.sakura.ne.jp/database/db_getout_null.html" target="_blank" rel="noreferrer">NULL撲滅委員会</a> の記事には、「未コード化用コード」の例がある。</p><blockquote><p>ISO の性別コードでは、１：男性、２：女性の他に、０：未知、９：適用不能という二つの未コード化用コードが体系に組み込まれています。</p><p>コード９は法人に使われます。</p><p>これは素晴らしい解決です。図らずもコッドが分類した二つの NULL、未知と適用不能に対応するコードが採用されています。</p></blockquote><p>上記のように、「不明」を示す区分値を用意できないか検討する。</p><div class="tip custom-block"><p class="custom-block-title">一時保存（下書き、仮登録）したいため、NOT NULL制約を付けられない？</p><p>NOT NULL制約の設計において、「一時保存（下書き、仮登録）といったステータス遷移があるため、画面で入力項目の全てを埋めてもらうことが難しい。そのため、NOT NULL制約の付与ができない」といった話題はしばしば行われる。</p><p>しかし、一時保存（下書き、仮登録）状態をマスタ・トランとして保存するのではなく、ワークテーブル等に分離しておくと、本体側のテーブルにNOT NULL制約を付与できる可能性がある。一概に別テーブルとして分離することが正しい訳ではなくケースバイケースであるが、一時保存（下書き、仮登録）したいという要件のためにNOT NULL制約を全て外す必要がある場合、別テーブル化できないかを第一に検討すべきである。</p></div><h3 id="検査制約-check制約" tabindex="-1">検査制約（CHECK制約） <a class="header-anchor" href="#検査制約-check制約" aria-label="Permalink to &quot;検査制約（CHECK制約）&quot;">​</a></h3><p>以下のようなCHECK制約を用いることで、データ整合性を保証するとともに、許容される値の範囲や条件の設計意図を明確に示すことができる。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    start_date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    CHECK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">start_date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> end_date)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contract_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    phone_number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CHECK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (phone_number ~ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;^\\d{3}-\\d{3}-\\d{4}$&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>適切にCHECK制約を利用することで、DB層で整合性が保たれメリットも大きいとされる。</p><p>推奨は以下の通り。</p><ul><li>CHECK制約の利用を禁止する（理由は <a href="#domain">DOMAIN</a> 章と同様の観点から）</li></ul><h3 id="一意制約" tabindex="-1">一意制約 <a class="header-anchor" href="#一意制約" aria-label="Permalink to &quot;一意制約&quot;">​</a></h3><p>一意制約を作成すると、内部的にはユニークインデックスが作成される。一般的に、一意制約を用いるかユニークインデックスを用いるか使い分けを決めることが望ましい。</p><p>推奨は以下の通り。</p><ul><li>一意制約ではなく、ユニークインデックスを利用する <ul><li>一意制約対象のカラムの追加／削除などのメンテナンスはゼロにできないと考えられる。そのため、一意制約で暗黙的に作成されるインデックスではなく、明示的に作成されるべきと考えられるため</li></ul></li></ul><p><a href="#_2-ユニークインデックス">ユニークインデックス</a> の章を参照する。</p><h3 id="排他制約" tabindex="-1">排他制約 <a class="header-anchor" href="#排他制約" aria-label="Permalink to &quot;排他制約&quot;">​</a></h3><p>排他制約（EXCLUDE制約）は、主に空間／範囲の重複を排除するために利用する。一般的によく上げられる、典型的なユースケースは、会議室予約システムにおける同じ部屋が同じ時間帯の予約を不可とすることである。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> room_bookings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    room_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    start_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TIMESTAMPTZ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TIMESTAMPTZ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EXCLUDE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">USING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gist (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        room_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WITH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tstzrange(start_time, end_time) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WITH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>業務システム開発においては、マスタテーブルの適用開始日／終了日での利用が考えられる。</p><p>推奨は以下の通り。</p><ul><li>適用開始日／終了日を持つカラムにおいては、積極的に利用する</li><li>PostGISなど空間データについては、機能要件を踏まえ適切に導入を検討する</li></ul><h2 id="関数" tabindex="-1">関数 <a class="header-anchor" href="#関数" aria-label="Permalink to &quot;関数&quot;">​</a></h2><p>一般的事実に基づいた普遍的な処理または、業務的に普遍的に近い処理であれば利用を許容する。テーブルを参照した関数の作成は禁止とする。理由はテーブルを参照すると、システム全体の依存関係の把握が困難になるためや、予期せぬ依存関係のためリリースによる障害を誘発する懸念があるためである。</p><p>例えば、以下のようなOracleとの互換性のために関数宣言することは許容する（Oracleデータベースで開発されたシステムの資産流用などを想定）。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 参考: https://aws.amazon.com/jp/blogs/news/converting-the-sysdate-function-from-oracle-to-postgresql/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> OR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> REPLACE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FUNCTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Your </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">schema&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sysdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RETURNS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TIMESTAMP WITHOUT TIME ZONE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$BODY$</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clock_timestamp() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ZONE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;&lt;DB Timezone&gt;&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$BODY$</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LANGUAGE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>その他として、データ構造上避けられないビジネス共通ロジック的な処理も許容する。例えば、SKUコードが体系を持っていて、品番／カラー／サイズを取得するようなヘルパー関数である。</p><p>create or replace function を用いた関数の更新は、ロックが取られメンテナンスウィンドウを確保できない場合のリリースが難しいことにも留意する。</p><h2 id="トリガー" tabindex="-1">トリガー <a class="header-anchor" href="#トリガー" aria-label="Permalink to &quot;トリガー&quot;">​</a></h2><p>以下のような運用上の課題が出やすいため、原則使用しない。最後に差し迫った際に利用する奥の手とし、ビジネスロジックの実装では原則利用しない。</p><ul><li>トリガーやトリガーが呼び出している関数の、デプロイにはロックを伴うため、メンテナンスウィンドウを確保する必要がある</li><li>トリガーやトリガーが呼び出している関数が依存しているテーブル／カラムの定義が変更されたが、メンテナンスの追随を見落とすとスキーマ変更後の再稼働で、実行時エラーになり得る（業務影響があるシステム障害に繋がりやすい）</li><li>データ移行など大量データを登録する必要がある場合、トリガーにより処理性能が劣化する場合がある</li><li>トリガーの実行により、思わぬテーブルロック／行ロックが生じた場合、解析に時間がかかる</li><li>アプリケーション開発者からは見えにくいため、責任分界点が曖昧となり品質担保の観点から課題となりやすい</li></ul><p>上記方針を元に、一般的によくあるトリガーのユースケースと、本ガイドラインでの対応方針を下表でまとめる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">ユースケース</th><th style="text-align:left;">本ガイドラインでの対応方針</th></tr></thead><tbody><tr><td style="text-align:left;">1.作成日時などシステム項目の登録</td><td style="text-align:left;">アプリケーション側で明示的に登録する。それにより単体テストで検証可能な項目とする</td></tr><tr><td style="text-align:left;">2.レコード物理削除時の別テーブルへ退避</td><td style="text-align:left;">別テーブルへの退避までがアプリケーション要件と見なす。そのためアプリケーション側で明示的に退避ロジックを記載し、単体テスト対象とする</td></tr><tr><td style="text-align:left;">3.変更履歴を別テーブルへ残す</td><td style="text-align:left;">変更履歴を別テーブルに残すことが、アプリケーション要件と見なす。そのためアプリケーション側で明示的に退避ロジックを記載し、単体テストの対象とする。 <br>もし、監査などアプリケーション要件ではない場合から来ている要件の場合は、個別に利用の是非を判断する</td></tr><tr><td style="text-align:left;">4.データ整合性チェック</td><td style="text-align:left;">データが挿入／更新前に特定の業務要件を満たしているかチェックしたい場合がある。<br>業務条件そのものであり、リリースライフサイクルがDB層ではなくアプリケーション層と異なるため、トリガーではなくアプリケーション側で実装する</td></tr><tr><td style="text-align:left;">5.参照整合性の維持</td><td style="text-align:left;">4と同様に、業務要件を満たすように依存関係のあるテーブルのカラムを追加／更新／削除したい場合がある。<br>4と同様の理由で、アプリケーション側で実装する。</td></tr></tbody></table><p>上記方針ではシステム要件を達成できないか大きな困難が生じるケース、あるいはトリガーを導入することで著しく品質や開発生産性が向上するなどの場合など、ごく限られた場面でのみトリガーの利用を検討する。</p><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://qiita.com/thankkingdom/items/80f898d3b93010ab7653" target="_blank" rel="noreferrer">トリガーを使って変更履歴の差分を残す #PostgreSQL - Qiita</a></p></div><h2 id="pub-sub" tabindex="-1">Pub/Sub <a class="header-anchor" href="#pub-sub" aria-label="Permalink to &quot;Pub/Sub&quot;">​</a></h2><p>PostgreSQLにはAWS KinesisやGoogle Cloud Pub/SubのようなPub/Sub機能が備わっている。システムを非常にシンプルに構成できる可能性があり、通知やイベント駆動の非同期ジョブの実行に有用だと考えられる。利用についてはアーキテクト／DBAと相談の上、検討する。</p><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://future-architect.github.io/articles/20240628a/" target="_blank" rel="noreferrer">PostgreSQLのPub/Sub機能とJavaのクライアント実装 | フューチャー技術ブログ</a></p></div><h2 id="テーブル物理設計" tabindex="-1">テーブル物理設計 <a class="header-anchor" href="#テーブル物理設計" aria-label="Permalink to &quot;テーブル物理設計&quot;">​</a></h2><h3 id="パーティション設計" tabindex="-1">パーティション設計 <a class="header-anchor" href="#パーティション設計" aria-label="Permalink to &quot;パーティション設計&quot;">​</a></h3><p>PostgreSQL 10以降は、「宣言的パーティショニング」が利用可能となり、従来のトリガー関数を用いた実装が不要となり、利用時の敷居が下がった。PostgreSQL 11以前のパーティショニングでは、パーティション数が多すぎると実行計画作成に時間がかかりすぎることで性能が劣化する可能性があり、100以下が推奨だった。PostgreSQL 12以降はパーティション数が多い場合でも、<strong>興味のある</strong>パーティションテーブルのみを参照するように実行計画の作成が改善された。</p><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://www.fujitsu.com/jp/products/software/resources/feature-stories/postgres/article-index/partitioning-overview/" target="_blank" rel="noreferrer">パーティショニングの概要｜PostgreSQLインサイド : 富士通</a></li><li><a href="https://www.slideshare.net/slideshow/postgresql12-performance-improvement-pluggable-storage-engine-ntt-sawada/175323517#8" target="_blank" rel="noreferrer">PostgreSQL 12は ここがスゴイ！ ～性能改善やpluggable storage engineなどの新機能を徹底解説～ （NTTデータ テクノロジーカンファレンス 2019講演資料）</a></li></ul></div><p>PostgreSQL 13ではパーティション結合時の改善、14では更新／削除時のパーティションプルーニング運用性向上など、機能改善が続いている。</p><p>一方で、複数パーティションを参照しうるクエリの実行計画は、引き続き実行計画作成に時間がかかることは変わらない。そのため、大量のパーティションを作成することは非推奨とする。トータルのデータ量次第であるが、本ガイドラインでは引き続きパーティション数を100程度に保つことを推奨とする。</p><h5 id="パーティションの制約" tabindex="-1">パーティションの制約 <a class="header-anchor" href="#パーティションの制約" aria-label="Permalink to &quot;パーティションの制約&quot;">​</a></h5><p><a href="https://www.postgresql.jp/docs/16/ddl-partitioning.html#DDL-PARTITIONING-DECLARATIVE-LIMITATIONS" target="_blank" rel="noreferrer">5.11. テーブルのパーティショニング</a> を参照する。</p><p>特に、以下の点に注意する。</p><ul><li>PostgreSQL 17時点では、パーティションキーを含まない「グローバルインデックス」を作成できない</li></ul><p>過去に存在した制約も存在するが、アップデートで改善した内容も多いので注意する。</p><ul><li>PostgreSQL 10以前は、パーティションにまたがるUPDATEやINSERT ON CONFLICTが不可だった。PostgreSQL 11以降はパーティション間の行の移動が可能となった。</li></ul><h5 id="パーティションキー" tabindex="-1">パーティションキー <a class="header-anchor" href="#パーティションキー" aria-label="Permalink to &quot;パーティションキー&quot;">​</a></h5><p>「日付（年月日）」カラムでのパーティション化を最初に検討する。この際、保持期間が最大100日となることが許容できない場合は、月次でのパーティション化（100ヶ月≒8年4ヶ月）を検討する。パーティションキーの更新があると、負荷が高くなってしまうため、避けること</p><h5 id="パーティション化対象テーブル" tabindex="-1">パーティション化対象テーブル <a class="header-anchor" href="#パーティション化対象テーブル" aria-label="Permalink to &quot;パーティション化対象テーブル&quot;">​</a></h5><p>データ量が巨大（数百万レコード以上）かつ、データ改廃が必要になるトランザクションテーブルはパーティション化する。DELETE改廃ではなく、DROPでパーティションごと改廃することで、自動バキュームを誘発せず効率的である。</p><h5 id="パーティション化手法" tabindex="-1">パーティション化手法 <a class="header-anchor" href="#パーティション化手法" aria-label="Permalink to &quot;パーティション化手法&quot;">​</a></h5><p>パーティション化手法には、PostgreSQL 10では「レンジ (範囲)」 「リスト」、PostgreSQL 11に追加された「ハッシュ」の3種類が存在する。日次パーティションや月次パーティションを取る場合は、「レンジ」を用いること。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> item_order</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    CONSTRAINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item_order_PKC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (order_date, order_id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PARTITION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> BY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> RANGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (order_date);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> item_order_20241026</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PARTITION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OF item_order</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VALUES</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2024-10-26&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2024-10-27&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> item_order_20241027</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PARTITION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OF item_order</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VALUES</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2024-10-27&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2024-10-28&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> item_order_20241028</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PARTITION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OF item_order</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VALUES</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2024-10-28&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2024-10-29&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>「リスト」 「ハッシュ」のパーティション化は、それぞれに適した要件があれば、適時採用する。パーティションごとの件数の偏りが起こらないよう、できる限り実データを用いて検証する。</p><p>以下にそれぞれの特徴をまとめる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">手法</th><th style="text-align:left;">説明</th><th style="text-align:left;">パーティションキー例</th></tr></thead><tbody><tr><td style="text-align:left;">レンジ</td><td style="text-align:left;">指定された範囲に基づいてパーティショニング振り分けを実行</td><td style="text-align:left;">帳票作成日、帳票作成年月</td></tr><tr><td style="text-align:left;">リスト</td><td style="text-align:left;">値のリストによってパーティショニング振り分けを実行</td><td style="text-align:left;">店舗グループ地域コード、商品カテゴリコード</td></tr><tr><td style="text-align:left;">ハッシュ</td><td style="text-align:left;">パーティション対象のキーのハッシュ値に対して、指定された分割数の剰余で振り分けを実施</td><td style="text-align:left;">テナントID、顧客ID</td></tr></tbody></table><h5 id="コンポジットパーティション" tabindex="-1">コンポジットパーティション <a class="header-anchor" href="#コンポジットパーティション" aria-label="Permalink to &quot;コンポジットパーティション&quot;">​</a></h5><p>複数のパーティションを組み合わせた、コンポジットパーティション（サブパーティション）の構成を取ることも可能である。</p><p>推奨は以下の通り。</p><ul><li>パーティショニング数を著しく増やす要因にもなるため、原則利用しない <ul><li>データ改廃については親パーティション単位で行い、参照性能についてはテーブル設計／インデックス設計を上手く設計することで回避できることが多いため</li></ul></li></ul><h5 id="継承を用いたパーティション" tabindex="-1">継承を用いたパーティション <a class="header-anchor" href="#継承を用いたパーティション" aria-label="Permalink to &quot;継承を用いたパーティション&quot;">​</a></h5><p>パーティショニングはテーブルの継承を使用して実装可能であり、以下のメリットがある。</p><ul><li>子テーブルは親テーブルに存在しない列を持てる</li><li>ユーザーが選択した方法に従って範囲、リスト、ハッシュ以外の分割が可能</li></ul><p>推奨は以下の通り。</p><ul><li>継承を用いたパーティショニングは禁止</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://www.postgresql.jp/document/16/html/ddl-partitioning.html#DDL-PARTITIONING-USING-INHERITANCE" target="_blank" rel="noreferrer">5.11. テーブルのパーティショニング</a></p></div><h5 id="パーティション追加メンテナンス" tabindex="-1">パーティション追加メンテナンス <a class="header-anchor" href="#パーティション追加メンテナンス" aria-label="Permalink to &quot;パーティション追加メンテナンス&quot;">​</a></h5><p><a href="https://www.pgecons.org/wp-content/uploads/2023/05/PGECons_2022_WG2_Seminar_presentation_20230524.pdf" target="_blank" rel="noreferrer">PostgreSQLエンタープライズ・コンソーシアム WG2(移行WG) 2022年度活動成果報告 PostgreSQLのパーティショニング運用</a> によれば、パーティションの追加方法は以下の2種類が考えられる。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">（1）CREATE TABLE</th><th style="text-align:left;">（2）ATTACH</th></tr></thead><tbody><tr><td style="text-align:left;">Pros</td><td style="text-align:left;">✅️1SQLでパーティション追加できる</td><td style="text-align:left;">✅️複数のSQLを用いる</td></tr><tr><td style="text-align:left;">Cons</td><td style="text-align:left;">❌️テーブルロックが発生する</td><td style="text-align:left;">❌️ロックによる業務影響は発生しない</td></tr></tbody></table><p>2.ATTACHの例</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- ①パーティションの元のテーブルを作成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PART_T_P2023_03</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PART_T including</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">defaults including constraints) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ( FILLFACTOR </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- ②パーティションテーブルに①をパーティションとして組み込みを行う。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PART_T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">attach</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> partition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PART_T_P2023_03</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> values</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2023-03-01&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2023-04-01&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>メンテナンスウィンドウを確保できない場合は、2のATTACHによる手法を用いること。</p><h5 id="パーティション削除メンテナンス" tabindex="-1">パーティション削除メンテナンス <a class="header-anchor" href="#パーティション削除メンテナンス" aria-label="Permalink to &quot;パーティション削除メンテナンス&quot;">​</a></h5><p><a href="https://www.postgresql.jp/docs/16/ddl-partitioning.html" target="_blank" rel="noreferrer">5.11. テーブルのパーティショニング</a> から、パーティションの削除運用には以下の3つの手法が考えられる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">No</th><th style="text-align:left;">手順</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">-- 直接drop<br> DROP TABLE measurement_y2006m02;</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">-- detachしてからdrop<br> ALTER TABLE measurement DETACH PARTITION measurement_y2006m02; その後にDROPする。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">-- concurrentlyオプション付きでdetachしてから、drop<br> ALTER TABLE measurement DETACH PARTITION measurement_y2006m02 CONCURRENTLY;<br> その後にDROPする</td></tr></tbody></table><p>1, 2の方法は、親テーブルには<code>ACCESS EXCLUSIVE</code>ロックを必要とする。メンテナンスウィンドウを確保できない場合は、3の手法を取る。</p><h3 id="一時テーブル" tabindex="-1">一時テーブル <a class="header-anchor" href="#一時テーブル" aria-label="Permalink to &quot;一時テーブル&quot;">​</a></h3><p><code>create temporary table</code> を用いて作成する一時表は、セッション（トランザクション）の終わりで自動的に削除されるテーブルである。処理の中間データを一時的に保存し、複雑なクエリの性能改善や実行計画を安定させたいケースで効果的である。</p><p>主に以下のようなユースケースで用いる。</p><ul><li>大量データのUpsertをする際に、一時テーブルへCOPY→insert into on conflict do updateの流れで高速化したい場合</li><li>画面検索条件に応じて、一時表にレコードを絞り込んだ駆動表を作り、検索性能の高速化や実行計画を安定化させる</li></ul><p>推奨は以下の通り。</p><ul><li>以下にある全ての条件を満たす場合に利用可能とする <ul><li>一時テーブルを利用することで、処理性能が高速化する</li><li>オンラインで利用し、バッチでは利用しない（バッチではスロークエリ時のSQLの実行計画などの再現に困るため）</li><li>該当のセッション（トランザクション）でのみ利用し、消えても問題ない</li></ul></li></ul><p>利用について以下の点に注意する。</p><ul><li>デフォルトではセッションの終了で、領域が開放されるので、常駐プロセス＋コネクションプールしている場合、コネクション数とその最大容量まで、一時バッファ（temp_buffers）のメモリ領域を確保し続けるため、サイジングに注意する</li><li>一時テーブルを用いた後続のクエリがスロークエリになった際、一時テーブルのデータが消えているため性能調査の難易度が上がってしまう。実表に変える改修コストが存在するため（トランザクションIDなど一意となるカラムを追加するなど）、後々性能チューニングの発生を見込んでいる場合は、実表への切り替えを意識した対応を検討する</li></ul><p>一時表はデフォルトの挙動で、セッション単位でデータが保持されるため、<code>ON COMMIT DELETE ROWS</code> でトランザクション終了時にDELETE（実体はTRUNCATE）することを推奨する。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 一時表の作成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TEMP </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TABLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> EXISTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tmp_usage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> COMMIT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DELETE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ROWS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> usage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>一時表の替わりに実表を用いる場合、日付などでパーティション化を行い、カラムにUUIDや改廃のための日付カラムを追加し他のトランザクションからのデータ競合に注意する必要がある。これはDBの計算資源を余分に消費する上、パーティションメンテナンスの保守運用コストもかかるため、画面で利用されるテーブルにおいては実表で実現するのではなく、一時テーブルの利用を推奨する。</p><p>一方でバッチでは、スロークエリ時の性能調査時の再現の容易性を重視し、ワークテーブルを利用することを推奨する。</p><div class="warning custom-block"><p class="custom-block-title">一時表的なワークテーブルを扱う場合は、以下の点に注意する</p><ul><li>ワークテーブルに駆動となるデータをインサートした場合、トランザクション未コミットの場合は統計上が更新されない。そのため、同一トランザクション内では実行計画が想定外になることがある</li><li>未コミットでもANALYZEで統計情報を更新できるが、1セッションでしかANALYZEを利用できないため、オンラインなど並列で動作させる必要がある場合は難しい</li></ul></div><h3 id="view" tabindex="-1">VIEW <a class="header-anchor" href="#view" aria-label="Permalink to &quot;VIEW&quot;">​</a></h3><p>VIEWは特定の列のフィルタリングや、複数の結合など複雑なSQLの簡略化に便利である。 作成／利用についてVIEWの共通ルールは以下とする。</p><p>推奨は以下の通り。</p><ul><li>ネストした宣言は禁止（VIEWやMVIEWを元に別のVIEWすることの禁止）</li><li>カラム定義は必要最小限とする（FROM句の全カラムを定義しようとしない）</li><li>（任意）VIEWで結合するテーブルに、適切なインデックスを作成する</li><li>定期的に棚卸しを実施し、どこにも利用されていないVIEWは削除する</li><li><strong>3箇所</strong>以上（<strong>※各チームで具体的な値は書き換え推奨</strong>）から利用されている場合に限って作成を許容する</li><li>PostgreSQL 9.3以降で、「更新可能VIEW」が使え、FROM句に1テーブルのみを指定するなどの条件を満たせば、VIEWに対してUPDATE／DELETEなどを実行できる。本ガイドラインでは各アプリケーションから発行されるSQLの解析観点などから、VIEWの更新は原則禁止とする。 <ul><li><a href="https://lets.postgresql.jp/documents/technical/9.3/updatable_view/1" target="_blank" rel="noreferrer">PostgreSQL 9.3の新機能: 更新可能VIEW | Let&#39;s POSTGRES</a></li></ul></li><li>CREATE TEMPORARY VIEWを利用することで、そのセッションのみ有効なVIEWを作成できるが、本ガイドラインでは原則禁止とする。理由は以下である <ul><li>発行したSQLが、スロークエリなどで検知されてもそれ単体で実行ができず、調査や性能チューニングのコストが上がるため</li></ul></li></ul><h6 id="viewと実行計画" tabindex="-1">VIEWと実行計画 <a class="header-anchor" href="#viewと実行計画" aria-label="Permalink to &quot;VIEWと実行計画&quot;">​</a></h6><p>クエリプランナーはVIEWの定義を展開し、基になるテーブルに対して効率的な実行計画を生成するため、直接元テーブルを使用した場合と同様の条件でインデックスが使用された実行計画が作成される。言うまでもなく、MVIEWと異なりVIEW自体にインデックスは作成できないため、アクセスパターンに応じて元テーブルのインデックスを確認すること。</p><h3 id="mview" tabindex="-1">MVIEW <a class="header-anchor" href="#mview" aria-label="Permalink to &quot;MVIEW&quot;">​</a></h3><p>MVIEW（MATERIALIZED VIEW）は、VIEWと似ているが、SQLクエリの結果を物理的に保存する点が異なる。そのため、大量データの集計や複雑なクエリに対してキャッシュとして利用できる。</p><p>VIEWと共通する推奨は以下の通り。</p><ul><li>ネストした宣言は禁止（VIEWやMVIEWを元に別のMVIEWすることの禁止）</li><li>カラム定義は必要最小限とする（FROM句の全カラムを定義しようとしない）</li><li>（任意）MVIEWで結合するテーブルに、適切なインデックスを作成する</li><li>定期的に棚卸しを実施し、どこにも利用されていないMVIEWは削除する</li></ul><p>MVIEW独自の推奨は以下の通り。</p><ul><li>MVIEWの利用は、元テーブルの更新についてMVIEWのデータ整合性が許容できること。また、アプリケーションの高速化に大きく寄与できる場合に限る</li><li>MVIEWのリフレッシュ時刻／間隔は、テーブル一覧などの設計書に記載し、ドキュメント化を行う</li><li>MVIEWはPostgreSQL 17時点では、全件リフレッシュしか対応していないため、元テーブルの更新で差分が出た場合の書き換えに時間がかかってしまう <ul><li>増分ビューメンテナンスは開発コミュニティによって議論中である。参考: <a href="https://www.sraoss.co.jp/tech-blog/pgsql/postgresql_ivm/" target="_blank" rel="noreferrer">PostgreSQL のマテリアライズドビューを高速に最新化する：＜コミュニティへの機能提案と拡張モジュール pg_ivm ＞</a></li></ul></li><li>メンテナンスウィンドウを確保できない場合、CONCURRENTLY オプションをつけることで、リフレッシュ中もSELECT可能とする。指定しない場合は、<code>ACCESS EXCLUSIVE</code>ロックを取得してしまう</li></ul><p>MVIEWの増分ビューメンテナンスは、 <code>pg_ivm</code> 拡張を用いることで実現できる。本ガイドラインでの利用方針については、<code>pg_ivm</code> の動作検証が未実施につき、記載を割愛する。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">対応状況（2024年10月時点）</th><th style="text-align:left;">備考</th></tr></thead><tbody><tr><td style="text-align:left;">Google Cloud SQL</td><td style="text-align:left;">✔</td><td style="text-align:left;"><a href="https://cloud.google.com/release-notes#October_29_2024" target="_blank" rel="noreferrer">2024.10.4から対応</a></td></tr><tr><td style="text-align:left;">Amazon RDS</td><td style="text-align:left;">ー</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Amazon Aurora</td><td style="text-align:left;">ー</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Azure Database</td><td style="text-align:left;">ー</td><td style="text-align:left;"></td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">MVIEWの代わりに、独自で実表としてサマリテーブルを利用すべきかどうか</p><p>実テーブルをTRUNCATE + INSERT SELECTすることで、REFRESH MATERIALIZED VIEW相当の振る舞いをさせることは可能である。</p><p>推奨は以下の通り。</p><ul><li>実表ではなくMVIEWを利用することを推奨する <ul><li>TRUNCATEすることで、サマリテーブルが0件になってしまう余地があること（あるいはロックのために参照すら待たされること） <ul><li>トランザクション内でTRUNCATEを利用するか、別名でサマリテーブルを作成、トランザクション内のALTERで新旧を切り替えてしまえば上記を防ぐことが可能。ただし、テーブルのロックは取ってしまう</li></ul></li><li>DELETEを用いると余計なVACUUMでリソースを消費してしまうこと</li><li>MVIEWというRDMSが正規に提供する機能を用いることで、設計意図を開発者に明確に伝えることができる（MVIEWであるためそのテーブルがアプリケーションから更新不可で、参照専用であることが伝えられる）</li><li>なお、MVIEWもインデックスを作成可能であり、インデックス観点で実表を利用する理由にはならない。パーティションテーブル化はできないため、パーティションごとにデータを洗い替える必要がある場合は、実表にする必要がある</li></ul></li></ul></div><h4 id="継承" tabindex="-1">継承 <a class="header-anchor" href="#継承" aria-label="Permalink to &quot;継承&quot;">​</a></h4><p>PostgreSQLはテーブルの継承（<a href="https://www.postgresql.jp/docs/16/ddl-inherit.html" target="_blank" rel="noreferrer">5.10. 継承</a>）が行え、以下のような特徴がある。</p><ul><li>親テーブル上の検査制約と非NULL制約は、NO INHERIT句を指定しない限り、子テーブルに自動的に継承される</li><li>他の種類の制約（一意性制約、主キー、外部キー制約）は継承されない</li><li>テーブルは1つ以上の親テーブルから継承可能で、列の和を取る</li></ul><p>例えば、システム共通項目を定義したベーステーブルと、それを継承した受注テーブルなどの関係を作ることができる。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 基本のテーブル（システム共通の項目）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base_table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    created_at </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TIMESTAMP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    created_by </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    created_tx_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    updated_at </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TIMESTAMP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    updated_by </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    updated_tx_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INTEGER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DEFAULT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    patch_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INTEGER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    patched_by </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 業務テーブル（base_table を継承）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> orders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    product_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    quantity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INTEGER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    amount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NUMERIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    customer_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) INHERITS (base_table);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>推奨は以下の通り。</p><ul><li>テーブル間の継承は利用しない <ul><li>継承を利用することでテーブル間の関係が複雑になるため</li><li>レビューが難しくなるため</li></ul></li></ul><h3 id="ナチュラルキー-サロゲートキー" tabindex="-1">ナチュラルキー／サロゲートキー <a class="header-anchor" href="#ナチュラルキー-サロゲートキー" aria-label="Permalink to &quot;ナチュラルキー／サロゲートキー&quot;">​</a></h3><p>ナチュラルキー（ビジネスキー）、サロゲートキー（代理キー）の主な特徴を下表にまとめる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">観点</th><th style="text-align:left;">ナチュラルキー</th><th style="text-align:left;">サロゲートキー</th></tr></thead><tbody><tr><td style="text-align:left;">概要</td><td style="text-align:left;">業務上、一意となる項目の組合せを主キーとする</td><td style="text-align:left;">連番やUUIDを採番し主キーとする</td></tr><tr><td style="text-align:left;">データモデルの表現力</td><td style="text-align:left;">✅️業務上の概念と一致させやすい</td><td style="text-align:left;">⚠️ナチュラルキーにユニークインデックスを貼ることで代替だが、主キーだけでは業務データの把握が行いにくい</td></tr><tr><td style="text-align:left;">カラム数</td><td style="text-align:left;">✅️業務キーのみ</td><td style="text-align:left;">⚠️サロゲートキー分が増える</td></tr><tr><td style="text-align:left;">開発生産性</td><td style="text-align:left;">⚠️業務キー項目が多いとSQL条件句が冗長になりやすい</td><td style="text-align:left;">✅️SQLがシンプルで生産性、品質を一定にしやすい</td></tr><tr><td style="text-align:left;">業務キーのコード体系変更</td><td style="text-align:left;">❌️ PK更新となり性能課題になりやすい</td><td style="text-align:left;">✅️サロゲートキーであれば回避できる</td></tr><tr><td style="text-align:left;">業務キーの増減</td><td style="text-align:left;">❌️ 結合処理全般に条件追加</td><td style="text-align:left;">✅️影響を局所化できる</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>トランテーブルはサロゲートキーを用いる <ul><li>例えば受注テーブルで、「得意先コード＋連番」でも一意性は担保できるが、受注IDをシーケンスやUUIDで採番する</li></ul></li><li>マスタテーブルは条件によってはナチュラルキー可だが、確信が持てない場合はサロゲートキーを採用する <ul><li>業務キー自体の更新（M&amp;Aやブランド再編などで商品コード体系を変えたいなど）の可能性がゼロではない場合、サロゲートキーを利用</li><li>2B、2C向けのアプリ開発で、試行錯誤を繰り返す仮説検証型のプロセスで開発しているなど、業務キーの増減が読めない場合は、サロゲートキーを利用</li><li>業務が安定しており、変更が発生しないと確信できる場合はナチュラルキーをPKとする。例えば、社員番号の再利用しない会社の社員マスタは、社員番号をPKとする</li><li>複数の事業部があり、それぞれで固有のナチュラルキー採番を採用している場合は、意図せぬ重複の可能性がある。部門コード、支社コードなどをすべてのテーブルに持たせて、そのキーとの複合主キーにするなどの対応が必要になる可能性がある。後述のマルチテナントについても参照のこと。</li></ul></li><li>複合キーについては後述する</li></ul><p>適用期間付きデータについて、サロゲートキーを用いるが複合主キーとしたい場合もある。</p><p>【例】</p><ul><li>商品マスタ: 商品ID＋適用終了日 で主キー</li><li>単価マスタ: 単価ID＋適用終了日 で主キー <ul><li>単価IDの代わりに、例えば「商品ID＋取引先ID」を採用も可能だが、主キーの粒度が変わるような要件変更が発生する可能性がゼロでは無いとし、非推奨とする</li></ul></li></ul><p>推奨は以下の通り。</p><ul><li>別テーブルサロゲートキー＋適用終了日でPKを取ることができる場合も、フロントエンドからの扱いやすさを考慮し、一律別のサロゲートキーを払い出し、複合キーを用いない</li><li>商品マスタであれば、商品IDでPK。商品コード＋適用終了日でユニークキー制約とする</li></ul><div class="warning custom-block"><p class="custom-block-title">サロゲートキーを採用してもナチュラルキーにユニークインデックスを作成できない場合がある</p><p>過去のISBNコードのように、ナチュラルキーの再利用がありえるケースは、ユニークインデックスを作成できないため、インデックスからUNIQUEオプションを外すしかない。</p></div><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://dbflute.seasar.org/ja/manual/topic/dbdesign/surrogatekey.html" target="_blank" rel="noreferrer">サロゲートキーと複合主キー | DBFlute</a></p></div><h3 id="連番-uuid" tabindex="-1">連番／UUID <a class="header-anchor" href="#連番-uuid" aria-label="Permalink to &quot;連番／UUID&quot;">​</a></h3><p>連番はDBシーケンスにより採番され、シリアル型やIDENTITYカラムで利用される値のことを指す。UUIDは UUID v7（時刻順序を考慮したユニーク識別子）の利用を前提とする。UUID v1、 v4はDBMSによっては生成順とソート順の相関がなくパフォーマンスに影響（B-treeと相性が悪くインサート効率が低い。検索も直近データの参照が多いと考えられるため効率が悪いことが多いと推測できる）があるため、利用しない。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">連番</th><th style="text-align:left;">UUID v7</th></tr></thead><tbody><tr><td style="text-align:left;">概要</td><td style="text-align:left;">シーケンスで採番する。CACHEオプションで高速化できるが順序不同となる</td><td style="text-align:left;">発行されるIDが時系列順なので、UUIDv4に比べてパフォーマンスの改善が期待できる</td></tr><tr><td style="text-align:left;">キーの生成場所</td><td style="text-align:left;">DB側で自動採番させる（シーケンスを明示的に指名して値を取得も可能）</td><td style="text-align:left;">アプリ側（Webフロントエンド/バックエンド）で生成可能。拡張を入れればDB側でも可能。ID生成がSPOFになってパフォーマンス状のネックになることがない</td></tr><tr><td style="text-align:left;">シャーディング との相性</td><td style="text-align:left;">⚠️良くない（採番を中央集権的に管理する必要がある）</td><td style="text-align:left;">✅️DBMS側にアクセスせずにキーを確定させることができるため、シャーディングに使いやすい。X（元Twitter）のSnowflakeもID生成が1つのDBに集中しないように分散して作っても問題がないように作られたが、それと同様</td></tr><tr><td style="text-align:left;">データサイズ</td><td style="text-align:left;">✅️64ビット</td><td style="text-align:left;">⚠️128ビット。0-fまでの文字表現で32文字、base64で22文字</td></tr><tr><td style="text-align:left;">キーの予測性</td><td style="text-align:left;">⚠️ビジネス規模の推測ができてしまう懸念</td><td style="text-align:left;">✅️困難なためWeb URLに表示されても安全性が高い</td></tr><tr><td style="text-align:left;">結論</td><td style="text-align:left;">単一DB（クラスター）前提では、連番が適している。ただし、URL要素への利用は懸念あり</td><td style="text-align:left;">シャーディング前提ではUUIDの利用が適している</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>単一DB（または単一DBクラスター）前提であれば、連番を用いる</li><li>（将来的に）シャーディングを前提とするのであればUUID v7を利用</li><li>もし、2B／2C向けのアプリケーションでインターネット公開する場合は、連番をURLに利用せず、検索用にpublic_idカラムを作成しユニークインデックスを作成、UUIDをBase64などで変換したキーを作成する</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://terra-drone.net/tech/postgresql%E3%81%A7auto-increment-vs-uuid-vs-ulid%E3%81%AE%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E6%AF%94%E8%BC%83/" target="_blank" rel="noreferrer">PostgreSQLでauto increment VS UUID VS ULIDのパフォーマンス比較 - TerraDrone Tech</a></li><li><a href="https://jp.quora.com/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%A7%E3%83%A6%E3%83%8B%E3%83%BC%E3%82%AF%E3%82%AD%E3%83%BC%E3%81%ABUUID%E3%82%92%E4%BD%BF%E3%81%86%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88%E3%81%AF%E4%BD%95" target="_blank" rel="noreferrer">データベースでユニークキーにUUIDを使うメリットは何ですか？連番やタイムスタンプまたは複合などではいけないのでしょうか？どうも視認性が悪く使いにくく感じますし連番でも衝突しない気もします。 - Quora</a></li><li><a href="https://zenn.dev/uncode_jp/articles/dcf20a2c5b0d76#%E7%B5%90%E6%9E%9C" target="_blank" rel="noreferrer">連番IDを使うと会社が潰れる。(訳: 連番とUUIDのベンチマークを取ってみた❤️）</a></li></ul></div><h3 id="共通カラム" tabindex="-1">共通カラム <a class="header-anchor" href="#共通カラム" aria-label="Permalink to &quot;共通カラム&quot;">​</a></h3><p>データ調査／トラブルシューティング／データ移行などのシステム運用での利用を想定し、すべてのテーブルに共通のカラムを付与する。「システム共通カラム」 「お約束カラム」などと呼ばれることもあるが、ここでは「共通カラム」と呼称する。一律設定することで、システム運用の統制を取るとともに、テーブルの設計コストを抑えることができる。</p><p>項目として以下がある。<strong>命名はあくまで例示であり、各システムの命名方針に従うこと</strong>。lock_noだけは画面更新での排他制御で利用する目的だが、画面での操作を目的としない場合であっても、検討余地を減らすため一律付与する。</p><table tabindex="0"><thead><tr><th style="text-align:left;">分類</th><th style="text-align:left;">項目名</th><th style="text-align:left;">論理名</th><th style="text-align:left;">作成</th><th style="text-align:left;">更新</th><th style="text-align:left;">備考</th></tr></thead><tbody><tr><td style="text-align:left;">作成</td><td style="text-align:left;">created_at</td><td style="text-align:left;">作成日時</td><td style="text-align:left;">✔</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">created_by</td><td style="text-align:left;">作成者</td><td style="text-align:left;">✔</td><td style="text-align:left;"></td><td style="text-align:left;">画面操作の場合は、ログインユーザIDを登録する、バッチ起動の場合はcreated_pgm_cdと同値</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">created_pgm_cd</td><td style="text-align:left;">作成プログラムコード</td><td style="text-align:left;">✔</td><td style="text-align:left;"></td><td style="text-align:left;">機能やプログラムを一意に識別する値を登録する。</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">created_tx_id</td><td style="text-align:left;">作成トランザクションID</td><td style="text-align:left;">✔</td><td style="text-align:left;"></td><td style="text-align:left;">アプリケーション側で採番された、Web APIやバッチ処理の呼び出しそれぞれで一意となるIDを登録する。</td></tr><tr><td style="text-align:left;">更新</td><td style="text-align:left;">updated_at</td><td style="text-align:left;">更新日時</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">INSERT時にも登録</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">updated_by</td><td style="text-align:left;">更新者</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">INSERT時にも登録</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">updated_pgm_cd</td><td style="text-align:left;">更新プログラムコード</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">INSERT時にも登録</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">updated_tx_id</td><td style="text-align:left;">更新トランザクションID</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">INSERT時にも登録</td></tr><tr><td style="text-align:left;">排他制御</td><td style="text-align:left;">lock_no</td><td style="text-align:left;">ロック番号</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">INSERT時にも登録(デフォルト値: 1)</td></tr><tr><td style="text-align:left;">パッチ</td><td style="text-align:left;">patched_at</td><td style="text-align:left;">パッチ日時</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">データパッチ作業がない限り、NULL値</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">patched_by</td><td style="text-align:left;">パッチ実行者</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">データパッチ作業がない限り、NULL値。 作業者が特定できる値を登録する。</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">patched_id</td><td style="text-align:left;">パッチID</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">データパッチ作業がない限り、NULL値。 課題管理システムのチケット番号を登録する</td></tr></tbody></table><p>テーブル設計における、共通カラムは以下のルールを守る。</p><ul><li>原則、全テーブルに付与する</li><li>追記のみ（更新がない）テーブルであっても、「更新」 「排他制御」 「パッチ」分類のカラムも付与する</li><li>一律的に付与することで、カラムが増えるという冗長性よりも、万が一アプリケーションやシステム運用で更新処理やデータパッチが行われた場合の記録漏れを防ぐことを優先し、ガバナンスを図るため</li></ul><p>アプリケーションコードからの利用については以下のルールを守る。</p><ul><li>共通カラムをアプリケーションロジックで利用（参照）しない <ul><li>（例1）商品マスタの、最終更新日、更新ユーザーIDといった表示項目に、共通カラムを利用しない。要件で必要な場合は、別途カラム定義する</li><li>（例2）直近5営業日に変更があった商品を検索する際に、共通カラムを利用しない。要件で必要な場合は、別途カラムを定義する</li></ul></li><li>作成日時、更新日時は <code>CURRENT_TIMESTAMP</code> を利用せず、アプリケーションからプレースホルダーを用いてバインドする <ul><li>created_at, updated_at についても単体テストの検証項目とすることで、 テスト品質を高めるため</li></ul></li><li>レコードを作成する場合は、created_xxx など作成系だけではなく、 updated_xxx など更新系の共通カラムも登録する</li></ul><div class="tip custom-block"><p class="custom-block-title">info updated_at や updated_by くらいは画面表示に利用してもよいのは？</p><p>最終更新日時、最終更新といった項目を、画面表示するユースケースは多く、item_updated_at、 item_updated_by などアプリケーションカラムを追加することで設計上の冗長さを感じることが多い。 そのため、updated_at、 updated_by だけであれば、共通カラムのアプリケーション利用を許容しても良いのでは？ という意見もあるが、以下の観点で非推奨としている。</p><ul><li>共通カラムに複数の意味を持たせない（システム運用で利用する以外の意味を持たせない）</li><li>異なる設計上のライフサイクルである項目を混ぜない（共通カラムは不変的、業務カラムは業務要件の変更で可変）</li></ul><p>共通カラムを画面などアプリケーションで利用すると、例えば以下のようなバッドケースがありえる。</p><ul><li>画面要件で、ユーザー操作に限った最終更新日時にしたい（バッチ処理の変更は無視したい）といった変更があると、対応できない（項目追加＋データ移行＋アプリ改修が発生する）</li><li>画面要件で、最終的に操作した更新ユーザーIDではなく、何かしらの業務における申請ユーザーIDにしたいといった変更があると、対応できない（項目追加＋データ移行＋アプリ改修が発生する）</li></ul><p>また、当初限定した共通カラムの利用が、徐々に別の共通カラムにも広がってしまいガバナンスの欠如に繋がるため、一律利用を禁止とする。</p></div><div class="tip custom-block"><p class="custom-block-title">データパッチを行う際の共通カラムの更新ルール</p><p>共通カラムのうち、patched_at, patched_by, patched_id のみを更新し、updated_xxx、revision などは更新しないようにする。</p><p>データパッチ操作とシステムによる操作を分離し、データパッチ操作によりシステム側の証跡を残すようにするためである。</p></div><div class="warning custom-block"><p class="custom-block-title">作成者／更新者、プログラムコード、トランザクションIDについての注意</p><p>本ガイドラインで想定する共通カラムは列数が多く、データ容量も大きくなってしまう傾向があるため、登録/更新性能が低下する懸念がある。</p><p>そのため、共通カラムで利用する値は、<strong>なるべく短い項目長にする</strong>ことが望ましい。良くない例として、プログラムコードを、「機能ID_IF連携先コード_データ種別_ファイル名」など100文字を超える値としてしまう例がある。運用上便利かもしれないが、DB観点では好ましくないため必要最低限にすること。トランザクションIDもUUIDを想定しているが、より短い桁数での採番することが望ましい。</p></div><div class="warning custom-block"><p class="custom-block-title">チューニング観点での共通カラムの取り外し</p><p>先述の通り、シビアに性能が求められるワークロードの場合、共通カラムのオーバーヘッドが大きくなる。例えば、追記だけで更新が存在しないワークテーブルへの書き込みを最適化したい場合、必要に応じて更新部分の共通カラムを取り除くことも考えられる。本ガイドラインとして、なるべく一律共通カラムを付与することで設計余地を減らすことを重視するが、性能などどうしても超えなければならない課題がある場合は、状況に応じて共通カラムをなくすという判断を否定する訳では無い</p></div><h2 id="テーブル論理設計" tabindex="-1">テーブル論理設計 <a class="header-anchor" href="#テーブル論理設計" aria-label="Permalink to &quot;テーブル論理設計&quot;">​</a></h2><h3 id="スナップショット属性" tabindex="-1">スナップショット属性 <a class="header-anchor" href="#スナップショット属性" aria-label="Permalink to &quot;スナップショット属性&quot;">​</a></h3><p>受注時に、商品の単価を商品マスタから受注明細にコピーする場合がある。この振り下ろされたカラムを、スナップショット属性と呼ぶ。スナップショット属性を用いることで、マスタ変更などで契約時と異なった値になった場合でも正しく当時の記録を残すことができる。</p><p>推奨は以下の通り。</p><ul><li>「商品単価」とそのままの名称にせず、「受注商品単価」といったように、別名にする</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="/arch-guidelines/documents/forIF/if_guidelines.html#正規化">正規化 | I/F設計ガイドライン</a> にもスナップショット属性についての記載がある。</p></div><h3 id="導出属性" tabindex="-1">導出属性 <a class="header-anchor" href="#導出属性" aria-label="Permalink to &quot;導出属性&quot;">​</a></h3><p>導出属性とは同じテーブルの中で、「その値が他のカラムから計算可能である」値のことを指す。例えば受注テーブルの合計金額は {単価×数量} から導くことができるため、導出属性である。導出属性について下表で特徴をまとめる。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">導出属性の利用</th><th style="text-align:left;">参照時に動的に計算</th></tr></thead><tbody><tr><td style="text-align:left;">データ使用量</td><td style="text-align:left;">⚠️不利である</td><td style="text-align:left;">✅️カラム追加無しで済む</td></tr><tr><td style="text-align:left;">登録／更新性能</td><td style="text-align:left;">⚠️</td><td style="text-align:left;">✅️影響無し</td></tr><tr><td style="text-align:left;">検索性能</td><td style="text-align:left;">✅️キャッシュの役割</td><td style="text-align:left;">⚠️参照の毎に計算コストが掛かる</td></tr><tr><td style="text-align:left;">ビジネスロジックの管理</td><td style="text-align:left;">✅️登録／更新時に寄せることができる</td><td style="text-align:left;">⚠️複数の参照があった場合、計算ロジックが複数クエリに記載する懸念がある</td></tr><tr><td style="text-align:left;">設計意図の明確化</td><td style="text-align:left;">❓️</td><td style="text-align:left;">ー</td></tr><tr><td style="text-align:left;">データサイエンティストへの連携性</td><td style="text-align:left;">✅️分析しやすい</td><td style="text-align:left;">⚠️計算ロジックは自明でない場合や、仕様変更があった場合に大変</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>導出属性は以下の条件の場合に作成する方針とする <ul><li>画面、帳票上に表示される項目であり、重要な意味をもつ価格などのカラム</li><li>その値を出すための計算が複雑なビジネスロジックがあり、データサイエンティスト視点で、別カラムに振り下ろしておいた方が好ましいケース</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://www.edifist.co.jp/lecture/dbdesign/02_03/03/" target="_blank" rel="noreferrer">できるエンジニアになるためのちょい上DB術/第2章 概念設計</a></p></div><h3 id="boolean型を別の型にできないか考える" tabindex="-1">boolean型を別の型にできないか考える <a class="header-anchor" href="#boolean型を別の型にできないか考える" aria-label="Permalink to &quot;boolean型を別の型にできないか考える&quot;">​</a></h3><p>例えば、<code>boolean</code> 型の <code>is_verified</code> ではなく <code>timestamp with time zone</code> 型の <code>verified_at</code>を用いることで、確認有無に加えて確認した時間も同時に保持できる。</p><p>推奨は以下の通り。</p><ul><li>できるかぎり <code>boolean</code> 型を避け、別の型で表現できないか検討する</li></ul><table tabindex="0"><thead><tr><th style="text-align:left;">検討パターン</th><th style="text-align:left;">Before例</th><th style="text-align:left;">After例</th></tr></thead><tbody><tr><td style="text-align:left;">（1）boolean型を日時型に</td><td style="text-align:left;">is_verified</td><td style="text-align:left;">verified_at（nullable, timestamp with time zone）</td></tr><tr><td style="text-align:left;">（2）boolean型を区分値に</td><td style="text-align:left;">is_completed</td><td style="text-align:left;">status（varchar型、デフォルト値を未処理0などにする）</td></tr><tr><td style="text-align:left;">（3）boolean型を数値型に</td><td style="text-align:left;">has_comments</td><td style="text-align:left;">comment_count（integer型）</td></tr></tbody></table><p>注意として、（3）のパターンはコメント追加の度に <code>comment_count</code> を更新する必要があり、<code>has_comments</code>より更新処理の負荷が上がるトレードオフがある。</p><h3 id="業務日付管理" tabindex="-1">業務日付管理 <a class="header-anchor" href="#業務日付管理" aria-label="Permalink to &quot;業務日付管理&quot;">​</a></h3><p>システム日付とは別に<strong>業務日付</strong>を管理することで、業務運用の正確性を向上させ、システム全体の柔軟性と信頼性を高めることができる。</p><p>業務日付管理には以下の目的／メリットが存在する。</p><ul><li>店舗の営業時間が26時などの場合に、コンピューターの持つ日付（システム日付）とずれた営業日単位で登録／集計を可能とするため</li><li>日をまたぐバッチ処理や画面操作（システムメンテナンスなどを想定）に対して、データ整合性を保ちやすくなる</li><li>障害調査や結合テスト／負荷検証などで、特定の日付におけるテストを再現しやすくできる</li></ul><p>推奨は以下の通り。</p><ul><li>バッチ処理／オンライン処理ともに、業務日付を利用する <ul><li>オンライン開局中に、前日のバッチ処理のリカバリーを可能するため、オンライン用とバッチ用で業務日付を分離できる定義が望ましい</li></ul></li><li>システムがマイクロサービスで構成されている場合は、各マイクロサービス単位（≒DB単位）で管理する</li><li>モジュラモノリス構成の場合、各サブシステムで業務日付を保持するかどうかは、業務要件に応じて設計する。将来的にマイクロサービスへの切り出しの可能性が高い場合は、最初からサブシステム単位で業務日付を保持する</li><li>業務日付はパーティションキーなどに利用される</li><li>システム日付はシステム共通項目の作成日時や、受注日時など、実際に生成されたシステム日時を登録する場合に利用する <ul><li>そのため、業務日付と受注日時の日付ズレがありえる</li></ul></li><li>業務日付は、業務日付管理テーブルに登録する</li><li>業務日付管理テーブルの更新は、ジョブワークフローエンジン上で適切なバッチ処理により自動化する <ul><li>例えば、バッチ処理であればその業務日付内に終わらせるバッチ処理終了後に、日替わりジョブを呼び出す。オンライン業務日付は、閉局があれば閉局のタイミングで呼び出す</li></ul></li><li>複数システム間連携では各サブシステムが同一業務日付でのDB操作を行えるように、最上流のシステムで業務日付を取得し、サブシステム連携時に引数でこの業務日付を渡して持ち回るようにする。最上位システムでは業務日付管理テーブルとのJOINは許可するが、サブシステムでは引数で渡されたものを正として利用する。</li></ul><p>以下のような場合は、業務日付を利用しなくても良い。</p><ul><li>複雑なバッチ処理が存在しない、シンプルなアプリ</li><li>パーティションテーブルが存在しないか、あってもデータ量がごく限定的なアプリ</li></ul><p>業務日付管理テーブルの例を以下に記載する。サブシステム単位の制御が必要な場合は、これにサブシステムコードなどをキーに追加する。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> m_biz_date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    biz_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;業務日付&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    category </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;バッチまたはオンライン&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    UNIQUE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (biz_date, category)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) COMMENT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;業務日付管理テーブル&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="適用期間付きデータ" tabindex="-1">適用期間付きデータ <a class="header-anchor" href="#適用期間付きデータ" aria-label="Permalink to &quot;適用期間付きデータ&quot;">​</a></h3><p>以下のように、開始日（start_date）/終了日（end_date）付きのテーブルを、適用期間付きテーブルと呼ぶ。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> unit_price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    unit_price_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> BY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DEFAULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    item_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    unit_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NUMERIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    start_date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    CONSTRAINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unique_item_end_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UNIQUE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (item_id, end_date),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EXCLUDE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">USING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gist (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        item_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WITH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        daterange(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">start_date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, end_date, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WITH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>例えばインフレで仕入れコストが上がった結果、来月からの販売単価を変更することは良く起こり得る。そういった場合に、開始日／終了日を設定することで期間を表現して対応する。なお、開始日／終了日の条件で指定する日付に何を指定するかは業務要件で整理する（例えば、システム日付ではなく、受注日／出荷予定日にするかなど）。</p><p>推奨は以下の通り。</p><ul><li>サロゲートキーをPKとする</li><li>一意制約には、start_dateではなく、end_dateを指定する。これにより最新のレコード取得をインデックスアクセス可能とする</li><li>排他制約を設定し、期間の重なりを防ぐ（重なりの漏れは防げないので注意）</li><li>適用開始日の最小は、<code>0001-01-01</code> を、 最大は <code>9999-12-31</code> を指定する（これにより、開始日／終了日はNOT NULL制約を付ける）</li><li>適用開始日／終了日の代わりに範囲型（tsrangeなど）を適用できるが、使用しない</li></ul><p>例えば、以下のようなデータとなる。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> unit_price_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> item_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> unit_price</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start_date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  end_date</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---------------+---------+------------+------------+------------</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 301</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     100.00</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 0001-01-01</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 2022-12-31</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 301</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     150.00</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 2023-01-01</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 2023-12-31</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 301</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     200.00</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 2024-01-01</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 9999-12-31</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">0001-01-01 / 9999-12-31 の代わりに infinity / -infinity の利用する方が良いのではないか？</p><p><code>infinity</code> および <code>-infinity</code> は、期間の開始・終了が無期限であることを明確に表現でき、SQLレベルでの期間演算も扱いやすいメリットがある。</p><p>しかし、以下の点に注意する必要がある。</p><ul><li>アプリケーションでの互換性 <ul><li>JavaやGoの標準ライブラリでは <code>infinity</code> を直接表現できず、ドライバーの拡張クラスなどを利用するか、 <code>infinity</code> を <code>LocalDate.MAX</code> などの定数に変換する処理が必要となる</li><li><a href="https://future-architect.github.io/uroborosql-doc/" target="_blank" rel="noreferrer">uroboroSQL</a>ではResultSetの拡張ポイントが用意されているため、問題なく扱えるが、利用しているライブラリによっては、 <code>infinity</code> が扱いにくい可能性がある</li></ul></li><li>DBの移植性 <ul><li><code>infinity</code> はPostgreSQL固有の機能であり、別のDBMSへの移植性は低下する</li></ul></li><li>データ基盤/他システムへの連携の手間 <ul><li>Redshift、BigQuery、Snowflakeなど主要なクラウドDWHは、 <code>infinity</code> という概念を持たないため、データ連携時には変換処理が必要となる</li></ul></li><li>ゼロETLとの相性 <ul><li>ゼロETLはAurora や RDSから Redshift へ、ETL パイプラインを構築せずにデータを複製する仕組みであるが、<code>infinity</code> には対応していない</li></ul></li></ul><p>特にデータ基盤や他システムへの連携までを考慮すると、 <code>0001-01-01</code> や <code>9999-12-31</code> で表現した方が利便性が高く堅牢であると言える。そのため、特別な理由がない限りは <code>infinity</code> を利用しないことを推奨する。</p></div><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://www.postgresql.jp/docs/16/datatype-datetime.html#DATATYPE-DATETIME-SPECIAL-VALUES" target="_blank" rel="noreferrer">8.5. 日付/時刻データ型</a></li><li><a href="https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#date_type" target="_blank" rel="noreferrer">Data types | BigQuery | Google Cloud</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/zero-etl.querying.html#zero-etl.data-type-mapping" target="_blank" rel="noreferrer">Aurora DB クラスターへのデータの追加と、Amazon Redshift でのクエリ - Amazon Aurora</a></li></ul></div><h3 id="世代管理" tabindex="-1">世代管理 <a class="header-anchor" href="#世代管理" aria-label="Permalink to &quot;世代管理&quot;">​</a></h3><p>ここでいう世代とは、適用期間付きデータとは別の概念で、更新した値の過去バージョンを参照可能にすることを指す。例えば、単価マスタの例では下表における、2023-01-01 ～ 2023-12-31の単価を150円から160円に更新した時に、過去バージョンを参照できるようにすることを指す。バージョン管理／履歴管理とも呼ぶことがあるが、適用期間付データも履歴と呼ぶことがあり混在しやすいので、本紙では「世代」と呼称する。また、本紙では世代管理の対象を「マスタ」のみに絞って記述する。</p><p>適用期間付きデータかつ、世代管理が必要な場合の例を上げる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">商品コード</th><th style="text-align:left;">単価</th><th style="text-align:left;">開始日</th><th style="text-align:left;">終了日</th><th style="text-align:left;">世代番号</th></tr></thead><tbody><tr><td style="text-align:left;">301</td><td style="text-align:left;">100</td><td style="text-align:left;">-inifinity</td><td style="text-align:left;">2022-12-31</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">301</td><td style="text-align:left;"><strong>150</strong></td><td style="text-align:left;">2023-01-01</td><td style="text-align:left;">2023-12-31</td><td style="text-align:left;"><strong>1</strong></td></tr><tr><td style="text-align:left;">301</td><td style="text-align:left;"><strong>160</strong></td><td style="text-align:left;">2023-01-01</td><td style="text-align:left;">2023-12-31</td><td style="text-align:left;"><strong>2（最新）</strong></td></tr><tr><td style="text-align:left;">301</td><td style="text-align:left;">200</td><td style="text-align:left;">2024-01-01</td><td style="text-align:left;">inifinity</td><td style="text-align:left;">1</td></tr></tbody></table><p>実現方法として、主に2方式がある。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">（1）単一テーブルで世代番号管理</th><th style="text-align:left;">（2）履歴テーブル管理</th></tr></thead><tbody><tr><td style="text-align:left;">概要</td><td style="text-align:left;">同一テーブルに過去世代のレコ－ドも保持する方法。過去の世代も同時にアクセスするユースケースが多い場合には直感的</td><td style="text-align:left;">メインのテーブルには、最新世代のみ保持し、履歴テーブル側に過去世代を持つ。履歴テーブルは追記オンリー</td></tr><tr><td style="text-align:left;">排他制約</td><td style="text-align:left;">⚠️排他制約を貼りにくい（is_latestなどのカラム追加などの工夫）</td><td style="text-align:left;">✅️メインのテーブルに対しては問題無し</td></tr><tr><td style="text-align:left;">最新版の取得</td><td style="text-align:left;">⚠️不利（最新版に最新フラグを付与する方式もある）</td><td style="text-align:left;">✅️有利</td></tr><tr><td style="text-align:left;">過去世代含めた取得</td><td style="text-align:left;">✅️過去世代を含めて一覧表示するような要件がある場合でも、単一テーブルへアクセスすればいいだけであり、比較的クエリが簡易</td><td style="text-align:left;">⚠️過去世代を含めて一覧表示するような要件がある場合、メインのテーブルへのアクセスと履歴テーブルへのアクセスをunionで書く必要があり、単一テーブルパターンと比較してクエリが複雑化する</td></tr><tr><td style="text-align:left;">改廃</td><td style="text-align:left;">✅️通常、マスタは改廃しないため影響なし</td><td style="text-align:left;">✅️通常、マスタは改廃しないため影響なし</td></tr><tr><td style="text-align:left;">テーブル定義変更</td><td style="text-align:left;">✅️一つのテーブルのみにDDLを反映すれば良い</td><td style="text-align:left;">⚠️メインテーブルと履歴テーブルの同期を取る必要があり、DDL反映の手間がかかる。</td></tr><tr><td style="text-align:left;">その他</td><td style="text-align:left;">is_latestカラムを追加する場合、INSERTと同時にUPDATEが必要</td><td style="text-align:left;">追加情報を振り下ろしやすい</td></tr></tbody></table><p>推奨は以下の通り</p><ul><li>排他制約による整合性担保しやすい、(2)の履歴テーブル管理を推奨</li></ul><div class="tip custom-block"><p class="custom-block-title">単一テーブルパターンにおける性能考慮</p><p>世代管理対象がマスタの場合、そこまで多くのデータ件数が見込まれないケースも多くある。 そういった場合、クエリ性能や改廃の考慮優先順位は高く置かず、単一テーブルパターンを選択する余地は十分にありえる。</p></div><p>履歴テーブル側の更新方法は以下の2種類が考えられるが、アプリケーション側での操作を推奨する。</p><ol><li>同一トランザクションかつアプリケーションで登録 <ol><li>履歴テーブルとトランテーブルを同時更新する</li><li>アプリケーション側で実施、履歴テーブルも単体テストの検証対象</li></ol></li><li>トリガー <ol><li>トリガーの使用は非推奨</li></ol></li></ol><div class="tip custom-block"><p class="custom-block-title">単一テーブルで世代管理番号の排他制約</p><p>以下のように、最新世代のレコードのみis_latest=trueとするようなテーブル定義をすれば、排他制御もis_latest=true のときの部分インデックスで実現できる。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> unit_price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    unit_price_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    item_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    unit_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NUMERIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    start_date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    is_latest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BOOLEAN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EXCLUDE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">USING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GIST (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        item_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WITH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tsrange(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">start_date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, end_date) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WITH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (is_latest),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    CONSTRAINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unique_item_version_start_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UNIQUE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (item_id, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">start_date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>一方で、同一item_id、start_dateで複数のis_latest=trueレコードを防ぐことが制約上できず、テーブル定義としてやや複雑度が上がるため、適用期間と世代管理はテーブルを分離することで役割を分けることを本ガイドラインでは推奨している。</p></div><h3 id="論理削除" tabindex="-1">論理削除 <a class="header-anchor" href="#論理削除" aria-label="Permalink to &quot;論理削除&quot;">​</a></h3><p>論理削除フラグは、SQLアンチパターン「とりあえず削除フラグ」にあるように避けることが一般的に推奨される。本ガイドラインでも同じ立場である。よく言及されるように、以下のような不都合がある。</p><ul><li>クエリの条件にdeleted_flg が増えることとなり、可読性／保守性が低下</li><li>性能劣化の懸念</li><li>一意制約など整合性を維持しにくくなる</li></ul><p>論理削除したい場合は、以下の流れで検討を実施する。</p><ol><li>論理削除ではなく、より業務的に意味をなすカラム名に設計する。例えば以下のようなカラムにすることが考えられる <ul><li>社員マスタにおいて、「退職フラグ」</li><li>メッセージ通知トランにおいて、「既読フラグ」</li><li>キャンペーントランにおいて、「有効期間切れフラグ」</li><li>商品マスタにおいて、「廃盤フラグ」</li><li>承認依頼において「ステータス区分」</li></ul></li><li>本当に削除する要件の場合 <ul><li>物理削除（DELETE）を行い、必要に応じてアーカイブテーブルにINSERTする</li><li>アーカイブするかどうかの是非は、削除データの復元要件（誤操作時の救済）や、ユーザーが監査などの目的で削除データを参照する可能性の有無に依存する。ECなどでユーザーの解約にともなう削除は、GDPRなど法律やビジネス上の要求でアーカイブ無しでの物理削除が求められるケースもある</li></ul></li></ol><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://www.slideshare.net/slideshow/ronsakucasual/52256922" target="_blank" rel="noreferrer">SQLアンチパターン 幻の第26章「とりあえず削除フラグ」</a></li><li><a href="https://ledsun.hatenablog.com/entry/2015/03/27/015203" target="_blank" rel="noreferrer">論理削除という名の死亡フラグ</a></li><li><a href="https://dekasasaki.tumblr.com/post/69487259373/%E8%AB%96%E7%90%86%E5%89%8A%E9%99%A4%E3%81%8C%E5%A5%AA%E3%81%86%E3%82%82%E3%81%AE" target="_blank" rel="noreferrer">論理削除が奪うもの</a></li><li><a href="https://qiita.com/Jxck/items/156d0a231c6968f2a474" target="_blank" rel="noreferrer">https://qiita.com/Jxck/items/156d0a231c6968f2a474</a></li></ul></div><h2 id="クライアント管理" tabindex="-1">クライアント管理 <a class="header-anchor" href="#クライアント管理" aria-label="Permalink to &quot;クライアント管理&quot;">​</a></h2><h3 id="コネクションプール" tabindex="-1">コネクションプール <a class="header-anchor" href="#コネクションプール" aria-label="Permalink to &quot;コネクションプール&quot;">​</a></h3><p>コネクションプールは、DBとの接続をあらかじめ確保しておき、それを再利用する仕組みである。Webサーバーなど常駐型のアプリケーションがDBに接続する際、毎回新しい接続を確立するのではなく、プールから既存の接続を取得して使用することで、コネクション生成時の負荷を軽減し、応答時間を短縮できる。</p><p>コネクションプールの設定値を決定する際には、アプリケーションの特性やDBの負荷状況などを考慮して設定する必要がある。最終的には本番相当のシナリオで性能試験を行ったうえで設定値の妥当性を担保することが望ましい。</p><table tabindex="0"><thead><tr><th style="text-align:left;">項目</th><th style="text-align:left;">推奨</th></tr></thead><tbody><tr><td style="text-align:left;">最小アイドル数</td><td style="text-align:left;">コネクションプールのアイドル状態で保持する接続数を設定する。通常のリクエスト量に対して対応できる接続数を最低限として設定する</td></tr><tr><td style="text-align:left;">最大接続数</td><td style="text-align:left;">コネクションプールが確保できる最大の接続。ピーク時にも耐えられる接続数を設定する。過度に大きな値はDBそのものに影響を及ぼすため、避ける</td></tr><tr><td style="text-align:left;">最大待機時間</td><td style="text-align:left;">コネクションプールから接続を取得する際に、接続が空くまでの最大待機時間を設定する</td></tr><tr><td style="text-align:left;">最大寿命</td><td style="text-align:left;">コネクションプールに生存する最大時間。<br>定期的にコネクションを破棄することで、意図せず不安定になったコネクションを取り除き、自律的な復旧が可能になる。必須で設定する</td></tr></tbody></table><p>なお、プロセスが短命なバッチ処理の場合は、利用するDBアクセスが通常1つであるため、アプリケーションでコネクションプールを利用しないほうが効率的である。小さなバッチ処理が大量に起動するような場合は、RDSプロキシのようにミドルウェア側にコネクションプールを持たせることも検討する。</p><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="http://dsas.blog.klab.org/archives/2018-02/configure-sql-db.html" target="_blank" rel="noreferrer">Re: Configuring sql.DB for Better Performance</a></p></div><h3 id="o-rマッパ" tabindex="-1">O／Rマッパ <a class="header-anchor" href="#o-rマッパ" aria-label="Permalink to &quot;O／Rマッパ&quot;">​</a></h3><p>O/Rマッパ（Object-Relational Mapping）はプログラミング言語のオブジェクトとDBテーブルを対応付ける仕組みで、これを用いることで以下のメリットがある。</p><ul><li>SQLを書かずに済む</li><li>画面から複数の検索条件を指定できる場合に、サーバー上で動的にクエリを作成しやすい</li></ul><p>推奨は以下の通り。</p><ul><li>SQLを記載しないタイプのO/Rマッパ（クエリビルダー）は利用しない <ul><li>クエリ結果をその言語のオブジェクトなどにマッピングするライブラリの利用は問題ない</li></ul></li><li>動的なクエリ作成は、2Way-SQLの利用を推奨する</li><li>バッチなど、動的なクエリを作成する必要がない場合は、sqlc などSQLを解析してコードを生成できるツールの利用を推奨する</li></ul><p>理由は以下の通り。</p><ul><li>スロークエリが発生した場合に、O/Rマッパを利用しているとDBAなど必ずしもその言語／フレームワークに精通しているとは限らない専門家が、チューニングを実施しにくい</li><li>O/Rマッパの関連テーブルの扱いでトラブルになった時に検知しにくい。そういった機能の有無を調査する必要がある。一口にO/Rマッパといっても、期待値がメンバーで揺れやすい</li><li>コードレビュー時にレビュアーが、O/Rマッパの発行したクエリを確認しにくい</li><li>ヒント句による実行計画の制御が行いにくい</li></ul><div class="tip custom-block"><p class="custom-block-title">単一テーブル操作のSELECT/INSERTなどの操作は許容したい？</p><p>SQLで結合しないSELECT/INSERTなどの操作は許容したいという声も多いが、以下の観点から許容しない。</p><ul><li>単一テーブル操作が、SQL／O/Rマッパでの実装が揺れる可能性がある。揺れさせない場合、単一テーブル時はO/Rマッパの使用を強制することになり開発ルールが増える</li><li>将来的なのDB切り替えを伴うリプレイスでの、SQL自動変換対象のスコープを絞るため</li><li>実装方針を寄せない場合、影響度調査などのコストがあがる（静的解析などの手間も）ため、許容できない <ul><li>例えば、どのアプリケーションが、どのテーブル×カラムを利用しているか調査したい場面も多い。実装方針が統一されているとLinterだけではなく、こういった解析ツールの手間も減る</li></ul></li><li>単一テーブル操作がO/Rマッパ実装を許容した場合、保守運用フェーズなど、プロジェクトライフサイクルの最後までテーブル結合が必要になったタイミングでSQLにリライトすることが守られるかと言うと疑問であるため</li></ul></div><h3 id="sqlチューニング方針" tabindex="-1">SQLチューニング方針 <a class="header-anchor" href="#sqlチューニング方針" aria-label="Permalink to &quot;SQLチューニング方針&quot;">​</a></h3><p>SQLの書き方は <a href="https://future-architect.github.io/coding-standards/documents/forSQL/" target="_blank" rel="noreferrer">https://future-architect.github.io/coding-standards/documents/forSQL/</a> に準じる。</p><p>ヒント句については以下の方針とする。</p><ul><li>開発時に全クエリに記載せず、原則プランナーが作成する実行計画に委ねる</li><li>もし、実行計画が何かしらの理由で想定通りにならない、安定しないなどの理由で固定化したい場合に限り、ヒント句、後述のSET、WITH句（CTE(Common Table Expressions)によるクエリの書き換え）で固定化する</li></ul><p>理由は以下の通り。</p><ul><li>ヒント句を知ったばかりの時は、できる限りヒント句による調整を行いたくなってしまうが、SQLクエリの保守運用性が低下するため <ul><li>なぜそのヒント句を付けたか、引き継ぎされたメンバーが混乱する</li><li>クエリ改修時に、ヒント句と整合性を保つことが難しいため</li></ul></li></ul><p>ヒント句を記載したが上手く効かない場合は、SETでのパラメータ調整をしたくなる場合がある。例えば、Nested Loop Joinに限定したい場合に、マージジョイン、ハッシュジョインの無効化できる。書き方としては、SETで実行時パラメータとして渡すか、SQLでの記載の3種類が存在する。本ガイドラインでは3を推奨する。</p><table tabindex="0"><thead><tr><th style="text-align:left;">手法</th><th style="text-align:left;">例</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">１．アプリからSET LOCAL呼び出し</td><td style="text-align:left;">SET LOCAL enable_mergejoin = off;<br> SET LOCAL enable_hashjoin = off;</td><td style="text-align:left;">SQLクエリチューニング時に調整しにくい。</td></tr><tr><td style="text-align:left;">２．SQL中でSET LOCAL</td><td style="text-align:left;">SET LOCAL enable_mergejoin = off;<br> SET LOCAL enable_hashjoin = off;<br> SELECT xxx FROM （省略）</td><td style="text-align:left;">SQLクエリチューニングでは問題ないが、コード生成などツール面でハマる可能性がある</td></tr><tr><td style="text-align:left;">３．SQLヒント句上に記載 ☆推奨</td><td style="text-align:left;">/_+<br> Set(enable_mergejoin off)<br> Set(enable_hashjoin off)<br> Leading((a b))<br> NestLoop(a b)<br> _/<br> SELECT xxx FROM （省略）</td><td style="text-align:left;">SQLクエリチューニングに適し、ツール面でハマる可能性が低い（SQLコメントとして解釈されるため）</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://soudai.hatenablog.com/entry/2020/11/09/173851" target="_blank" rel="noreferrer">PostgreSQL 10からNested Loop Joinを選びにくい - そーだいなるらくがき帳</a></li><li><a href="https://www.fujitsu.com/jp/products/software/resources/feature-stories/postgres/article-index/tuningrule9-introduction/" target="_blank" rel="noreferrer">パフォーマンスチューニング9つの技 ～はじめに～｜PostgreSQLインサイド : 富士通</a></li><li><a href="https://www.postgresql.jp/document/16/html/sql-set.html" target="_blank" rel="noreferrer">SET</a></li></ul></div><h2 id="海外対応" tabindex="-1">海外対応 <a class="header-anchor" href="#海外対応" aria-label="Permalink to &quot;海外対応&quot;">​</a></h2><h3 id="国際化" tabindex="-1">国際化 <a class="header-anchor" href="#国際化" aria-label="Permalink to &quot;国際化&quot;">​</a></h3><p>国際化対応アプリケーションを実装する場合は多言語化がどのレベルで必要なのかを考慮する必要がある。また、アプリケーション内部でのみ対応すればよいのか、データも多言語化が必要なのかを考える必要がある。</p><p>例えば、ユーザーインタフェースなどの多言語化だけであれば、アプリケーションにi18nのビューライブラリを利用してメッセージの切り替えだけ実装すれば対応でき、DBへの変更は不要。</p><p>商品マスタなどで最終的なアプリケーションユーザーに表示される商品名、説明文がマスタに入っている場合は対応が必要だが、もし次のような対応が可能であればDB上の対応は不要。</p><ul><li>アメリカ向け、日本向け、中国向けなど、動作する場所ごとにDBインスタンスが完全に分かれており、各国のサービスは単一の言語のみをサポートする場合</li><li>同一DBインスタンスであるが、英語圏向け商品、日本語圏向け商品を（実態は同一であっても）別の商品として登録する場合</li></ul><p>ただし、これらの場合も商品マスタを上流のシステムから取り込むときに、必要なラベル情報を選択して取り込むなどの対応は必要となる。</p><p>1つのDBで複数言語に対応し、自由に切り替えられるようにする（日本語でも英語でも同一エンティティの商品にアクセスする必要がある）場合は、表示ラベルマスタなどのテーブルを定義し、元のマスタテーブルから表示用のラベル情報を正規化して分離し、フロントエンドに返すときに結合して返す。</p><p>表示言語の選択はWebアプリケーションの場合は、 Accept-Languageヘッダーフィールドの言語を使うことで対応できるが、非同期処理の通知メール送信などがある場合は、必要なタイミングで情報が得られないため、ユーザーマスタに利用したい言語を持たせる必要がある。あるいは、対応する言語数が2つ程度であれば、日本語・英語併記のメール文面にしてしまうことも可能。</p><h3 id="タイムゾーン管理" tabindex="-1">タイムゾーン管理 <a class="header-anchor" href="#タイムゾーン管理" aria-label="Permalink to &quot;タイムゾーン管理&quot;">​</a></h3><p>オライリーから出版されている「ソフトウェア設計のトレードオフと誤り」によると、時間を持つ情報があるシステムは時刻情報とともに、その時のアクションを行ったユーザーのタイムゾーン情報を持つべきと紹介している。</p><p>例えば、8:00に商品購入したとして、UTCに変換してDBに登録してしまうと、もし夏時間が始まってからそのログを見た時に、9:00と出てしまうことになる。ユーザーの感覚は「そのときの時計の時刻」が正であるため、結果の改ざんに見えてしまう問題が発生する。</p><p>PostgreSQLのタイムゾーン付きのタイムスタンプのデータは、内部的にUTCに変換してしまうため、この用途では使えないため、このフィールドとは別にタイムゾーン情報を持たせる必要がある。</p><p>下記のテーブル例では、購入日時（purchased_at）をアプリ側でUTCに変換後、utc_offsetを用いて購入時のタイムゾーン（オフセット）で復元してユーザーに表示する必要がある。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 商品購入履歴テーブル</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hist_purchase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    purchase_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    item_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 商品ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    quantity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 購入数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    unit_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NUMERIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 単価</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    purchased_at </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TIMESTAMPTZ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- UTC時間で保存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    utc_offset INTERVAL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         -- UTCオフセット（-08:00 などの情報）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>夏時間は廃止方向なので、厳密に対応しない、というのもビジネス判断として可能性がある。その場合はUTCに変換して、ブラウザなどの表示側でローカル時間に変換する方法で十分である。また、バッチ処理の時間をどのタイムゾーンの0:00でやるか、というロジックが必要になった場合、サーバーが仕向け地ごとに立っているのでなければ、ユーザーごとのタイムゾーン情報をユーザーマスタに追加する必要がある。ただし、現在はソーシャルゲーム等ではUTCの時刻を扱って地域差を考慮しないケースも増えてきているため、用途によっては不要である。</p><h2 id="マルチテナント" tabindex="-1">マルチテナント <a class="header-anchor" href="#マルチテナント" aria-label="Permalink to &quot;マルチテナント&quot;">​</a></h2><p>B2Bサービス開発においては、通常マルチテナント設計を求められる。基本的にはテナント間のデータを分離する必要があり、あるテナントが別のデータにアクセス可能な状態になりえることは許容できない。</p><h3 id="テナント分離設計" tabindex="-1">テナント分離設計 <a class="header-anchor" href="#テナント分離設計" aria-label="Permalink to &quot;テナント分離設計&quot;">​</a></h3><p>大きな設計ポイントとして、どの粒度でテナントを分離するかがある。主に以下の4パターンが存在する。</p><table tabindex="0"><thead><tr><th style="text-align:left;">分類</th><th style="text-align:left;">No</th><th style="text-align:left;">方式</th></tr></thead><tbody><tr><td style="text-align:left;">サイロモデル</td><td style="text-align:left;">1</td><td style="text-align:left;">テナントをインスタンスで分離</td></tr><tr><td style="text-align:left;">ブリッジモデル</td><td style="text-align:left;">2</td><td style="text-align:left;">テナントをDBで分離</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">3</td><td style="text-align:left;">テナントをスキーマで分離</td></tr><tr><td style="text-align:left;">プールモデル</td><td style="text-align:left;">4</td><td style="text-align:left;">テナントを単一テーブルで管理しRow Level Security（RLS）で分離</td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">MySQLやSQLiteの場合はスキーマが存在しない</p><p>他RDBMSではスキーマ分離の設計案が転用ができない可能性がある。また、MySQLは2025年5月時点ではRLSをサポートしていない。</p></div><table tabindex="0"><thead><tr><th style="text-align:left;">分類</th><th style="text-align:left;">観点</th><th style="text-align:left;">インスタンス分割</th><th style="text-align:left;">DB分割</th><th style="text-align:left;">スキーマ分割</th><th style="text-align:left;">RLS分離</th></tr></thead><tbody><tr><td style="text-align:left;">リソース</td><td style="text-align:left;">ノイジーネイバー対策</td><td style="text-align:left;">✅️</td><td style="text-align:left;">❌️コネクション数制御</td><td style="text-align:left;">❌️弱い。DBユーザー共有</td><td style="text-align:left;">❌️弱い。DBユーザー共有</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">リソースの平準化 （費用最適化）</td><td style="text-align:left;">❌️完全分離</td><td style="text-align:left;">✅️同一インスタンスで平準化できるため</td><td style="text-align:left;">✅️同一インスタンスで平準化できるため</td><td style="text-align:left;">✅️同一インスタンスで平準化できるため</td></tr><tr><td style="text-align:left;">性能</td><td style="text-align:left;">コネクションプール共有</td><td style="text-align:left;">❌️テナントごとに異なるコネクション</td><td style="text-align:left;"><strong>❌️</strong>DB単位にコネクションを作成するため</td><td style="text-align:left;">✅️SET LOCAL ROLEでテナント単位にロールを切り替えた前提</td><td style="text-align:left;">✅️current_setting()などからテナントIDを指定する方式ならば</td></tr><tr><td style="text-align:left;">セキュリティ</td><td style="text-align:left;">権限の分離性</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td><td style="text-align:left;">⚠️きちんと制御すれば</td><td style="text-align:left;">⚠️きちんと制御すれば</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">アプリユーザ権限</td><td style="text-align:left;">ー</td><td style="text-align:left;">ー</td><td style="text-align:left;">⚠️SET ROLE 権限が追加</td><td style="text-align:left;">ー</td></tr><tr><td style="text-align:left;">拡張性</td><td style="text-align:left;">リソースの柔軟性</td><td style="text-align:left;">✅️特定のテナントのみ増強可能</td><td style="text-align:left;">⚠️しにくい</td><td style="text-align:left;">⚠️しにくい</td><td style="text-align:left;">⚠️しにくい</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">スケールアウト</td><td style="text-align:left;">✅️最初からスケールアウト済み</td><td style="text-align:left;">✅️ シャーディングで対応可能</td><td style="text-align:left;">✅️ シャーディングで対応可能</td><td style="text-align:left;">✅️ シャーディングで対応可能</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">テナントグループの設計コスト</td><td style="text-align:left;">✅️無し</td><td style="text-align:left;">⚠️あり</td><td style="text-align:left;">⚠️あり</td><td style="text-align:left;">⚠️あり</td></tr><tr><td style="text-align:left;">保守運用</td><td style="text-align:left;">DB拡張</td><td style="text-align:left;">⚠️pg_hintなどの拡張機能もDB単位でセットアップが必要</td><td style="text-align:left;">⚠️pg_hintなど拡張機能はDB単位で設定が必要</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">アップグレード粒度</td><td style="text-align:left;">✅テナント単位</td><td style="text-align:left;">⚠️複数テナントまとめて対応</td><td style="text-align:left;">⚠️複数テナントまとめて対応</td><td style="text-align:left;">⚠️複数テナントまとめて対応</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">マスタ配信コスト</td><td style="text-align:left;">❌️テナント毎に連携</td><td style="text-align:left;">❌️テナント毎に連携</td><td style="text-align:left;">✅️共有用のスキーマを参照することが可能</td><td style="text-align:left;">✅️</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">スキーマ管理コスト</td><td style="text-align:left;">❌️テナント毎に適用</td><td style="text-align:left;">❌️テナント毎に適用</td><td style="text-align:left;">⚠️テナント毎。スキーマ共有で緩和可能</td><td style="text-align:left;">✅️ERD変更が少なくて済む</td></tr><tr><td style="text-align:left;">可用性</td><td style="text-align:left;">性能監視</td><td style="text-align:left;">⚠️</td><td style="text-align:left;">⚠️pg_stat_activityなどのカタログはDB単位のため、横断検索が不可</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">バックアップ</td><td style="text-align:left;">✅️テナント単位</td><td style="text-align:left;">⚠️インスタンス単位なので、複数テナントが混ざる</td><td style="text-align:left;">⚠️インスタンス単位なので、複数テナントが混ざる</td><td style="text-align:left;">⚠️インスタンス単位なので、複数テナントが混ざる</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">スキーマ分離の方式についての補足</p><p>マルチテナントにおいては以下のように3つの分離パターンが考えられる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">観点</th><th style="text-align:left;">1.スキーマ単位でDBユーザー</th><th style="text-align:left;">2.単一ユーザー＋search_pathで切り替え</th><th style="text-align:left;">3.単一ユーザー＋SET ROLEで切り替え</th></tr></thead><tbody><tr><td style="text-align:left;">概要</td><td style="text-align:left;">テナント毎にスキーマで分離、それぞれのDBユーザーを作成。DB接続時に切り替え</td><td style="text-align:left;">DBユーザーは各テナントで共有し、接続後にSET search_path TO tenant_1; といった形で切り替え</td><td style="text-align:left;">DBユーザーは各テナントで共有し、SET LOCAL ROLE tenant_1; で切り替え</td></tr><tr><td style="text-align:left;">セキュリティの分離性</td><td style="text-align:left;">✅️</td><td style="text-align:left;">⚠️スキーマ指定で他テナントのデータが参照可</td><td style="text-align:left;">✅️最初にSET ROLEすることで厳密な制御が可能</td></tr><tr><td style="text-align:left;">コネクションプール</td><td style="text-align:left;">❌️テナント単位で作る必要</td><td style="text-align:left;">✅️複数テナントで共有可能</td><td style="text-align:left;">✅️複数テナントで共有可能</td></tr></tbody></table><p>もっともバランスが取れた「3.単一ユーザー＋SET ROLE」の方式を採用する。</p></div><div class="tip custom-block"><p class="custom-block-title">ノイジーネイバー問題に対するリソース制限</p><p>アプリケーション側で、テナント毎に適切なRate Limitをかけることで、間接的にDB負荷を平準化させることも同時に検討する。</p><p>なお、コネクションプールせずに、DB接続の都度コネクション接続する方式であれば、DBユーザーを共有してもテナントごとにコネクション数による制限も可能だが、コネクション作成コストはPostgreSQL 17時点では重い処理のため考慮していない。</p></div><div class="tip custom-block"><p class="custom-block-title">RDSプロキシの利用</p><p>アプリケーション側で都度コネクションを張る方式を利用すると、DBサーバー側の負荷が高いと考えられる。その場合、RDSプロキシを導入することで緩和は可能。アプリケーションとRDSプロキシ間は都度コネクションを張るが、RDSプロキシとDBサーバー間はコネクションプールされた状態であるためである。各プロキシは最大200まで接続先を持てるため、仮にテナント数が2000であれば、RDSプロキシは最低でも10必要となる。この場合、あるテナントに接続するときにどのRDSプロキシを経由するかは、アプリケーション側で機械的に振り分けるようにする。</p></div><p>推奨は以下の通り。</p><ul><li>費用の許容度が高く、ノイジーネイバーの問題をゼロにする強い制約があればインスタンス分離する（しかない）</li><li>テナント数が多大であれば、スキーマ適用コストを抑えるためにRLSを採用する</li></ul><div class="warning custom-block"><p class="custom-block-title">あるテナントのみ独自カラムを追加することは非推奨</p><p>あるテナントのみトライアル機能を提供することはありえるが、最終的にはテナント間で、スキーマに差は発生させるべきではない。保守運用観点からスキーマに亜種を生じさせないようにする。</p></div><div class="info custom-block"><p class="custom-block-title">参考</p><p>サイロモデル、ブリッジモデル、プールモデルは、<a href="https://d1.awsstatic.com/whitepapers/ja_JP/Multi_Tenant_SaaS_Storage_Strategies.pdf" target="_blank" rel="noreferrer">AWS でのマルチテナントストレージモデルの構築</a> の「SaaS パーティション分割モデル」章にある用語を用いている。</p></div><h3 id="マルチテナントのシャーディング" tabindex="-1">マルチテナントのシャーディング <a class="header-anchor" href="#マルチテナントのシャーディング" aria-label="Permalink to &quot;マルチテナントのシャーディング&quot;">​</a></h3><p>テナント分離方式に、「インスタンス分割」以外の3つの方式を採用した場合、テナント数の規模によってはDBシャーディングが必要になってくる。この場合はどのような粒度でテナントを相乗り／分割するかによって、リソースの効率性を上げ、ノイジーネイバー問題を抑えることが可能となる。</p><p>テナントの振り分けは、パーティションと同じようにハッシュ、IDの範囲などの方式が考えられる。</p><p>以下のような設計案が考えられる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">設計案</th><th style="text-align:left;">1.テナントIDハッシュ／範囲</th><th style="text-align:left;">2.大口のみ分離+残りは設計1</th></tr></thead><tbody><tr><td style="text-align:left;">概要</td><td style="text-align:left;">機械的にハッシュで振り分け。各テナントでリソースの偏りが大きくない場合に有効</td><td style="text-align:left;">大口顧客のみDBを分離し、小口顧客はDB共有で対応</td></tr><tr><td style="text-align:left;">ノイジーネイバー対策</td><td style="text-align:left;">確実ではないが平準化される</td><td style="text-align:left;">特定の大口顧客を分離するため、リスクが多少軽減</td></tr><tr><td style="text-align:left;">設計コスト</td><td style="text-align:left;">✅️機械的に対応可能</td><td style="text-align:left;">⚠️何をもって大口顧客とするか定義が曖昧かつ、顧客のサービス利用実体の変化追随が大変</td></tr><tr><td style="text-align:left;">アップグレード運用</td><td style="text-align:left;">各テナントを意識せず、各DBノード単位で実施</td><td style="text-align:left;">大口のみリリース時期をずらすなど個別調整が可能</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>基本的にはテナント毎に区別せず、テナントIDを用いての機械的にシャーディングを行う</li><li>あるテナントのみが非常に大きいなどで機械的なシャーディングが不可な場合のみ、特殊ロジックを入れる</li></ul><h2 id="排他制御" tabindex="-1">排他制御 <a class="header-anchor" href="#排他制御" aria-label="Permalink to &quot;排他制御&quot;">​</a></h2><p>排他制御とは、複数のトランザクションが同時に同じデータにアクセスする際に、データの一貫性や整合性を保つための制御方法のことを指し、データの競合や不整合を防ぐことを目的とする。</p><h3 id="トランザクション分離レベル" tabindex="-1">トランザクション分離レベル <a class="header-anchor" href="#トランザクション分離レベル" aria-label="Permalink to &quot;トランザクション分離レベル&quot;">​</a></h3><p>トランザクションの分離レベルは、標準SQLでは下表で規定されている。</p><table tabindex="0"><thead><tr><th style="text-align:left;">分離レベル</th><th style="text-align:left;">説明</th><th style="text-align:left;">補足</th></tr></thead><tbody><tr><td style="text-align:left;">READ UNCOMMITTED</td><td style="text-align:left;">未コミットの変更を読み取る可能性</td><td style="text-align:left;">PostgreSQLでは利用不可</td></tr><tr><td style="text-align:left;">READ COMMITTED</td><td style="text-align:left;">コミット済みの変更のみを読み取る。</td><td style="text-align:left;">デフォルト</td></tr><tr><td style="text-align:left;">REPEATABLE READ</td><td style="text-align:left;">トランザクション開始〜終了 まで一貫した読み取りが保証される。ファントムリードは防げない</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">SERIALIZABLE</td><td style="text-align:left;">トランザクションは完全にシリアル化され、同時に実行された複数のトランザクションが順序づけられるかのように扱われ、一貫性が最も保証される。</td><td style="text-align:left;"></td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>PostgreSQLデフォルトである「READ COMMITTED」で動作させる <ul><li>理由1: SELECT FOR UPDATEで排他ロックを取ることで、業務処理で必要な整合性を守ることができる</li><li>理由2: PostgreSQLでは「REPEATABLE READ」以上のレベルにすると、MySQL よりも積極的・予防的に競合エラーを起こすようになっているため</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://qiita.com/mpyw/items/14925c499b689a0cbc59" target="_blank" rel="noreferrer">WHERE 条件のフィールドを UPDATE するのって，明示的にロックしてなくても安全？全パターン調べてみました！ #MySQL - Qiita</a></p></div><p>「REPEATABLE READ」を利用する方針としては以下のいずれかの条件に一致する場合とする。</p><ul><li>条件1: WHERE 句に含まれるサブクエリの SELECT から自己参照が発生する場合（業務上、利用することはほとんど無い想定）</li></ul><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- WHERE 条件のフィールドを UPDATE するのって，明示的にロックしてなくても安全？全パターン調べてみました！ #MySQL - Qiita より引用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> products</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> remaining_amount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remaining_amount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> EXISTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> products </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> remaining_amount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ) tmp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>条件2: 複雑なレポート生成など、トランザクション中での数値計算の整合性を保ちたい場合（業務上、利用することはほとんど無い想定）。ただし、ファントムリードは防げないため、REPEATABLE READを信用しすぎないこと。また本当に業務要件で求められる整合性はよく整理すること。</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://postd.cc/practical-guide-sql-isolation/" target="_blank" rel="noreferrer">SQLトランザクション分離 実践ガイド | POSTD</a></p></div><h3 id="アプリケーション排他制御" tabindex="-1">アプリケーション排他制御 <a class="header-anchor" href="#アプリケーション排他制御" aria-label="Permalink to &quot;アプリケーション排他制御&quot;">​</a></h3><p>バッチ処理の同時実行数制御などは、共有ファイルを用いた手法が存在するが、本ガイドラインの対象外とする。DBを用いてのロック手法には以下の2種類が存在する。</p><table tabindex="0"><thead><tr><th style="text-align:left;">ロック手法</th><th style="text-align:left;">説明</th><th style="text-align:left;">主な特徴</th></tr></thead><tbody><tr><td style="text-align:left;">楽観的ロック</td><td style="text-align:left;">データを変更する前にロックを取得せず、更新時にデータのバージョンを確認し、競合がないことを確認し整合性を担保する</td><td style="text-align:left;">主に読み取りが多いシナリオで効率的。競合が発生した場合、トランザクションをリトライする必要がある≒<strong>変更内容を再入力してもらうことが許容できるか</strong>の考慮が必要</td></tr><tr><td style="text-align:left;">悲観的ロック</td><td style="text-align:left;">データ変更前にロックを取得し、他のトランザクションが該当レコードにアクセス不可にさせる手法だが、Webシステムでは通常、実現が難しい。ロック／ロック解放もアプリケーションで実装する必要がある。</td><td style="text-align:left;">変更前に検知できるため、競合を確実に回避可能（手戻りを無くせる）。長時間ロックを保持してしまうとユーザビリティが低下する懸念</td></tr><tr><td style="text-align:left;">DBによる行ロック</td><td style="text-align:left;">UPDATEなどの更新処理で<code>RowExclusiveLock</code>を取るため、他のトランザクションからの更新を待たせることができる。そのことから更新条件や更新結果を上手く扱うと整合性を担保できる</td><td style="text-align:left;">SQL単発のため最も効率的。一方で更新条件、更新件数などの結果で、業務上正しく更新できたか判定する必要がある。在庫引当のような数量の更新では有効、マスタの設定変更のようなケースには不向き</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>複数のユーザーやバッチ処理が、あるテーブルのレコードを同時に変更しうる場合は、上記ロックを取得して競合を防ぐ（ユーザー間の別のだれかの変更を誤って上書きしないようにする）</li><li>楽観的ロックを優先的に採用する</li><li>業務上不可欠でなければ（入力中データの破棄がどうしても許容できない限り）悲観的ロックな思想の画面設計を可能な限り避ける</li><li>DBによる行ロックは在庫の引き当てなど性能上クリティカルになりえる処理においてのみ検討する</li></ul><h4 id="楽観的ロック" tabindex="-1">楽観的ロック <a class="header-anchor" href="#楽観的ロック" aria-label="Permalink to &quot;楽観的ロック&quot;">​</a></h4><p>以下の2案の設計方式があり、案2が推奨である。</p><div class="img-bg-transparent"><table tabindex="0"><thead><tr><th style="text-align:left;">項目</th><th style="text-align:left;">１．条件にバージョンを指定しUPDATEの更新件数で比較</th><th style="text-align:left;">２．更新直前でSELECT FOR UPDATEしバージョンを比較 ☆推奨</th></tr></thead><tbody><tr><td style="text-align:left;">フロー図</td><td style="text-align:left;"><a href="https://mermaid.live/edit#pako:eNqlVMtO20AU_RVrVkUKP2AVFpGR2kU37aJS5c0oHsBSYqdmvEAIKZ6pREBCtSoeiyKqoEDoEyICjZqIfMy1nXTFL3Q8E4KbBmipLVkz1-ece--Z0V1BBdciSEdL5LVPnAIxbLzg4ZLpaOIpY4_aBbuMHaoBPwLeBXYhvhP-sgPgu8A_AWtK2HfgDeBnfyKNvOmkbxrPamrTs7O3yuha1K4MjhpJfa_fOhiSb8FKISOvawoM7ATYsYD9rARRr6a4Rl6bvjufIvfPw2R_b9Dbijdbj-LwDfAvwM5SJF-H4Buwr-k6EPKhpLcVHdi7OPwMrDJ1X6myiIwLY4lrx_36jwf5BXxNBnrJ-1ayc5rRuNc2SRiz7apbfWpMbPTlk7nnc_HbQwga_fN9YBuDS-FI76q7rvLhIh1KRp2LZPtUm5kZ7uOTy0FzeCB_eSiSl1TDeOPDDe-f3M0oAK8B58A6qqNrs1NJUlwiv1f9-D-LjuvNZHtX2DjmYNTeTK_2Wku6_VH8Gjn3sN5Uoom9iexRZydLgkDc0qo4NMUdpSaOhXKoRLwSti0xHVbSsInoIikRE-liaZF57BepiUxnVUCxT90Xy04B6dTzSQ55rr-wiPR5LIzMIb9sYXo9WkZRMQ5eue7Nnlg2db1nah7JsbT6Cwrohpc" target="_blank" rel="noreferrer"><img src="https://mermaid.ink/img/pako:eNqlVMtO20AU_RVrVkUKP2AVFpGR2kU37aJS5c0oHsBSYqdmvEAIKZ6pREBCtSoeiyKqoEDoEyICjZqIfMy1nXTFL3Q8E4KbBmipLVkz1-ece--Z0V1BBdciSEdL5LVPnAIxbLzg4ZLpaOIpY4_aBbuMHaoBPwLeBXYhvhP-sgPgu8A_AWtK2HfgDeBnfyKNvOmkbxrPamrTs7O3yuha1K4MjhpJfa_fOhiSb8FKISOvawoM7ATYsYD9rARRr6a4Rl6bvjufIvfPw2R_b9Dbijdbj-LwDfAvwM5SJF-H4Buwr-k6EPKhpLcVHdi7OPwMrDJ1X6myiIwLY4lrx_36jwf5BXxNBnrJ-1ayc5rRuNc2SRiz7apbfWpMbPTlk7nnc_HbQwga_fN9YBuDS-FI76q7rvLhIh1KRp2LZPtUm5kZ7uOTy0FzeCB_eSiSl1TDeOPDDe-f3M0oAK8B58A6qqNrs1NJUlwiv1f9-D-LjuvNZHtX2DjmYNTeTK_2Wku6_VH8Gjn3sN5Uoom9iexRZydLgkDc0qo4NMUdpSaOhXKoRLwSti0xHVbSsInoIikRE-liaZF57BepiUxnVUCxT90Xy04B6dTzSQ55rr-wiPR5LIzMIb9sYXo9WkZRMQ5eue7Nnlg2db1nah7JsbT6Cwrohpc?type=png" alt=""></a></td><td style="text-align:left;"><a href="https://mermaid.live/edit#pako:eNqVk2Fr2kAYx79KuFcb2C-QF4W5OBA2Otb6ZuTNYa5tQBMXkxejFHp3sNniqJRVGSs4nVixYDtW1s6K_TCPMXnXr7BLYk116WAJhMvd757n__zvnh2UNzWCZFQm7xxi5Imi4y0LF1VDEk8JW7ae10vYsKVcmVgSLkvAu8BHwH6JbwKVDRnWBt4A3gf2I4SvgJ8C__k3r6QDXkmrRvAGq0GeldXVXFYWqT6Gu28n13t-9xTY0bRz4l22Z2BWYEpaltYzLzPPN4CdA-uJnO6g6beqEaOkVx6N5d9-BvplHivgROoHpN_qeZ3hv5UFmr5eTusXiZqkF2tvpNxr5dlGZkme9MQ7HLsnPaCDh7Hcw7o7bgAV3tXCyevIOKBjoE2g5yHWAf4N2O9gLJaE0ezIaw_9_qeny1UnJokKvxtV_jeJWzsDtnc32r93BBdsaSmIezXwji-A9kUREbTgS6IZMRcrj1ydVmruQXMhzvycIsIdVCfDD8BbwDmwm5kUUeTs8IJdpFAmj-lkwA6S48eW0erkph6aGF99oMKLCtDvQLtuZ1-IAXoMrBqa2Ah97C1oMDSUQkViFbGuiX7bCaZVZG-TIlGRLIYa2cROwVaRauwKFDu2uf7eyCPZthySQpbpbG0jeROLYlLIKWnYvm_W-axoqbemGf8TTbdN61XU4WGj7_4B8ZTyqQ" target="_blank" rel="noreferrer"><img src="https://mermaid.ink/img/pako:eNqVk2Fr2kAYx79KuFcb2C-QF4W5OBA2Otb6ZuTNYa5tQBMXkxejFHp3sNniqJRVGSs4nVixYDtW1s6K_TCPMXnXr7BLYk116WAJhMvd757n__zvnh2UNzWCZFQm7xxi5Imi4y0LF1VDEk8JW7ae10vYsKVcmVgSLkvAu8BHwH6JbwKVDRnWBt4A3gf2I4SvgJ8C__k3r6QDXkmrRvAGq0GeldXVXFYWqT6Gu28n13t-9xTY0bRz4l22Z2BWYEpaltYzLzPPN4CdA-uJnO6g6beqEaOkVx6N5d9-BvplHivgROoHpN_qeZ3hv5UFmr5eTusXiZqkF2tvpNxr5dlGZkme9MQ7HLsnPaCDh7Hcw7o7bgAV3tXCyevIOKBjoE2g5yHWAf4N2O9gLJaE0ezIaw_9_qeny1UnJokKvxtV_jeJWzsDtnc32r93BBdsaSmIezXwji-A9kUREbTgS6IZMRcrj1ydVmruQXMhzvycIsIdVCfDD8BbwDmwm5kUUeTs8IJdpFAmj-lkwA6S48eW0erkph6aGF99oMKLCtDvQLtuZ1-IAXoMrBqa2Ah97C1oMDSUQkViFbGuiX7bCaZVZG-TIlGRLIYa2cROwVaRauwKFDu2uf7eyCPZthySQpbpbG0jeROLYlLIKWnYvm_W-axoqbemGf8TTbdN61XU4WGj7_4B8ZTyqQ?type=png" alt=""></a></td></tr><tr><td style="text-align:left;">説明</td><td style="text-align:left;">更新レコードのPK＋バージョンを指定してUPDATE。更新件数 &lt; 想定件数 だった場合にROLLBACKする。そのため件数一致を必ずアプリケーション上で行う必要がある。</td><td style="text-align:left;">更新直前にSELECT FOR UPDATEで行の排他ロックを取り、取得したレコードのバージョンを比較。異なった場合はROLLBACK</td></tr><tr><td style="text-align:left;">注意</td><td style="text-align:left;">・更新時にロック番号の加算を必ず行う必要</td><td style="text-align:left;">・更新時にロック番号の加算を必ず行う必要<br>・SELECT FOR UPDATEで行ロックを取る際は、デットロックを防ぐため、ロックを取るテーブルの順序、レコードのソート順（PK順など）を決め、全てのアプリケーションがそれに従う必要</td></tr><tr><td style="text-align:left;">Pros</td><td style="text-align:left;">SELECT FOR UPDATE分のDBアクセスを減らせる</td><td style="text-align:left;">・ロックするテーブル順さえ守れば、1よりエラーハンドリングがシンプル<br> ・競合した場合は1より早く検知できるため、フィードバックを早めることができる。UPDATE処理が長い場合はUXが高められる<br> ・バッチと同一時間帯・同一データを更新する要件の場合に相性が良い</td></tr><tr><td style="text-align:left;">Cons</td><td style="text-align:left;">・更新件数のハンドリングを確実に行う必要がある。特に複数テーブルを更新する場合は、都度件数チェックが必要となる<br> ・UPDATE処理が長い場合、他のトランザクションの更新が走ってしまう余地が生まれそれを取り消すコストがある</td><td style="text-align:left;">・1よりわずかにスループット性能上不利</td></tr></tbody></table></div><p>なお、ロックについては以下のオプションがある。画面からの要求に対するロックはNOWAITを指定することが多いが、要件に合わせて待機時間を調整する。</p><table tabindex="0"><thead><tr><th style="text-align:left;">オプション</th><th style="text-align:left;">SQL例</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">オプション無し</td><td style="text-align:left;"><code>SELECT * FROM sales WHERE id = 1 for update;</code></td><td style="text-align:left;">デフォルトで待機時間は無限</td></tr><tr><td style="text-align:left;">タイムアウト指定</td><td style="text-align:left;"><code>SET LOCAL lock_timeout = 5000; SELECT * FROM sales WHERE id = 1 for update;</code></td><td style="text-align:left;">ミリ秒単位で待機時間を指定</td></tr><tr><td style="text-align:left;">待機時間無し</td><td style="text-align:left;"><code>SELECT * FROM sales WHERE id = 1 for update NOWAIT;</code></td><td style="text-align:left;">待機時間無し（ロック未取得の場合即時エラー）</td></tr><tr><td style="text-align:left;">ロック取得不可レコードはスキップ</td><td style="text-align:left;"><code>SELECT * FROM sales WHERE id = 1 for update SKIP LOCKED;</code></td><td style="text-align:left;">ロック取得不可のレコードはスキップし、その他のレコードはロックを取る</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ロック番号はバージョン番号と呼ぶこともある。 ロック番号の代わりに、最終更新日時で比較することもあるが、より厳密に制御できるロック番号の利用を推奨する。</p></div><h4 id="悲観的ロック" tabindex="-1">悲観的ロック <a class="header-anchor" href="#悲観的ロック" aria-label="Permalink to &quot;悲観的ロック&quot;">​</a></h4><p>3層型C/Sアプリケーションにおいて、最初の一覧表示時点でSELECT FOR UPDATEで行ロックを取得して悲観的ロックを実現できない。HTTPリクエスト／レスポンスでDBトランザクション境界を超えるためである。そのため、SELECT FOR UPDATEは「楽観的ロック」節の方式2にあるような使用方法となる。</p><p>もし、3層型C/Sアプリケーションにおいて画面表示時点で悲観的ロックが必要になるような要件があった場合は、要件の調整を推奨する。もし、どうしても業務上必要である場合は、ロックテーブルを作成し、行ロックのような仕組みをアプリケーション上で再現する必要がある。その際はロックの解放をどのようなタイミングで行うかも同時に設計する必要がある。</p><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://satob.hatenablog.com/entry/2023/08/20/223055" target="_blank" rel="noreferrer">Webアプリケーションにおける誤った悲観ロックの実装方法（Q&amp;A形式）</a></p></div><h4 id="dbによる行ロック" tabindex="-1">DBによる行ロック <a class="header-anchor" href="#dbによる行ロック" aria-label="Permalink to &quot;DBによる行ロック&quot;">​</a></h4><p>処理フローを下図に示す。</p>`,541)),(a(),h(p,null,{default:l(()=>[e(d,{id:"mermaid-6705",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20participant%20%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC1%0A%20%20%20%20participant%20%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC2%0A%20%20%20%20participant%20WebApp%0A%20%20%20%20participant%20DB%0A%0A%0A%20%20%20%20%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC1%20-%3E%3E%20WebApp%3A%20%E5%9C%A8%E5%BA%AB%E5%BC%95%E5%BD%93%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%20(-5)%0A%20%20%20%20WebApp%20-%3E%3E%20DB%3A%20UPDATE%20%E5%9C%A8%E5%BA%AB%20SET%20%E6%95%B0%E9%87%8F%20%3D%20%E6%95%B0%E9%87%8F%20-%205%20WHERE%20%E5%95%86%E5%93%81ID%20%3D%201%20AND%20%E6%95%B0%E9%87%8F%20%3E%3D%205%0A%20%20%20%20DB%20--%3E%3E%20WebApp%3A%20%E6%9B%B4%E6%96%B0%E6%88%90%E5%8A%9F%EF%BC%88%E6%9B%B4%E6%96%B0%E4%BB%B6%E6%95%B0%201%EF%BC%89%0A%20%20%20%20WebApp%20--%3E%3E%20%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC1%3A%20%E5%BC%95%E5%BD%93%E6%88%90%E5%8A%9F%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E8%A1%A8%E7%A4%BA%0A%0A%0A%20%20%20%20%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC2%20-%3E%3E%20WebApp%3A%20%E5%9C%A8%E5%BA%AB%E5%BC%95%E5%BD%93%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%20(-10)%0A%20%20%20%20WebApp%20-%3E%3E%20DB%3A%20UPDATE%20%E5%9C%A8%E5%BA%AB%20SET%20%E6%95%B0%E9%87%8F%20%3D%20%E6%95%B0%E9%87%8F%20-%2010%20WHERE%20%E5%95%86%E5%93%81ID%20%3D%201%20AND%20%E6%95%B0%E9%87%8F%20%3E%3D%2010%0A%20%20%20%20DB%20--%3E%3E%20WebApp%3A%20%E6%9B%B4%E6%96%B0%E5%A4%B1%E6%95%97%EF%BC%88%E6%9B%B4%E6%96%B0%E4%BB%B6%E6%95%B0%200%EF%BC%89%0A%20%20%20%20WebApp%20--%3E%3E%20%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC2%3A%20%E5%9C%A8%E5%BA%AB%E4%B8%8D%E8%B6%B3%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E8%A1%A8%E7%A4%BA%0A"})]),fallback:l(()=>[...s[0]||(s[0]=[i(" Loading... ",-1)])]),_:1})),s[4]||(s[4]=n(`<p>上図ではユーザー2の在庫不足により、在庫引当が失敗したとする。この場合は、在庫不足である旨をユーザー2に通知し、業務判断を委ねることを想定する。ユーザー1とユーザー2の処理が全く同時であったとしても、PostgreSQL上で<code>RowExclusiveLock</code>を先取りした側の処理が優先され、もう片方は待機することになる。</p><p>「DBによる行ロック」が適用できないケースは多い。</p><ul><li>マスタメンテナンスのように、前回の値が重要であるケース（後勝ちでの上書きが許容できないケース）</li><li>仮受付 -&gt; 受付 -&gt; 完了 といったステータス遷移を伴う更新</li></ul><p>特に理由がない場合は、楽観的ロックによる実装を推奨する。</p><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://qiita.com/mpyw/items/14925c499b689a0cbc59" target="_blank" rel="noreferrer">WHERE 条件のフィールドを UPDATE するのって，明示的にロックしてなくても安全？全パターン調べてみました！ - Qiita</a></li><li><a href="https://fintan.jp/wp-content/uploads/2022/03/Database-Exclusion-Control.pdf" target="_blank" rel="noreferrer">データベースの排他制御</a></li><li><a href="https://terasolunaorg.github.io/guideline/5.9.0.RELEASE/ja/ArchitectureInDetail/DataAccessDetail/ExclusionControl.html#id4" target="_blank" rel="noreferrer">https://terasolunaorg.github.io/guideline/5.9.0.RELEASE/ja/ArchitectureInDetail/DataAccessDetail/ExclusionControl.html</a></li></ul></div><h4 id="オンライン中バッチ" tabindex="-1">オンライン中バッチ <a class="header-anchor" href="#オンライン中バッチ" aria-label="Permalink to &quot;オンライン中バッチ&quot;">​</a></h4><p><a href="./../forBatch/batch_guidelines.html#オンラインとの排他制御">バッチ設計ガイドライン</a> を参照すること。</p><h2 id="テスト" tabindex="-1">テスト <a class="header-anchor" href="#テスト" aria-label="Permalink to &quot;テスト&quot;">​</a></h2><h3 id="テスト定義と方針" tabindex="-1">テスト定義と方針 <a class="header-anchor" href="#テスト定義と方針" aria-label="Permalink to &quot;テスト定義と方針&quot;">​</a></h3><p>DBを含んだテストは以下のように１〜３の分類に分けることができる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">項目</th><th style="text-align:left;">１．DB単体テスト</th><th style="text-align:left;">２．アプリ単体テスト</th><th style="text-align:left;">３．E2Eテスト</th></tr></thead><tbody><tr><td style="text-align:left;">説明</td><td style="text-align:left;">クエリや関数の単体テスト</td><td style="text-align:left;">Web APIやバッチのアプリケーションテスト</td><td style="text-align:left;">画面からの一気通貫のテスト。<br>1画面操作＝1Web API要求とは限らないため、トランザクション境界を超える必要がある</td></tr><tr><td style="text-align:left;">ツール例</td><td style="text-align:left;">pgTAP</td><td style="text-align:left;">各言語のxUnitライブラリ</td><td style="text-align:left;">Playwright</td></tr><tr><td style="text-align:left;">トランザクションの扱い</td><td style="text-align:left;">Rollback</td><td style="text-align:left;">Rollback</td><td style="text-align:left;">Commit</td></tr><tr><td style="text-align:left;">テストスコープ／サイズ</td><td style="text-align:left;">Integration/Medium</td><td style="text-align:left;">Integration/Medium</td><td style="text-align:left;">E2E/Medium</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>本ガイドラインではトリガーや関数に大きなロジックを持たせず、アプリケーション側に寄せる方針である。そのため、DB単体テストは実施しない方針とする。代わりに、アプリケーション側の単体テストを実施する</li><li>アプリケーション側の単体テストは、DBに対してモックを利用せずローカルマシン上にPostgreSQLプロセスを起動させそれに対してアクセスするとする（必要に応じて、Dockerなどコンテナ上で動かすようにチームでの開発環境を整える）</li><li>E2Eテストは実行時間がかかり保守コストも高いため、費用対効果を鑑みて追加する</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://testing.googleblog.com/2010/12/test-sizes.html" target="_blank" rel="noreferrer">Test Sizes</a></p></div><h3 id="各テストにおけるトランザクションの扱い方" tabindex="-1">各テストにおけるトランザクションの扱い方 <a class="header-anchor" href="#各テストにおけるトランザクションの扱い方" aria-label="Permalink to &quot;各テストにおけるトランザクションの扱い方&quot;">​</a></h3><p>各テストにおけるトランザクション制御の推奨は以下の通り。</p><table tabindex="0"><thead><tr><th style="text-align:left;">テスト分類</th><th style="text-align:left;">テストケース毎の動作</th><th style="text-align:left;">並列実行</th><th style="text-align:left;">備考</th></tr></thead><tbody><tr><td style="text-align:left;">アプリ単体テスト</td><td style="text-align:left;">1.BEGIN;<br> 2.利用テーブルの全レコードをDELETE<br> 3.事前データ登録<br> 4.テストコード実行<br> 5.事後データ検証<br> 6.ROLLBACK;</td><td style="text-align:left;">テストプロセスの並列化</td><td style="text-align:left;">3の条件で4を複数実行したい場合は、3の時点でSAVEPOINTを設定する。なお、アプリ上でTRUNCATEなどを実行されると、AccessExclusiveLockが取られ並列実行不可/効果限定的となる</td></tr><tr><td style="text-align:left;">E2Eテスト</td><td style="text-align:left;">1.利用テーブルの全レコードをTRUNCATE<br> 2.事前データ登録<br> 3.COMMIT<br> 3.E2Eテストコード実行</td><td style="text-align:left;">DB、アプリセットで並列化</td><td style="text-align:left;">構成上、トランザクションによるRollbackは不可であり、DBを共有すると並列テストは不可となる</td></tr></tbody></table><p>テストはCIでこまめに動かすことを想定すると、テスト時間が長いことにより開発リードタイムが伸びる懸念がある。そのため、テスト実行時間をなるべく短くなるように工夫することと、並列で動かせる割合を増やすことを意識する。</p><h2 id="スキーママイグレーション" tabindex="-1">スキーママイグレーション <a class="header-anchor" href="#スキーママイグレーション" aria-label="Permalink to &quot;スキーママイグレーション&quot;">​</a></h2><h3 id="スキーマ変更の対応手順" tabindex="-1">スキーマ変更の対応手順 <a class="header-anchor" href="#スキーマ変更の対応手順" aria-label="Permalink to &quot;スキーマ変更の対応手順&quot;">​</a></h3><p>巨大なテーブル（多くはパーティションテーブル）に対してのスキーマ変更は、時間がかかりすぎることへの懸念や、適用中に思わぬ<code>ACCESS EXCLUSIVE</code>ロックを取得してバックグラウンドのアプリケーションが動かなくなるなどリスクがある。いくつかのスキーマ変更に対しては、リスクを抑える手順が存在するため、まとめる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">項目</th><th style="text-align:left;">手順</th><th style="text-align:left;">ロック</th><th style="text-align:left;">全レコード探索</th><th style="text-align:left;">備考</th></tr></thead><tbody><tr><td style="text-align:left;">テーブル名変更</td><td style="text-align:left;">ALTER TABLE {テーブル名} RENAME TO {テーブル名};</td><td style="text-align:left;">AccessExclusive</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">カラム名変更</td><td style="text-align:left;">ALTER TABLE {テーブル名} RENAME COLUMN {カラム名} TO {カラム名};</td><td style="text-align:left;">AccessExclusive</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">文字列カラムの桁数を上げる</td><td style="text-align:left;">ALTER TABLE {テーブル名} ALTER COLUMN {カラム名} TYPE VARCHAR(桁数);</td><td style="text-align:left;">AccessExclusiveLock</td><td style="text-align:left;"></td><td style="text-align:left;">パーティションの子テーブル単位での実行は不可。一瞬で終わる</td></tr><tr><td style="text-align:left;">数値型カラムの桁数を上げる</td><td style="text-align:left;">ALTER TABLE {テーブル名} ALTER COLUMN {カラム名} TYPE NUMERIC(桁, 精度)</td><td style="text-align:left;">AccessExclusiveLock</td><td style="text-align:left;">✔</td><td style="text-align:left;">パーティションの子テーブル単位での実行は不可。おそらくレコードを見ている? 低速な場合は、新規カラム追加、データコピー、古いカラムを削除、新規カラムをリネームの手順も取れるが、一時的にカラムが存在しなくなる</td></tr><tr><td style="text-align:left;">デフォルト値無しカラム追加</td><td style="text-align:left;">-- カラム追加<br> ALTER TABLE {テーブル名} ALTER COLUMN {カラム名} SET DEFAULT {デフォルト値}; <br>-- アップデート<br> UPDATE …</td><td style="text-align:left;">AccessExclusive</td><td style="text-align:left;"></td><td style="text-align:left;">カラム追加後のUPDATEは、静止点が取れるのであれば別テーブルで作成しSELECT INSERTでデータ登録。リネームで切り替えが安心である。</td></tr><tr><td style="text-align:left;">デフォルト値ありカラム追加</td><td style="text-align:left;">ALTER TABLE {テーブル名} ALTER COLUMN {カラム名} SET DEFAULT {デフォルト値};</td><td style="text-align:left;">AccessExclusive</td><td style="text-align:left;"></td><td style="text-align:left;">PostgreSQL 11でALTER時にはデフォルト値のUPDATEは行なわない仕様に改善されたため</td></tr><tr><td style="text-align:left;">NOT NULL制約の追加</td><td style="text-align:left;">-- (1) CHECK制約を追加<br> ALTER TABLE {テーブル名} ADD CONSTRAINT {検査名} CHECK ({カラム名} IS NOT NULL) NOT VALID;<br> -- (2) CHECK制約の既存行への適用<br> ALTER TABLE {テーブル名} VALIDATE CONSTRAINT {検査名};<br> -- (3) NOT NULL制約を追加 ALTER TABLE {テーブル名} ALTER COLUMN {カラム名} SET NOT NULL;<br> -- (4) 不要になったCHECK制約を削除<br> ALTER TABLE {テーブル名} DROP CONSTRAINT {検査名};</td><td style="text-align:left;">AccessExclusive<br>+ShareUpdateExclusiveLock</td><td style="text-align:left;">✔ShareUpdateExclusiveLockの際</td><td style="text-align:left;">PostgreSQL 12以降で可能。直接ALTER TABLE ALTER COLUMN SET NOT NULLすると、AccessExclusive＋全探索になる</td></tr><tr><td style="text-align:left;">インデックス新規追加</td><td style="text-align:left;">１．各パーティションテーブルに対して、CREATE INDEX CONCURRENTLY <br>２．親テーブルにCREATE INDEXする</td><td style="text-align:left;">1:ロック無し 2:ShareLock</td><td style="text-align:left;">✔1の場合 2は無し</td><td style="text-align:left;">親テーブルにはCONCURRENTLYオプションを指定できない。CONCURRENTLYオプション無しだと、ShareLock（書き込みロック）を取る。回避策は子パーティションテーブルにCONCURRENTLYオプションを付けてインデックスを作成してから、親テーブルにインデックスを作成する方法がある</td></tr><tr><td style="text-align:left;">インデックス項目追加</td><td style="text-align:left;">１．ALTER INDEX {インデックス名} RENAME TO {インデックス名}_old;<br> ２．CREATE INDEX CONCURRENTLY {インデックス名} ON {テーブル名}(カラム1, カラム2);<br> ３．DROP INDEX {1でリネームしたインデックス名};</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">同名で作成する場合はDROP &amp; CREATEになるが、リネームしてから同名でCREATEしても良い。ヒント句などでインデックス名を指定している場合に便利。パーティションテーブルの場合は、新規追加と同じ手順を組み合わせて実施する</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://nulab.com/ja/blog/nulab/alter-table-not-null-default-on-postgresql-11/" target="_blank" rel="noreferrer">PostgreSQL 11でALTER TABLE ... NOT NULL DEFAULTが簡単になっていた | 株式会社ヌーラボ(Nulab inc.)</a></li><li><a href="https://brandur.org/postgres-default#under-the-hood" target="_blank" rel="noreferrer">A Missing Link in Postgres 11: Fast Column Creation with Defaults — brandur.org</a></li><li><a href="https://www.wantedly.com/companies/wantedly/post_articles/433252" target="_blank" rel="noreferrer">令和最新版: PostgreSQLの安全なSET NOT NULL | Wantedly Engineer Blog</a></li><li><a href="https://www.postgresql.jp/document/16/html/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY" target="_blank" rel="noreferrer">CREATE INDEX</a></li></ul></div><h3 id="スキーママイグレーションツール" tabindex="-1">スキーママイグレーションツール <a class="header-anchor" href="#スキーママイグレーションツール" aria-label="Permalink to &quot;スキーママイグレーションツール&quot;">​</a></h3><p>スキーママイグレーションツールを利用することで、テーブル定義変更の取りこぼしを防ぎ手順の標準化ができる。以下に主要なツールとその特徴を上げる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">ツール名</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://github.com/flyway/flyway" target="_blank" rel="noreferrer">Flyway</a></td><td style="text-align:left;">マイグレーションファイルを手動で準備し、適用はFlywayのプロセスに任せる。実行履歴はflyway_schema_historyというテーブルに記録される。</td></tr><tr><td style="text-align:left;"><a href="https://github.com/sqldef/sqldef" target="_blank" rel="noreferrer">sqldef</a></td><td style="text-align:left;">DDLファイルと実際のスキーマを比較し、その差分に基づいて自動的にマイグレーションスクリプトを生成できる。MySQLなど複数のDBに対応</td></tr><tr><td style="text-align:left;"><a href="https://github.com/stripe/pg-schema-diff" target="_blank" rel="noreferrer">pg-schema-diff</a></td><td style="text-align:left;">スキーマファイルとDB間の差分から、DDLを作成する。なるべくダウンタイムを極小化するDDLを生成する（前説のNOT NULL制約の追加のような手順をツール側が作成してくれる）。名前の通り、PostgreSQLに対応</td></tr></tbody></table><p>本ガイドラインとしては、各ツール側の進化も著しくある断面で推奨を出すことは難しいため、具体的なマイグレーションツールの指定は行わず、利用法の例のみを紹介する。</p><h4 id="利用例" tabindex="-1">利用例 <a class="header-anchor" href="#利用例" aria-label="Permalink to &quot;利用例&quot;">​</a></h4><ol><li>Flywayとpg-schema-diffの2つを利用</li><li>DBの理想的な状態をddl.sqlファイルに記述し、Gitコミットする</li><li>pg-schema-diffで、ALTER文などが記載されたマイグレーションファイルを作成する</li><li>3で作成したファイルをチェックし、必要に応じて修正する</li><li>4で確認したファイルを、Flywayのマイグレーションファイルとして保存する</li></ol><p>リリース時にFlywayを実行して各環境のマイグレーションを実行する</p><div class="warning custom-block"><p class="custom-block-title">pg-schema-diffを信用しすぎない</p><p>2025年5月時点の最新である <code>v0.9.0</code> において、以下の変更には対応していない（READMEにも記載がある）</p><ul><li>View</li><li>権限</li><li>型（enumのみ対応している）</li><li>リネーム（テーブルなどのオブジェクトの名前を変更すると、削除&amp;作成になる）</li></ul><p>例えば、VIEWについては、新規作成・変更・削除されてもpg-schema-diffのplan/apply上で何も表示されないし変更されない。そのため、pg-schema-diffだけに頼ることはできないため、あくまで補助的なツールとしての利用に留める必要がある。 pg-schema-diffが生成したスキーマ変更を必ずレビューし、過不足がないことを確認した上で適用すること。</p></div><h2 id="バージョン" tabindex="-1">バージョン <a class="header-anchor" href="#バージョン" aria-label="Permalink to &quot;バージョン&quot;">​</a></h2><p>PostgreSQLは概ね、次の方針でバージョンアップが公開されている。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">頻度</th><th style="text-align:left;">内容</th></tr></thead><tbody><tr><td style="text-align:left;">メジャーバージョンアップ</td><td style="text-align:left;">1回/年</td><td style="text-align:left;">機能追加</td></tr><tr><td style="text-align:left;">マイナーバージョンアップ</td><td style="text-align:left;">1回/3ヶ月</td><td style="text-align:left;">バグ修正、セキュリティ対応</td></tr></tbody></table><p>メジャーバージョンが最初に公開され<strong>5 年間</strong>はマイナーバージョンが公開されサポートされる。</p><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://www.postgresql.org/developer/roadmap/" target="_blank" rel="noreferrer">PostgreSQL: Roadmap</a></li><li><a href="https://www.postgresql.org/support/versioning/" target="_blank" rel="noreferrer">PostgreSQL: Versioning Policy</a></li></ul></div><h3 id="lts-aws" tabindex="-1">LTS（AWS） <a class="header-anchor" href="#lts-aws" aria-label="Permalink to &quot;LTS（AWS）&quot;">​</a></h3><p>Amazon Auroraにおいて特定のバージョンが長期サポート (LTS) として指定される。<a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.LTS.html" target="_blank" rel="noreferrer">Aurora PostgreSQL 長期サポート (LTS) リリースの使用</a>によると、LTSはリリースされてから少なくとも3年間利用可能と定義されている。</p><p><a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraPostgreSQLReleaseNotes/aurorapostgresql-release-calendar.html" target="_blank" rel="noreferrer">Release calendars for Aurora PostgreSQL</a> より、2024年10月時点のLTSは下表の通り。</p><table tabindex="0"><thead><tr><th style="text-align:left;">バージョン</th><th style="text-align:left;">コミュニティリリース日</th><th style="text-align:left;">Auroraリリース日</th><th style="text-align:left;">EOL</th></tr></thead><tbody><tr><td style="text-align:left;">14.6 (LTS)</td><td style="text-align:left;">2022/10/10</td><td style="text-align:left;">2023/1/23</td><td style="text-align:left;">2027/2/28</td></tr><tr><td style="text-align:left;">13.9 (LTS)</td><td style="text-align:left;">2022/10/10</td><td style="text-align:left;">2023/1/23</td><td style="text-align:left;">2026/2/28</td></tr><tr><td style="text-align:left;">12.9 (LTS)</td><td style="text-align:left;">2021/10/11</td><td style="text-align:left;">2022/1/25</td><td style="text-align:left;">2025/2/28</td></tr></tbody></table><p>LTSバージョンを利用するメリットは以下のような点がある。</p><ul><li>同じバージョンを長く使用することが可能（通常より12ヶ月以上長くなる）</li><li>期間の終了通知は6ヶ月前のため、余裕を持って影響調査などの対応が可</li></ul><p>なお、Amazon Auroraにおける特定のマイナーバージョンは、少なくても12ヶ月利用可能であるとされる。</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/Aurora.VersionPolicy.html#Aurora.VersionPolicy.MajorVersionLifetime" target="_blank" rel="noreferrer">Amazon Aurora バージョン</a></li></ul><p>採用するバージョンについては、次章「バージョンアップグレードポリシー」次第で変わるため、本章での記載は割愛する。</p><h3 id="バージョンアップグレードポリシー" tabindex="-1">バージョンアップグレードポリシー <a class="header-anchor" href="#バージョンアップグレードポリシー" aria-label="Permalink to &quot;バージョンアップグレードポリシー&quot;">​</a></h3><p>Amazon Auroraにおいて、バージョンアップデートについては以下の3つの方針が考えられる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">方針</th><th style="text-align:left;">説明</th><th style="text-align:left;">メジャーアップデート</th><th style="text-align:left;">マイナーアップデート</th><th style="text-align:left;">備考</th></tr></thead><tbody><tr><td style="text-align:left;">１．LTS運用 （塩漬け）</td><td style="text-align:left;">・LTSバージョンに固定して運用する<br>・サポート期限が切れるタイミングで、最新LTSにアップグレードする</td><td style="text-align:left;">消極的</td><td style="text-align:left;">消極的</td><td style="text-align:left;">・見かけの運用コストは最小だが、将来の対応コストは最大化する</td></tr><tr><td style="text-align:left;">２．定期的にマイナーアップデート</td><td style="text-align:left;">・メジャーアップデートは基本的に実施しない<br>・マイナーアップデートは1回/四半期～1回/半期 など定期的に実施<br> ・該当メジャーバージョンのサポート終了が1年以内になったタイミングで、メジャーバージョンアップを実施</td><td style="text-align:left;">消極的</td><td style="text-align:left;">積極的</td><td style="text-align:left;">・定期的にバージョンアップするため、LTSを選択する理由は無い<br> ・アップデート作業の実績を積みやすい<br> ・運用保守という枠組みで実施しやすい</td></tr><tr><td style="text-align:left;">３．定期的にメジャーバージョンアップ</td><td style="text-align:left;">・2に追加して、メジャーバージョンアップを1回/年など定期的に実施</td><td style="text-align:left;">積極的</td><td style="text-align:left;">積極的</td><td style="text-align:left;">・定期的にバージョンアップするため、LTSを選択する理由は無い<br> ・新機能を利用しやすくなり開発生産性は上げやすい</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>運用保守の定常オペレーションとして方針2を採用する</li></ul><p>理由は以下の通り。</p><ul><li>マイナーアップデートでセキュリティの修正が入るため、システム統制上、塩漬けではなく定期的にアップデートすることが望ましい</li><li>LTS運用を想定していても、あるアップデートの適用が必要であるケースが生じると破綻する。途中から定期的にバージョンアップ運用が入ると計画、体制上に課題が出やすいため</li><li>塩漬けにすると、アップデート作業が2、3年に1回など忘れた頃にやってきて、事故リスクが増えてしまいがちである。そのため、数ヶ月など定期的に必ずアップデートするような運用が理想的であるため</li><li>プロダクトが枯れ、開発体制が縮小されたタイミングでも1年に1回などアップデートできるように経験や文化を蓄積していくべきであるため</li><li>メジャーバージョンが公開されて少なくても5年間は、マイナーバージョンが公開されサポートされるため、工数がかかるメジャーバージョンアップの間隔を伸ばせる</li></ul><h3 id="アップグレード手法" tabindex="-1">アップグレード手法 <a class="header-anchor" href="#アップグレード手法" aria-label="Permalink to &quot;アップグレード手法&quot;">​</a></h3><p>アップグレード手法は以下2点がある。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">説明</th><th style="text-align:left;">利点</th></tr></thead><tbody><tr><td style="text-align:left;">（1）自動アップグレード</td><td style="text-align:left;">マイナーバージョン、パッチバージョンの変更を自動で適用する。<br>Auroraのクラスター作成時に設定したメンテナンスウィンドウの期間中に実施する。<br> メジャーバージョンの自動アップグレード機能は存在しない。</td><td style="text-align:left;">保守工数が最小化される</td></tr><tr><td style="text-align:left;">（2）手動でのアップグレード</td><td style="text-align:left;">自動アップグレードを無効化し、手動で実施</td><td style="text-align:left;">差分をリリースノートから確認して影響度調査をするなど、計画上、堅い運用が可能</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>（2） を採用する</li></ul><p>理由は以下の通り。</p><ul><li>事前に影響度調査の期間確保の調整を行いやすい</li><li>チーム内でDBのバージョンアップグレードを実施する合意形成が取りやすい</li><li>何か問題が生じた際の初動を早くしやすい（自動アップグレードの場合、適用タイミングを忘れがちで、原因分析に時間がかかる場合がある）</li></ul><p>アップデートそれぞれの検証ポイントをまとめる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">説明</th><th style="text-align:left;">自動テスト動作検証</th><th style="text-align:left;">ステージング環境動作検証</th><th style="text-align:left;">スロークエリ調査</th><th style="text-align:left;">拡張動作検証</th><th style="text-align:left;">メンテナンスウィンドウ確保</th></tr></thead><tbody><tr><td style="text-align:left;">メジャー バージョンアップ</td><td style="text-align:left;">下位互換性が無い変更が入るかもしれないため、動作検証、アプリケーション改修を含めた移行切り替え計画や、影響度調査が必要</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">マイナー バージョンアップ</td><td style="text-align:left;">動作変更を含まない修正とされるが、かならず事前に自動テストの実施、ステージング環境での一通りの検証を実施してデグレードが無いことを確認する</td><td style="text-align:left;">✔</td><td style="text-align:left;">✔</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">パッチ バージョンアップ</td><td style="text-align:left;">定期の手動アップデート時に、パッチバージョンしか上がっていない場合。</td><td style="text-align:left;">✔</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><h3 id="メジャーバージョンアップ方針" tabindex="-1">メジャーバージョンアップ方針 <a class="header-anchor" href="#メジャーバージョンアップ方針" aria-label="Permalink to &quot;メジャーバージョンアップ方針&quot;">​</a></h3><p>PostgreSQLのメジャーバージョンが公開され、5年以上経過するとマイナーバージョンの更新がなくなりサポート外となる。利用するクラウドサービスとしても利用継続が不可（あるいは延長サポートが必要となり、通常費用が高くなる）となるため、定期的にメジャーバージョンアップを行う必要がある。</p><p>そのため、当初の計画としてメジャーバージョンアップの実施間隔（3～5年間隔など）・アップグレード先のバージョンなどを盛り込んでおくことが望ましい。</p><p><strong>【例】メジャーバージョンアップ方針</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">値</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">バージョンアップ間隔</td><td style="text-align:left;">3年</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">バージョンアップ時期</td><td style="text-align:left;">xxxx年3月</td><td style="text-align:left;">業務上の閑散期</td></tr><tr><td style="text-align:left;">バージョンアップ先</td><td style="text-align:left;">検証時の、最新バージョン</td><td style="text-align:left;">原則、最新バージョンを移行先とする。 複数のバージョンを一足飛びで上げることにより、拡張機能の対応状況を含め課題がある場合は、リスクを抑える目的で最新-1のバージョンでの移行も検討する</td></tr></tbody></table><h3 id="バージョンアップグレード手順" tabindex="-1">バージョンアップグレード手順 <a class="header-anchor" href="#バージョンアップグレード手順" aria-label="Permalink to &quot;バージョンアップグレード手順&quot;">​</a></h3><p>「移行計画」を策定し実施すること。主に以下のような観点がある。</p><ol><li>アップグレードの背景や目的</li><li>アップグレード先のバージョン</li><li>リリースノート調査</li><li>影響度の確認対象 <ol><li>DBスキーマ、トリガー、関数など</li><li>アプリケーション（DBアクセスライブラリ）</li><li>アプリケーション利用クエリ</li><li>DB拡張</li></ol></li><li>テスト環境の決定</li><li>テスト確認項目 <ol><li>機能互換性</li><li>データ整合性</li><li>性能</li><li>使用リソース</li></ol></li><li>アップデート手順</li><li>移行リハ実施計画／振り返り</li><li>作業スケジュール、メンテナンスウィンドウの調整</li><li>当日の実施スケジュール</li><li>実施後の監視項目、体制</li><li>切り戻しプラン策定</li></ol><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://soudai.hatenablog.com/entry/2023/10/07/142819" target="_blank" rel="noreferrer">PostgreSQLとMySQLのメジャーバージョンアップのためのチートシート作った - そーだいなるらくがき帳</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.PostgreSQL.html" target="_blank" rel="noreferrer">Amazon Aurora PostgreSQL DB クラスターのアップグレード</a></li></ul></div><h2 id="拡張機能" tabindex="-1">拡張機能 <a class="header-anchor" href="#拡張機能" aria-label="Permalink to &quot;拡張機能&quot;">​</a></h2><p>以下のPostgreSQL拡張機能を推奨とする。</p><table tabindex="0"><thead><tr><th style="text-align:left;">拡張機能</th><th style="text-align:left;">必須</th><th style="text-align:left;">RDS</th><th style="text-align:left;">Google</th><th style="text-align:left;">Azure</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">pg_stat_statements</td><td style="text-align:left;">✔</td><td style="text-align:left;">🆗</td><td style="text-align:left;">🆗</td><td style="text-align:left;">🆗</td><td style="text-align:left;">実行統計を収集するための拡張機能で、性能改善に役立つ</td></tr><tr><td style="text-align:left;">pg_hint_plan</td><td style="text-align:left;">✔</td><td style="text-align:left;">🆗</td><td style="text-align:left;">🆗</td><td style="text-align:left;">🆗</td><td style="text-align:left;">ヒント句により実行計画を制御可能になる</td></tr><tr><td style="text-align:left;">auto_explain</td><td style="text-align:left;">✔</td><td style="text-align:left;">🆗</td><td style="text-align:left;">🆗</td><td style="text-align:left;">🆗</td><td style="text-align:left;">自動的に実行計画をログに記録する。特にスロークエリの分析に有用</td></tr><tr><td style="text-align:left;">pgAudit</td><td style="text-align:left;">✔</td><td style="text-align:left;">🆗</td><td style="text-align:left;">🆗</td><td style="text-align:left;">🆗</td><td style="text-align:left;">pg_auditはPostgreSQLの監査機能を強化する。DBの操作ログを詳細に記録することが可能</td></tr><tr><td style="text-align:left;">aws_s3</td><td style="text-align:left;"></td><td style="text-align:left;">🆗</td><td style="text-align:left;">❌️</td><td style="text-align:left;">❌️</td><td style="text-align:left;"><strong>AWS環境のみ</strong>。S3と連携用途。バックアップ／リストアが容易となる。AWS利用の場合はほぼ必須。データ移行時で利用することも多い。</td></tr><tr><td style="text-align:left;">pg_bigm （ピージーバイグラム）</td><td style="text-align:left;"></td><td style="text-align:left;">🆗</td><td style="text-align:left;">🆗</td><td style="text-align:left;">❌️</td><td style="text-align:left;">全文検索で利用。より少ないインデックスサイズで対応可能。 2,3文字の簡単な全文検索で良いなら、pg_bigmで事足りる要件も多い。 RDSでは2021年4月から利用可</td></tr><tr><td style="text-align:left;">PGroonga</td><td style="text-align:left;"></td><td style="text-align:left;">❌️</td><td style="text-align:left;">❌️</td><td style="text-align:left;">❌️</td><td style="text-align:left;">全文検索で利用。pg_bigmより高速で動作するとされる。日本語より厳しい業務要件の場合は採用を検討する。 <a href="https://groonga.org/ja/blog/2023/04/13/pgroonga-3.0.0.html" target="_blank" rel="noreferrer">https://groonga.org/ja/blog/2023/04/13/pgroonga-3.0.0.html</a></td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://future-architect.github.io/articles/20230411a" target="_blank" rel="noreferrer">RDS Proxy環境下でpg_hint_planを導入する際の注意点</a></li><li><a href="https://aws.amazon.com/jp/about-aws/whats-new/2021/04/amazon-rds-for-postgresql-supports-pg-bigm-extension-for-faster-full-text-search/" target="_blank" rel="noreferrer">Amazon RDS for PostgreSQL で pg_bigm 拡張によるフルテキストの高速な検索が可能に</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/PostgreSQLReleaseNotes/postgresql-extensions.html" target="_blank" rel="noreferrer">Amazon RDS for Postgre の拡張機能バージョンSQL</a></li><li><a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraPostgreSQLReleaseNotes/AuroraPostgreSQL.Extensions.html" target="_blank" rel="noreferrer">Extension versions for Amazon Aurora PostgreSQL</a></li><li><a href="https://www.fujitsu.com/jp/products/software/resources/feature-stories/postgres/article-index/pg-bigm/" target="_blank" rel="noreferrer">pg_bigmで全文検索する｜PostgreSQLインサイド : 富士通</a></li><li><a href="https://www.pgextensions.org/" target="_blank" rel="noreferrer">PostgreSQL Extensions on Cloud</a> : 各クラウドサービスで使える拡張機能の一覧サイト</li></ul></div><h3 id="全文検索サービスとの棲み分け" tabindex="-1">全文検索サービスとの棲み分け <a class="header-anchor" href="#全文検索サービスとの棲み分け" aria-label="Permalink to &quot;全文検索サービスとの棲み分け&quot;">​</a></h3><p>2024年10月時点では、PGroongaはAmazon RDS（Aurora）で利用できない。そのため、 <code>pg_bigm</code> で業務要件が達成できない場合は、Elasticsearch（OpenSearch）など外部サービスとの連携が必要となる。</p><p>機能比較の概要を下表に示す。</p><table tabindex="0"><thead><tr><th style="text-align:left;">機能</th><th style="text-align:left;">pg_bigm</th><th style="text-align:left;">Elasticsearch</th></tr></thead><tbody><tr><td style="text-align:left;">処理方式</td><td style="text-align:left;">2-gram</td><td style="text-align:left;">様々（2-gram、形態素解析など）</td></tr><tr><td style="text-align:left;">全文検索 部分一致検索</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td></tr><tr><td style="text-align:left;">あいまい検索 （字やタイプミスを含む検索を許容）</td><td style="text-align:left;">⚠️</td><td style="text-align:left;">✅️得意（Levenshtein距離を使用）</td></tr><tr><td style="text-align:left;">検索結果順位のスコアリング （リレバンススコアリングなど）</td><td style="text-align:left;">⚠️</td><td style="text-align:left;">✅️得意</td></tr><tr><td style="text-align:left;">サジェスト機能 （入力中のキーワードに対するオートコンプリートやサジェスト）</td><td style="text-align:left;">⚠️</td><td style="text-align:left;">✅️</td></tr></tbody></table><p>あるカラムについて部分一致検索したいといった要求事項であれば、 <code>pg_bigm</code> で対応した方が、システム構成要素を増やすことがないため推奨とする。一方で、UI/UXなどの観点からあいまい検索への対応や、検索結果順位などが重要である場合はElasticsearch（OpenSearch）など別の全文検索エンジンの導入を検討する。</p><p>また、pg_bigmで中間一致検索したい場合は対象カラムにGINインデックスを作成する必要がある。</p><h2 id="vacuum" tabindex="-1">VACUUM <a class="header-anchor" href="#vacuum" aria-label="Permalink to &quot;VACUUM&quot;">​</a></h2><p>VACUUMには大きく分けて次の2種類がある。</p><table tabindex="0"><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">説明</th><th style="text-align:left;">ディスク領域の縮小</th><th style="text-align:left;">ロック</th></tr></thead><tbody><tr><td style="text-align:left;">VACUUM</td><td style="text-align:left;">ゴミ箱化された行を回収し、空いたスペースを他のDB操作で再利用可能とする。<br>自動バキュームで実行される</td><td style="text-align:left;">❌️</td><td style="text-align:left;">参照／更新が可能（VACUUM対象のページはロックが取られている）</td></tr><tr><td style="text-align:left;">VACUUM FULL</td><td style="text-align:left;">テーブル全体を再編成し、空いているディスク領域を解放する</td><td style="text-align:left;">✅️</td><td style="text-align:left;"><code>ACCESS EXCLUSIVE</code> ロックにより、参照／更新が不可</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>原則VACUUMを実行し、テーブルのアクセスが不可となるVACUUM FULLは実行しない方針とする</li><li>VACUUMの実行は手動では実行せず、自動バキュームに任せる</li></ul><p>手動でVACUUMを実行する必要があるユースケースは以下である。</p><ul><li>更新／削除が多いテーブルの、自動バキュームの実行が、改廃ジョブなどと被って実行に失敗した場合、すぐVACUUMをしたい場合</li></ul><p>VACUUM FULLは以下のような特殊なワークロードのテーブルに対して、必要が生じた場合に限り利用する。</p><ul><li>特定のテーブルが使用されていない行でいっぱいになり、再びそれほど大きくならないと想定される場合（一時的に更新／削除が大量に行われ、かつ自動VACUUMが動かなかったとされる場合）</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://aws.amazon.com/jp/blogs/news/understanding-autovacuum-in-amazon-rds-for-postgresql-environments/" target="_blank" rel="noreferrer">Amazon RDS for PostgreSQL 環境の自動バキュームを理解する | Amazon Web Services ブログ</a></li><li><a href="https://cloud.google.com/blog/ja/products/databases/deep-dive-into-postgresql-vacuum-garbage-collector" target="_blank" rel="noreferrer">Cloud SQL for PostgreSQL - VACUUM について深く掘り下げるためのよくある質問と回答</a></li><li><a href="https://taityo-diary.hatenablog.jp/entry/2025/02/24/071321" target="_blank" rel="noreferrer">PostgreSQL の autovacuum は定期的な VACUUM ANALYZE 実行の代替となる - ぱと隊長日誌</a> にPostgreSQL 15のドキュメント更新で、定期的な <code>VACUUM ANALYZE</code> の実行の推奨が撤廃され、autovacuum の活用が前提となった旨の解説がある</li></ul></div><h2 id="ロケール" tabindex="-1">ロケール <a class="header-anchor" href="#ロケール" aria-label="Permalink to &quot;ロケール&quot;">​</a></h2><p>（ロケールの概要や挙動説明については諸事情で省略する）</p><div class="warning custom-block"><p class="custom-block-title">ロケールは後から変更することができないため、データベース作成時に設計する必要がある</p><p><code>lc_collate</code> <code>lc_ctype</code> の設定により、「ソート順」 「照合順（文字列比較）」の動作が異なってしまい、最悪の場合検索要件を満たせない可能性がある。DBを構築する前に要件を確認し正しく設定する必要がある。 万が一、初期構築時の設定が要件を満たせない場合、以下のいずれかの対応を検討する。</p><ul><li><p>データベースを再作成する (pg_dump -&gt; 新規DB作成 -&gt; pg_restore)</p></li><li><p>必要なSQL全てにオプションを追加</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- データベースのデフォルトが ja_JP.UTF-8 でも、一時的に &#39;C&#39; (バイト順) でソート</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> products </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COLLATE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>ALTER TABLE で列定義を個別に修正（利用しているインデックスが存在した場合は、再作成すること）</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> products</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COLUMN product_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COLLATION </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></div><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://lets.postgresql.jp/documents/technical/text-processing/2" target="_blank" rel="noreferrer">ロケール(国際化と地域化) | Let&#39;s Postgres</a></p></div><h2 id="パラメータ" tabindex="-1">パラメータ <a class="header-anchor" href="#パラメータ" aria-label="Permalink to &quot;パラメータ&quot;">​</a></h2><h3 id="fillfactor" tabindex="-1">fillfactor <a class="header-anchor" href="#fillfactor" aria-label="Permalink to &quot;fillfactor&quot;">​</a></h3><p>fillfactorは、テーブルやインデックスに新しいデータを挿入する際に、ページにどれだけ空きスペースを残すかを設定するパラメータである。値を小さくすると、挿入時に使用できる領域は減る一方で、更新時には新しいページを作成せず空き領域を利用することで、更新性能を向上させることができる。</p><p>推奨は以下の通り。</p><ul><li>追記のみのテーブルはfillfactor=100を設定（データパッチも通常、行わないと想定）</li><li>その他、fillfactor=90（テーブルの場合はデフォルト100である）</li></ul><p>例えば、追記のみ（Insertのみで、Update/Deleteを行わない）のワークテーブルなどは、fillfactor=100にする。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- テーブルおよびPKにfillfactor=100%を指定</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> w_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BIGINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GENERATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ALWAYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IDENTITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WITH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (fillfactor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> w_user_pkey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (fillfactor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>なお、インデックスについても同様で追記のみであればfillfactor=100、そうでなければ90とする。デフォルト値は90でありテーブルとは異なる。</p><h3 id="shared-buffers" tabindex="-1">shared_buffers <a class="header-anchor" href="#shared-buffers" aria-label="Permalink to &quot;shared_buffers&quot;">​</a></h3><p>PostgreSQLの共有メモリバッファの調整には <code>shared_buffers</code> を利用するが、AWS RDSなどマネージドサービスでは推奨の設定値で調整されており（例えば、RDS DB インスタンスは合計メモリの 25％、 Auroraは50%～75%）、</p><p>推奨は以下の通り。</p><ul><li>特別の理由が無い限りプロバイダ提供の初期値から変更しない</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://repost.aws/ja/knowledge-center/rds-aurora-postgresql-shared-buffers" target="_blank" rel="noreferrer">Aurora PostgreSQL の shared_buffers DB パラメータのデフォルト値が Amazon RDS PostgreSQL のデフォルト値よりも大きいのはなぜですか? | AWS re:Post</a></p></div><h3 id="work-mem" tabindex="-1">work_mem <a class="header-anchor" href="#work-mem" aria-label="Permalink to &quot;work_mem&quot;">​</a></h3><p><code>work_mem</code> はクエリ実行時に、ソート（ORDER BYやDISTINCT）やハッシュデータ（ハッシュ結合などで発生）を格納する際に用いられるメモリ量である。クエリ実行時に、この <code>work_mem</code> を超過し、スワップが発生するため性能劣化の懸念がある。</p><p>Amazon Auroraについてはデフォルト値を推奨する。性能検証などで特定のクエリ（例えばソート時にディスクアクセスしてしまい性能劣化するなど）にどうしても調整が必要であれば、<code>SET LOCAL work_mem TO parameter_value;</code> で、そのセッションのみで変更する。</p><p>推奨は以下の通り。</p><ul><li>値の変更はアーキテクト／DBAに相談の上で実施する</li><li>DBクラスターのパラメータグループの設定値自体は変更しない</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.BestPractices.Tuning-memory-parameters.html" target="_blank" rel="noreferrer">Aurora PostgreSQL のメモリパラメータの調整</a></p></div><h3 id="plan-cache-mode" tabindex="-1">plan_cache_mode <a class="header-anchor" href="#plan-cache-mode" aria-label="Permalink to &quot;plan_cache_mode&quot;">​</a></h3><p><code>plan_cache_mode</code> は クエリプランキャッシュの動作を制御するために使用され、設定値は3種ある。</p><table tabindex="0"><thead><tr><th style="text-align:left;">設定値</th><th style="text-align:left;">説明</th><th style="text-align:left;">有効なユースケース</th></tr></thead><tbody><tr><td style="text-align:left;"><code>auto</code>（デフォルト値）</td><td style="text-align:left;">キャッシュを使用するかどうかDBMS側の判断に委ねる</td><td style="text-align:left;">大半のケース</td></tr><tr><td style="text-align:left;"><code>force_custom_plan</code></td><td style="text-align:left;">クエリの引数ごとにプランが作成され、キャッシュされない</td><td style="text-align:left;">引数の値により、実行計画を変動させた方が性能上有利な可能性がある場合</td></tr><tr><td style="text-align:left;"><code>force_generic_plan</code></td><td style="text-align:left;">どの引数に対しても同じプランが使用される</td><td style="text-align:left;">引数により実行計画に差が無い、同じクエリが大量に呼ばれる場合</td></tr></tbody></table><p>基本的にはデフォルト値である <code>auto</code> でよいが、以下に示す2つの考慮ポイントを踏まえて適切な設定値を選択することが望ましい。</p><ul><li>100超えパーティションが存在する場合（パーティションによってデータの偏りが大きい場合は、<code>force_custom_plan</code>、逆に同じ実行計画で良い場合は <code>force_generic_plan</code>）</li><li>N回目以降にSQL応答性能が劣化する場合（毎回同じ実行計画を強制したい場合は、 <code>force_generic_plan</code>） <ul><li>一度、汎用実行計画が選択されると、以降その実行計画が採用される</li></ul></li></ul><h3 id="その他のパラメータ" tabindex="-1">その他のパラメータ <a class="header-anchor" href="#その他のパラメータ" aria-label="Permalink to &quot;その他のパラメータ&quot;">​</a></h3><p>AWS RDS／Auroraの場合は、原則デフォルトパラメータ値を利用する。性能検証などで課題が見つかり次第、アーキテクト／DBAと相談の上パラメータを変更する。</p><h2 id="インスタンスタイプ-aws" tabindex="-1">インスタンスタイプ（AWS） <a class="header-anchor" href="#インスタンスタイプ-aws" aria-label="Permalink to &quot;インスタンスタイプ（AWS）&quot;">​</a></h2><p>適切なインスタンスタイプを選択することで、費用を抑えることができる。</p><p>推奨は下表の通り。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">推奨値</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">インスタンスファミリー</td><td style="text-align:left;">r</td><td style="text-align:left;">メモリ使用量が高いワークロードで利用されることが多いため</td></tr><tr><td style="text-align:left;">世代</td><td style="text-align:left;">7</td><td style="text-align:left;">原則、該当のリージョンで利用可能な最新のバージョンを用いる。コストパフォーマンスが通常高いため。<br>ただし、RI（リザーブドインスタンス）の割引率なども観点に加え、トータルで選択する</td></tr><tr><td style="text-align:left;">プロセッサファミリー</td><td style="text-align:left;">g</td><td style="text-align:left;">Gravitonの意味。コストパフォーマンスが高いとされるため</td></tr><tr><td style="text-align:left;">インスタンスサイズ</td><td style="text-align:left;">large</td><td style="text-align:left;">largeでもそれなりの性能が出るため、スタートはlargeとする。性能テストで必要なサイズまで上げることで決めていく</td></tr></tbody></table><p>2024年11月時点では、<code>db.r7g.large</code> から性能テストに応じて、<code>db.r7g.8large</code> などに上げていく。</p><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://aws.amazon.com/jp/about-aws/whats-new/2024/09/amazon-aurora-r7g-graviton3-based-instance-family-additional-regions/" target="_blank" rel="noreferrer">Amazon Aurora が、さらに 15 のリージョンで R7g Graviton3 ベースのインスタンスファミリーのサポートを開始 - AWS</a></li><li><a href="https://ca-srg.dev/0c67e9d729ea43589c814e80254d5b10" target="_blank" rel="noreferrer">東京リージョンのAuroraにGraviton3(r7g)が来たぞー！簡単な性能検証結果と注意すべき点 - CyberAgent SRG #ca_srg</a></li></ul></div><h2 id="スケーリング戦略-aws" tabindex="-1">スケーリング戦略（AWS） <a class="header-anchor" href="#スケーリング戦略-aws" aria-label="Permalink to &quot;スケーリング戦略（AWS）&quot;">​</a></h2><p>DBの処理性能を向上させるためには、パラメータやSQLクエリのチューニングを行うことで改善できる。DBの処理能力（スケール）そのものを向上させるためには、一般的に以下2つの方法がある。各種チューニングで対応できない場合、DBをスケールさせる必要がある。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">説明</th><th style="text-align:left;">増強する内容</th></tr></thead><tbody><tr><td style="text-align:left;">（1）スケールアップ（垂直スケーリング）</td><td style="text-align:left;">DBインスタンスのリソースを増強して処理性能を高める方法。<br>無限にCPU性能やメモリ量を増やせるわけではなく、上限がある。</td><td style="text-align:left;">・DBインスタンスタイプを上げ、CPU、メモリの処理性能を上げる<br> ・ストレージ容量を上げる<br> ・ネットワーク帯域が詰まっている場合、インスタンスタイプを上げる</td></tr><tr><td style="text-align:left;">（2）スケールアウト（水平スケーリング）</td><td style="text-align:left;">複数のDBインスタンスを追加して負荷分散する方法。<br>一般的には上限が無いが、例えばAmazon Auroraのリードレプリカは15の上限がある</td><td style="text-align:left;">・リードレプリカを追加する<br> ・シャーディングを行う</td></tr></tbody></table><p>それぞれのスケール手段をどのように取り入れるか、Amazon Auroraを例に以下に示す。基本的にはスケールアウトで対応する。スケールアウトで解決できない場合、スケールアップで対応する。ただし、シャーディングはシステム影響度が甚大であるため、通常選択しない。</p><ul><li>クラスターボリューム不足 <ul><li>データ量に応じて動的に拡張／縮小するため、自動でスケールアップ／スケールダウンさせる</li></ul></li><li>ローカルストレージ容量不足の場合 <ul><li>スケールアップ（インスタンスタイプを上げる）ことで、増強する</li><li>ローカルストレージを監視し、しきい値を超えた場合に、不要なログなどを削除できない場合に実施</li></ul></li><li>読み込み性能が不足 <ul><li>リードレプリカを増やす（スケールアウト）させる</li><li>逆にリードレプリカのCPU、メモリ負荷などから稼働率が低い場合は、リードレプリカを減らす（スケールインさせる）</li></ul></li><li>書き込み処理性能が不足 <ul><li>スケールアップ（インスタンスタイプを上げる）で対応する</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://aws.amazon.com/jp/rds/aurora/faqs" target="_blank" rel="noreferrer">よくある質問 - Amazon Aurora | AWS</a></p></div><h2 id="dblink-fdw" tabindex="-1">dblink／fdw <a class="header-anchor" href="#dblink-fdw" aria-label="Permalink to &quot;dblink／fdw&quot;">​</a></h2><p>PostgreSQLで他DBに接続する（接続される）手法として、以下の2手法が存在する。本章における連携先DBは他システムを想定しいる。DWHへの接続は <a href="#olap連携">OLAP連携</a> 章を参照すること。</p><table tabindex="0"><thead><tr><th style="text-align:left;">手法</th><th style="text-align:left;">説明</th><th style="text-align:left;">主な制約</th></tr></thead><tbody><tr><td style="text-align:left;">（1）dblink</td><td style="text-align:left;">PostgreSQLがクライアントとなり別のDBに接続する</td><td style="text-align:left;">・プッシュダウンができないため、データ転送量が増える</td></tr><tr><td style="text-align:left;">（2）FDW(Foreign Data Wrapper) postgres_fdw、mysql_fdw、oracle_fdw など</td><td style="text-align:left;">dblinkと機能重複があるが、より透過的で標準に準拠した構文を利用可能かつ、性能が良いとされる。postgres_fdwは9.3以降から。</td><td style="text-align:left;">・リモートサーバーでのクエリ実行計画が予測困難であり、期待どおりのパフォーマンスが得られないことがある。</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>原則利用しない（接続する／接続されるを問わず）</li><li>もし、DB間のデータ連携が必要な場合は、システム間I/F（ファイル）連携を作成する <ul><li>理由: dblinkやfdwは<a href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/SharedDataBaseIntegration.html" target="_blank" rel="noreferrer">Enterprise Integration Patterの共有DB</a> に相当するデメリットが生じるため。例えば、スキーマレベルで密結合になるため、メンテナンスウィンドウ確保が難しいこと、スキーマ変更時の影響度調査の難易度が上がる、依存先のDB障害で連鎖的に自システム側も障害となりえるため可用性が下がる、依存先のDBのバージョンアップやシステム刷新で課題が生じるなど、運用観点がある</li></ul></li><li>データ鮮度が重要であれば、Web APIを作成する</li><li>自システム側DBのテーブルをdblink/fdwで接続させることはさらに強く禁止とする</li><li>何かしらの理由で連携先システムがI/F連携を作成できないなどで、避けようがない場合は、参照のみに限るなど利用パターンを極力絞る構成を取る。更新は強く禁止する。参照のみの場合は、リードレプリカに接続してもらう</li><li>同様に、自システム側のテーブルの更新されるような接続も、強く避けるようにする</li><li>上記の場合も、dblink／fdwを利用せず、自システム側のアプリケーションからI/Fファイルを作成し、システム移行時の接点を極小化する方針とする（下図を参考）</li><li>上記全てを理解した上で、DB経由での接続する場合（例えば、1ショットの初期データ移行など）はdblinkではなくfdwを利用する</li><li>もし、fdwを利用する場合は、 <code>FDW_XXX</code> といったプレフィックスをテーブル名に付与したビューを作成（利用する項目やレコードは、必要最小限に絞る）、該当テーブルのみにアクセス権限を絞ったロールを作成し、なるべく結合度を下げる工夫をすること</li></ul><p>図: dblink/fdw をなるべく行わない連携方式</p><div class="img-bg-transparent"><p><img src="`+E+`" alt=""></p></div><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://www.postgresql.jp/docs/16/contrib-dblink-function.html" target="_blank" rel="noreferrer">dblink</a></li><li><a href="https://www.postgresql.jp/docs/16/postgres-fdw.html" target="_blank" rel="noreferrer">F.35. postgres_fdw</a></li><li><a href="https://www.ntt-tx.co.jp/column/postgresql_blog/221121/" target="_blank" rel="noreferrer">Oracleデータベースリンクを postgres_fdw に移行してみよう！ケース別の比較もしてみた</a></li><li><a href="https://lets.postgresql.jp/documents/technical/fdw" target="_blank" rel="noreferrer">外部データとの連携 ～FDWで様々なデータソースとつなぐ～ | Let&#39;s POSTGRES</a></li></ul></div><h2 id="リードレプリカ" tabindex="-1">リードレプリカ <a class="header-anchor" href="#リードレプリカ" aria-label="Permalink to &quot;リードレプリカ&quot;">​</a></h2><p>Amazon RDSやGoogle Cloud SQLではリードレプリカというマスタからレプリケーションされた読み込み専用のDBを提供する機能がある。</p><p>※2024.10.17にAmazon Aurora PostgreSQLでリードレプリカの「ローカル書き込み転送機能」がサポートされたため、正確にはリードレプリカに対して読み込み／書き込みの両方のリクエストを透過的に行うことができる（※2024.10.17時点では、Aurora PostgreSQL バージョン 14.13、15.8、16.4 以降でのサポートであるため、LTS運用を採用している場合は利用できない点に注意）</p><ul><li><a href="https://aws.amazon.com/jp/about-aws/whats-new/2024/10/amazon-aurora-postgresql-local-write-forwarding/" target="_blank" rel="noreferrer">Amazon Aurora PostgreSQL がローカル書き込み転送のサポートを開始 - AWS</a></li></ul><p>マスタ／リードレプリカの構成を採用した際に、アプリケーション側から利用する方針は以下が考えられる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">方針案</th><th style="text-align:left;">説明</th><th style="text-align:left;">マスタDBの負荷軽減</th><th style="text-align:left;">ローカル書き込み転送機能利用</th><th style="text-align:left;">設計判断の容易さ</th></tr></thead><tbody><tr><td style="text-align:left;">（1）アプリケーションからはリードレプリカを使用しない</td><td style="text-align:left;">リードレプリカは可用性観点（フェイルオーバー）での利用を想定し、アプリケーションから接続しない。ただし、運用時のデータ調査などはリードレプリカに接続する</td><td style="text-align:left;">⚠️</td><td style="text-align:left;">ー</td><td style="text-align:left;">✅️</td></tr><tr><td style="text-align:left;">（2）参照のみリードレプリカを使用する</td><td style="text-align:left;">Web APIなどでGETメソッドの場合はリードレプリカを利用する。</td><td style="text-align:left;">✅️</td><td style="text-align:left;">ー</td><td style="text-align:left;">✅️</td></tr><tr><td style="text-align:left;">（3）参照が大多数の処理であれば、リードレプリカ／マスタを併用する</td><td style="text-align:left;">2のケースに加え、例えばI/F送信や帳票作成など、大部分のクエリはリードレプリカを用い、最後に管理テーブルにINSERTする場合にマスタを利用する</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td><td style="text-align:left;">⚠️</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>大きな理由がなければ、2を採用する</li></ul><p>また、以下に注意する。</p><ul><li>アクセスする場合は、DNS経由でアクセスし、フェイルオーバーに対応できるようにする</li><li>もし、ワークロードなどの特性などから3を採用したい場合、現在運用しているバージョンがローカル書き込み転送機能に対応しているか確認する</li></ul><p>以下に、Goでマスタとリードレプリカごとにコネクションプールを保持する例を示す。例えばWeb APIサーバーを構築しているとして、GETメソッドでDB参照しか行わない場合は、<code>readReplicaDB</code> を用いる。POST／PUT／DELETEなどDB書き込みを伴う場合は、<code>masterDB</code> を利用するイメージである。</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	masterDB      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	readReplicaDB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initDB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	masterDB, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sql.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgres&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user=youruser password=yourpassword host=master-db-host dbname=yourdb sslmode=disable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Fatalf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;connect to master DB: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	readReplicaDB, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sql.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgres&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user=youruser password=yourpassword host=read-replica-db-host dbname=yourdb sslmode=disable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Fatalf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;connect to read replica DB: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDBConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.MethodGet {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> readReplicaDB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> masterDB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">w</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ResponseWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	db </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDBConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r.Method)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// … 省略 …</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="一覧検索が直後で行われた時に、古いデータを返さないか" tabindex="-1">一覧検索が直後で行われた時に、古いデータを返さないか <a class="header-anchor" href="#一覧検索が直後で行われた時に、古いデータを返さないか" aria-label="Permalink to &quot;一覧検索が直後で行われた時に、古いデータを返さないか&quot;">​</a></h3><p>プライマリーからリードレプリカへの反映には遅延が存在する。RDSとAuroraでは仕組みが異なるため、遅延の大きさには差がある。</p><table tabindex="0"><thead><tr><th style="text-align:left;">対象</th><th style="text-align:left;">リードレプリカへの連携の仕組み</th></tr></thead><tbody><tr><td style="text-align:left;">RDS</td><td style="text-align:left;">非同期レプリケーション。ワークロード次第だが、数百ミリ秒～数秒程度の遅延がある</td></tr><tr><td style="text-align:left;">Aurora</td><td style="text-align:left;">ボリュームの共有。レプリカ側のキャッシュを削除するため、数十ミリ秒程度ラグがある</td></tr></tbody></table><p>Auroraについては、ラグが非常に小さく、データ更新→再検索で課題が出るケースはワークロードにもよるがほとんど聞かない。仮にごく稀に古いデータが参照されても、画面をリロードしてもらう方針で調整することも多い。</p><p>RDSは、本節のような懸念が考えられる。</p><ul><li>プライマリーでデータ更新→すぐにレプリカでデータ検索して画面表示（例えば、一覧検索）すると、ラグ（遅延）により古いデータが表示されてしまう</li></ul><p>対策として以下の案が考えられる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">対応案</th><th style="text-align:left;">プライマリーDB負荷軽減</th><th style="text-align:left;">フロントエンド開発工数</th><th style="text-align:left;">応答速度</th></tr></thead><tbody><tr><td style="text-align:left;">（1）GETも常にプライマリーDBを利用</td><td style="text-align:left;">❌️</td><td style="text-align:left;">⚠️更新が一覧検索画面で行われた場合、面倒</td><td style="text-align:left;">✅️DB負荷で遅延の可能性</td></tr><tr><td style="text-align:left;">（2）更新操作のレスポンスに表示対象のレコードを返す</td><td style="text-align:left;">✅️</td><td style="text-align:left;">⚠️独自の作り込みが必要。他のユーザーによる更新があった場合、整合性に難</td><td style="text-align:left;">✅️</td></tr><tr><td style="text-align:left;">（3）GET時にプライマリーDBから参照するオプションを追加</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️オプション追加するだけ</td><td style="text-align:left;">✅️</td></tr><tr><td style="text-align:left;">（4）再検索時にSleepを入れる</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️容易</td><td style="text-align:left;">❌️Sleep時間の見積もりが難しく、安全に期すと待ち時間が長くなる</td></tr><tr><td style="text-align:left;">（5）更新時刻が想定より古い場合は、クライアント側でリトライ</td><td style="text-align:left;">✅️</td><td style="text-align:left;">⚠️リトライ条件や処理の追加が必要。かつテストがしにくい</td><td style="text-align:left;">⚠️リトライ回数によっては長くなる。</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>Auroraは原則対策しない。どうしても業務上、データの整合性が求められる場合や、不都合がある場合のみ、RDSと同様の対策を採る</li><li>RDSについては「3.GET時にプライマリーDBから参照するオプションを追加」を採用するなど対策を検討する</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://aws.amazon.com/jp/rds/aurora/faqs/" target="_blank" rel="noreferrer">よくある質問 - Amazon Aurora | AWS</a></li><li><a href="https://ryuichi1208.hateblo.jp/entry/2024/05/21/084901" target="_blank" rel="noreferrer">【Aurora】Auroraのレプリカ遅延とは何か - 地方エンジニアの学習日記</a></li></ul></div><h2 id="キャッシュ" tabindex="-1">キャッシュ <a class="header-anchor" href="#キャッシュ" aria-label="Permalink to &quot;キャッシュ&quot;">​</a></h2><h3 id="バッファキャッシュ" tabindex="-1">バッファキャッシュ <a class="header-anchor" href="#バッファキャッシュ" aria-label="Permalink to &quot;バッファキャッシュ&quot;">​</a></h3><p>どのテーブルのブロックをバッファキャッシュに載せるかは、PostgreSQL側に任せることが通常であるが、以下のような場合に明示的に指定した方が良い場合がある。</p><ul><li>PostgreSQLサーバーを再起動した場合で、普段よく使うマスタテーブルなどのキャッシュがないため想定外に初回の画面応答が劣化／タイムアウトした</li><li>夜間に実行されたバッチ処理で、画面からの要求で用いるテーブルのキャッシュが落ちたことで、翌日の初回画面応答が劣化／タイムアウトした</li></ul><p>それらの場合、以下の拡張機能を用いることでテーブルやインデックスのキャッシュウォーミングができる。</p><ul><li><a href="https://www.postgresql.jp/document/16/html/pgprewarm.html" target="_blank" rel="noreferrer">pg_prewarm</a></li><li><a href="https://www.postgresql.jp/document/16/html/pgbuffercache.html" target="_blank" rel="noreferrer">pg_buffercache</a></li></ul><p>pg_prewarmには以下の実行モードがあり、概要と推奨を下表に示す。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">概要</th><th style="text-align:left;">推奨</th></tr></thead><tbody><tr><td style="text-align:left;">buffer</td><td style="text-align:left;">指定したテーブルやインデックスの全ブロックを共有バッファにロードする。</td><td style="text-align:left;">✅️ 扱いが容易なため</td></tr><tr><td style="text-align:left;">prefetch</td><td style="text-align:left;">OSに非同期のプリフェッチをリクエストし、共有バッファキャッシュにロードする。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">read</td><td style="text-align:left;">ディスクから直接ファイルを読み込む。バッファキャッシュを利用しない</td><td style="text-align:left;"></td></tr></tbody></table><p>実行例は以下である。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 確実にキャッシュに乗せたいテーブルは最後尾の行に追加する</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pg_prewarm(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;item&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;buffer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pg_prewarm(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;buffer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pg_prewarm(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;size&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;buffer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>テーブルがキャッシュに載っているか確認するには、 <code>pg_buffercache</code> から確認ができる。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buffers</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pg_buffercache b</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">JOIN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pg_class c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relfilenode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pg_relation_filenode(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">oid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">JOIN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pg_database d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reldatabase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">oid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">datname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current_database())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;my_table&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relname</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    buffers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DESC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://www.postgresql.jp/document/16/html/pgprewarm.html" target="_blank" rel="noreferrer">F.30. pg_prewarm — リレーションデータをバッファキャッシュにプリロードする</a></li><li><a href="https://www.slideshare.net/slideshow/postgresql-38768325/38768325" target="_blank" rel="noreferrer">PostgreSQL共有バッファと関連ツール | PPT</a></li></ul></div><h3 id="ミドルウェアによるリモートキャッシュ" tabindex="-1">ミドルウェアによるリモートキャッシュ <a class="header-anchor" href="#ミドルウェアによるリモートキャッシュ" aria-label="Permalink to &quot;ミドルウェアによるリモートキャッシュ&quot;">​</a></h3><p>性能観点で、リソース増強などのスケールアップや、リードレプリカを増やすなどのスケールアウトの手段が有効でない場合、アプリケーションから見たDBの前段にキャッシュサーバー（Redisなど）を配備した構成を取ることがある。</p><p><img src="`+y+'" alt=""></p><p>推奨は以下の通り。</p><ul><li>なるべくキャッシュサーバーを導入しないチューニングをまず行う</li></ul><p>理由は以下の通り。</p><ul><li>データ整合性の担保が難しい <ul><li>キャッシュとDBの値の整合性をどのように保つか、あるいは不整合を許容する場合にフォールバックする仕組みを考慮するなど、DB単一の構成よりも難易度が高まる</li><li>キャッシュの無効化、更新タイミング、キャッシュとDBの参照方針を決める必要がある</li></ul></li><li>キャッシュの管理とインフラの複雑性による、負荷が高まる <ul><li>構成要素が1つ増えることにより、運用／監視の運用負荷があがる</li><li>開発時においても、ローカルでの構築対象が増え、テスト時の検証対象も増加し、開発生産性にネガティブな影響がある</li></ul></li><li>リードレプリカによるスケールアウト <ul><li>Amazon Auroraなど、読み取り専用のリードレプリカでスケールアウトできるサービスが増えており、キャッシュサーバーの導入が適するケースが減っていると考えられる</li></ul></li></ul><p>一方で、次のようなDBに対して明らかな高負荷に繋がると考えられるケースは引き続き、キャッシュサーバーの導入を検討する</p><ol><li>リードヘビーなワークロード <ul><li>ECサイトなどで、特にメディア掲載時やキャンペーン時にアクセス数が大きくスパイクするようなサービスなど</li></ul></li><li>セッション管理 <ul><li>ユーザーセッション管理で、読み取りによる負荷が高い場合</li></ul></li><li>計算結果や集計結果のキャッシュ <ul><li>ダッシュボードアプリケーションでのリアルタイム集計結果のキャッシュ</li></ul></li></ol><p>もし、キャッシュサーバーを利用する方針になった場合、キャッシュへの保存処理方針を次から選択する必要がある。</p><ul><li>Read Through（Lazy Caching、Read Aside）</li><li>Write Through</li><li>Write Behind</li></ul><p>※他にも、Write Backのようにキャッシュのみに書き込み、DBには非同期で永続化する方式もあるが、データ欠損のリスクは業務システムで許容できないと考えられるので、省略する。</p><div class="img-bg-transparent"><p><img src="'+c+'" alt=""></p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>本来のRead Throughは、CDNのようにキャッシュ機構から透過的にアクセスし、呼び出し元が意識することなくキャッシュを利用する（≒インラインキャッシュ）仕組みである。上図のRead Throughはそれと区別するため、Read Aside（または、Cache Aside）と呼ぶことも多い。本紙では上記を区別せず、Read Throughとデフォルメして表現している。</p></div><p>それぞれの特徴を下表にまとめる。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">概要</th><th style="text-align:left;">Pro</th><th style="text-align:left;">Cons</th></tr></thead><tbody><tr><td style="text-align:left;">Read Through</td><td style="text-align:left;">キャッシュにデータが存在しない場合、DB参照して値をキャッシュに保存、値を呼び出し元に返す</td><td style="text-align:left;">・クライアントは常にキャッシュを通してデータを取得するため、操作が単純かつ統一的</td><td style="text-align:left;">・初回アクセス時にキャッシュミスが発生、DBアクセスが発生するため、遅延が生じる ・キャッシュが古いデータを保持している可能性があり、TTL設計が必須</td></tr><tr><td style="text-align:left;">Write Through</td><td style="text-align:left;">DB書き込みと同時にキャッシュにも書き込む</td><td style="text-align:left;">・キャッシュが最新の状態を維持可能 ・読み取りが高速</td><td style="text-align:left;">・書き込みがキャッシュサーバーとDBの2フェーズコミットとなるため、整合性の維持の設計が必要</td></tr><tr><td style="text-align:left;">Write Behind</td><td style="text-align:left;">定期間隔でキャッシュにDBのデータを書き込む</td><td style="text-align:left;">・キャッシュ対象を集計結果など時間がかかる処理でもアプリの読み取り／書き込みに影響無しで行える ・アプリケーションからはキャッシュに書き込む操作を意識せずに済む</td><td style="text-align:left;">・非同期更新になるためキャッシュとDBで整合性差異が発生する ・一定間隔で起動するジョブ用のスケジューラやプロセスが必要となり、インフラレベルの構成要素が増えること、単体テストの事前データ登録する対象が増えることなど</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>「Write Through」 「Write Behind」方式のいずれか採用する <ul><li>「Read Through」の課題であるキャッシュとDBの整合性差異の許容が通常難しいため</li><li>「Write Through」はキャッシュが常に最新である想定であり、アプリ設計の難易度を比較的下げることができるため。また、キャッシュを配備する目的が参照処理の高速化とすると、読み取り性能に悪影響が少ないことが利点である</li><li>「Write Behind」は、集計処理（例えば、何かしらの集計軸を元にした在庫数計算など）など時間かかる処理を、非同期で切り出すことでアプリ性能に影響を与えずキャッシュに載せやすいメリットがある。データ整合性差異が出るため、最終的にはDBを正としてビジネスロジックを実装する必要がある</li></ul></li></ul><h5 id="キャッシュの破棄ポリシー" tabindex="-1">キャッシュの破棄ポリシー <a class="header-anchor" href="#キャッシュの破棄ポリシー" aria-label="Permalink to &quot;キャッシュの破棄ポリシー&quot;">​</a></h5><ul><li>TTLを適切に設定する</li><li>LRU（Least Recently Used. 直近に参照した時刻が一番古いものを捨てる）などのポリシーで、もっとも効果的なものを推奨とする</li></ul><h2 id="データ連携方式" tabindex="-1">データ連携方式 <a class="header-anchor" href="#データ連携方式" aria-label="Permalink to &quot;データ連携方式&quot;">​</a></h2><h3 id="マスタデータ配布" tabindex="-1">マスタデータ配布 <a class="header-anchor" href="#マスタデータ配布" aria-label="Permalink to &quot;マスタデータ配布&quot;">​</a></h3><p>あるシステムがメンテナンスするマスタデータを他のシステムで利用することはしばしば発生する。この時、該当のレコードを複数のシステムが編集したい場合は、マスタデータ管理（MDM）のような仕組みを検討することが多いが、下流のシステムが参照しか必要としない場合も多い。本節ではこのような場合の連携方式を考える。</p><p>以下のような連携パターン方式が考えられる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">手法</th><th style="text-align:left;">説明</th><th style="text-align:left;">主な課題や制約</th></tr></thead><tbody><tr><td style="text-align:left;">（1）DBリンク</td><td style="text-align:left;">dblink/fdwを用いた、DB共有を行う</td><td style="text-align:left;">システム間の結合度が大きく、将来的な負債に陥りやすい</td></tr><tr><td style="text-align:left;">（2）バッチ</td><td style="text-align:left;">定期的に連携先システム向けにマスタデータを抽出したファイルを作成する</td><td style="text-align:left;">鮮度問題（遅延が大きい）</td></tr><tr><td style="text-align:left;">（3）非同期（Push）</td><td style="text-align:left;">マスタデータの変更があったタイミングで、非同期で差分を連携する</td><td style="text-align:left;">実装難度が高い（データ整合性を担保することが難しい）</td></tr><tr><td style="text-align:left;">（4）Web API（Pull）</td><td style="text-align:left;">他システムが利用する際に、Web API形式でマスタを参照してもらう</td><td style="text-align:left;">参照レコード数が大きい場合は、性能劣化の懸念。チューニングのため結局呼び出し元でキャッシュ（腹持ち）になりがち。Web API呼び出しが随時になる場合は、結合度が高まる</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>1, 4の手法は採用しない <ul><li>性能／システム結合度の問題が看過しにくい</li></ul></li><li>2また3の手法を選択、組み合わせる <ul><li>枯れた手法である2を推奨。要件に応じて3を組み合わせる</li></ul></li></ul><p>2については下表で示すような手法がある。要件次第であるが、数百万件レベルであれば全件反映を採用する。</p><table tabindex="0"><thead><tr><th style="text-align:left;">分類</th><th style="text-align:left;">抽出方法</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">全件</td><td style="text-align:left;">-</td><td style="text-align:left;">件数が少ない場合は、一番楽。連携先は受信の都度マスタテーブルを洗替する（TRUNCATE+COPY）</td></tr><tr><td style="text-align:left;">差分</td><td style="text-align:left;">最終更新日でSELECT</td><td style="text-align:left;">定時起動のバッチ処理で実現</td></tr></tbody></table><p>差分／全件に問わず、以下の点に注意する。</p><ul><li>関連した複数テーブルを連携する場合、実行タイミングによっては不整合データを含むことがある <ul><li>マスタ配信テーブルなどを作成し、整合性が保てたデータのみを連携するなどの工夫が必要</li></ul></li><li>テーブルのジョインを行った連携ファイルにはできる限りしない <ul><li>連携先の要望に応えると、連携先が増えるたびにファイル数が増えることになるため</li></ul></li></ul><p>3については、下表で示すような手法がある。リアルタイム性が必要な場合は、CDCなどイベント駆動の処理方式を採用する。</p><table tabindex="0"><thead><tr><th style="text-align:left;">手法</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">CDC利用</td><td style="text-align:left;">AWS DMS、Debeziumなどの利用し随時反映する</td></tr><tr><td style="text-align:left;">ミニバッチ</td><td style="text-align:left;">1時間単位など、定時起動のバッチから最終更新日でSELECTする。DB負荷が問題になることもあるため、リードレプリカからの参照が必須</td></tr></tbody></table><h3 id="全文検索エンジン連携" tabindex="-1">全文検索エンジン連携 <a class="header-anchor" href="#全文検索エンジン連携" aria-label="Permalink to &quot;全文検索エンジン連携&quot;">​</a></h3><p>DB（PostgreSQL）と全文検索エンジン（例: Opensearch）の2つのデータストアを利用する場合の、データ連携方式について記載する。</p><p>構成の前提は以下の通り。</p><ul><li>データ永続のプライマリーデータストアはPostgreSQL（正のデータはPostgreSQL）</li><li>全文検索エンジンはプライマリーデータストアのデータの一部をコピーし、検索処理がオフロードされる構成</li></ul><p>PostgreSQLから全文検索エンジンへのデータコピーを「1.同期／2.非同期」のどちらで行うかによって、2つの方式（※詳細は後述）が考えられる。</p><p>推奨は以下の通り。</p><ul><li>できる限り「1.同期」で行う</li><li>同期がレイテンシなど何かしらの制約で実現が難しい場合は、「2.非同期」を検討する</li></ul><h4 id="_1-同期" tabindex="-1">1. 同期 <a class="header-anchor" href="#_1-同期" aria-label="Permalink to &quot;1. 同期&quot;">​</a></h4><p>アプリケーション上で、PostgreSQLと全文検索エンジンに両投げする方式である。アプリケーションは多少煩雑になるが、アプリケーションの責任分界点は明確で、ローカルを含めた各環境でのテストもしやすいメリットがある。</p>',218)),(a(),h(p,null,{default:l(()=>[e(d,{id:"mermaid-9724",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20participant%20User%20as%20%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%0A%20%20%20%20participant%20App%20as%20%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%0A%20%20%20%20participant%20DB%20as%20PostgreSQL%0A%20%20%20%20participant%20SearchEngine%20as%20%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%0A%0A%20%20%20%20User-%3E%3EApp%3A%20%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%0A%20%20%20%20App-%3E%3EApp%3A%20%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E5%A7%8B%0A%20%20%20%20App-%3E%3EDB%3A%20%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF%0A%20%20%20%20App-%3E%3ESearchEngine%3A%20%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF%0A%20%20%20%20App-%3E%3EApp%3A%20%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%0A%20%20%20%20App-%3E%3EUser%3A%20%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E6%88%90%E5%8A%9F%0A"})]),fallback:l(()=>[...s[1]||(s[1]=[i(" Loading... ",-1)])]),_:1})),s[5]||(s[5]=t("h4",{id:"_2-非同期",tabindex:"-1"},[i("2. 非同期 "),t("a",{class:"header-anchor",href:"#_2-非同期","aria-label":'Permalink to "2. 非同期"'},"​")],-1)),s[6]||(s[6]=t("p",null,[i("通常、全文検索エンジンはデータ登録が高速であるため、「1.同期」の全文検索において、キューイングシステム（例えばAWS SQS）を経由する意味があまりない。追加でRedisが必要となるが、PostgreSQLの"),t("a",{href:"https://www.postgresql.org/docs/current/logicaldecoding.html",target:"_blank",rel:"noreferrer"},"論理レコード"),i("を利用した、PGSyncを利用した構成案も考えられる。")],-1)),(a(),h(p,null,{default:l(()=>[e(d,{id:"mermaid-9731",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20participant%20User%20as%20%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%0A%20%20%20%20participant%20App%20as%20%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%0A%20%20%20%20participant%20DB%20as%20PostgreSQL%0A%20%20%20%20participant%20PGSync%20as%20PGSync%0A%20%20%20%20participant%20SearchEngine%20as%20%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%0A%0A%20%20%20%20User-%3E%3EApp%3A%20%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%0A%20%20%20%20App-%3E%3EDB%3A%20%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF%0A%20%20%20%20App-%3E%3EApp%3A%20%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%0A%20%20%20%20App-%3E%3EUser%3A%20%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E6%88%90%E5%8A%9F%0A%20%20%20%20PGSync-%3E%3EDB%3A%20%E8%AB%96%E7%90%86%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89%E3%81%A7%E5%A4%89%E6%9B%B4%E3%82%AD%E3%83%A3%E3%83%97%E3%83%81%E3%83%A3%E3%82%92%E5%8F%96%E5%BE%97%0A%20%20%20%20PGSync-%3E%3ESearchEngine%3A%20%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF%0A"})]),fallback:l(()=>[...s[2]||(s[2]=[i(" Loading... ",-1)])]),_:1})),s[7]||(s[7]=n(`<div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://github.com/toluaina/pgsync" target="_blank" rel="noreferrer">GitHub - toluaina/pgsync: Postgres to Elasticsearch/OpenSearch sync</a></li><li><a href="https://engineering.meetsmore.com/entry/2023/12/07/143025" target="_blank" rel="noreferrer">ECS 外部デプロイコントローラーで PGSync と Elasticsearch を安全にデプロイする - ミツモア Tech blog</a></li></ul></div><h3 id="olap連携" tabindex="-1">OLAP連携 <a class="header-anchor" href="#olap連携" aria-label="Permalink to &quot;OLAP連携&quot;">​</a></h3><p>業務システムによっては同じシステムドメインにOLAP（DWH）が存在することも多い。例えば、経営管理のように集計処理を多用し、BIで随時レポートが作成される場合は、OLTP／OLAPでDBを分離する設計が取られることもある。本節ではこのような場合の連携方式を考える。</p><table tabindex="0"><thead><tr><th style="text-align:left;">手法</th><th style="text-align:left;">説明</th><th style="text-align:left;">主な課題や制約</th></tr></thead><tbody><tr><td style="text-align:left;">（1）アプリで両方投げ</td><td style="text-align:left;">OLTP、OLAPの両DBにアプリケーションから両投げする</td><td style="text-align:left;">OLAP側の性能に引きずられ、レイテンシ／スループットの性能劣化の懸念がある。キューイングを挟むケースも含む</td></tr><tr><td style="text-align:left;">（2）同期アプリをバッチ実行</td><td style="text-align:left;">定期的にOLAPに連携用のファイルを作成し、投入する</td><td style="text-align:left;">リアルタイムに新製品の売上動向などを確認したいなどの場合に、鮮度が課題になる事が多い</td></tr><tr><td style="text-align:left;">（3）定時でOLAPから外部表でロード</td><td style="text-align:left;">dblink/fdwを活用し、OLAP側からOLTPのテーブルをSELECTし、OLAP側のテーブルにINSERTする</td><td style="text-align:left;">依存度が高まるが、実装コストは低い</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>OLAPがそのドメインでしか利用しないのであれば、3の方式を許容</li><li>後々、データ基盤に育ってくるようであれば、依存度を下げるため2にする</li><li>1はデータ鮮度がどうしても必要な場合にのみ採用する</li><li>AWSを利用している場合は後述のゼロETL導入を検討する</li></ul><h3 id="ゼロetl-aws" tabindex="-1">ゼロETL（AWS） <a class="header-anchor" href="#ゼロetl-aws" aria-label="Permalink to &quot;ゼロETL（AWS）&quot;">​</a></h3><p>AWSを利用している状況であり、RDS/Redshiftの構成であればゼロETLによりOLAP連携ができないか検討する。</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/zero-etl.html" target="_blank" rel="noreferrer">Amazon Redshift との Aurora ゼロ ETL 統合での作業</a></li></ul><p>ゼロETLはRDSやDynamoDBが更新されてからほぼリアルタイムにRedshiftにデータを同期する仕組みであり、AWS設定のみで導入できる。</p><div class="tip custom-block"><p class="custom-block-title">ゼロETLの対応状況</p><p><a href="https://aws.amazon.com/jp/blogs/news/amazon-aurora-postgresql-and-amazon-dynamodb-zero-etl-integrations-with-amazon-redshift-now-generally-available/" target="_blank" rel="noreferrer">Amazon Aurora PostgreSQL および Amazon DynamoDB の Amazon Redshift とのゼロ ETL 統合の一般提供を開始 | Amazon Web Services</a>にあるように、2024年12月時点で以下のゼロETLがGAされている。</p><ul><li>Aurora MySQL</li><li>Aurora PostgreSQL</li><li>RDS MySQL</li><li>DynamoDB</li></ul><p>※対応リージョンが限定されている可能性があるので都度確認が必要である。</p></div><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="/arch-guidelines/documents/forIF/if_guidelines.html#olap連携">OLAP連携 | I/F設計ガイドライン</a> にもOLAP連携について記載がある。</p></div><h2 id="改廃" tabindex="-1">改廃 <a class="header-anchor" href="#改廃" aria-label="Permalink to &quot;改廃&quot;">​</a></h2><h3 id="保持期限" tabindex="-1">保持期限 <a class="header-anchor" href="#保持期限" aria-label="Permalink to &quot;保持期限&quot;">​</a></h3><p>業務要件に応じて設計する。テーブル種別単位にポリシーを作成した上で、テーブル毎の個別要件に対応する。以下に記載例する。</p><p><strong>ポリシー例</strong>：</p><table tabindex="0"><thead><tr><th style="text-align:left;">テーブル種別</th><th style="text-align:left;">保持期限</th><th style="text-align:left;">パーティショニング</th><th style="text-align:left;">備考</th></tr></thead><tbody><tr><td style="text-align:left;">マスタ</td><td style="text-align:left;">無期限</td><td style="text-align:left;">ー</td><td style="text-align:left;">改廃無し</td></tr><tr><td style="text-align:left;">トラン</td><td style="text-align:left;">3年</td><td style="text-align:left;">年月</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">中間ワーク</td><td style="text-align:left;">7日</td><td style="text-align:left;">日次</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">I/F受信ワーク</td><td style="text-align:left;">7日</td><td style="text-align:left;">日次</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">I/F送信ワーク</td><td style="text-align:left;">7日</td><td style="text-align:left;">日次</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">・・・</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><p>保持期限の長さは、法令を含む業務要件を満たした後は、ストレージ費用／運用性（何かしら調査で過去データを確認したいケースもあると考えられる）のバランスを見て設計する。</p><h3 id="改廃方法" tabindex="-1">改廃方法 <a class="header-anchor" href="#改廃方法" aria-label="Permalink to &quot;改廃方法&quot;">​</a></h3><p>トランやワークテーブルは、法律上／業務要件などの観点で保持期間が決まり、それを超過した場合に社内ポリシーに応じてデータを削除することで、運用性の維持やストレージコストの低減などを狙うことができる。</p><p>データ改廃には以下2種類の方法が考えられる。</p><ol><li>パーティション改廃</li><li>DELETE改廃</li></ol><p>基本的には、トランやワークテーブルにはパーティションが定義されているように設計されているとし、パーティション改廃を用いる。もし、パーティションが指定不可のテーブルでかつ、改廃が必要な場合に限り、DELETE改廃を実施する。</p><p>万が一、DELETE改廃をする場合、必要に応じて以下の運用を検討する。</p><ul><li>統計情報の更新を実施 <ul><li>DELETE操作により大量の行が削除された場合、統計情報が古くなり、意図しない実行計画が選択され性能劣化する可能性がある。</li></ul></li><li>インデックス再作成を実施 <ul><li>DELETE操作によってインデックスに未使用のエントリが残ることにより、性能劣化する可能性がある。ストレージ容量も開放されないため、メンテナンスウィンドウが取れるのであればVACUUMを明示的に行う方が有利な場合がある</li><li>数百万件を超えるような巨大なインデックスのみに絞って個別対応する想定。パーティショニングされている場合、1パーティショニングあたりが数百万件となるテーブルを想定</li></ul></li></ul><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 統計情報の最新化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ANALYZE users;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- バキュームとANALYZEの両方を実行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VACUUM ANALYZE users;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>以下の点に注意する。</p><p>各テーブルの保持期限、改廃方法、改廃タイミングについては、以下のような項目をテーブル一覧などの設計ドキュメントにまとめる。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">保持期限</th><th style="text-align:left;">改廃方法</th><th style="text-align:left;">自動化</th><th style="text-align:left;">ジョブ実行タイミング</th><th style="text-align:left;">改廃条件</th><th style="text-align:left;">ANAYZE</th><th style="text-align:left;">Full VACUUM</th></tr></thead><tbody><tr><td style="text-align:left;">トランA</td><td style="text-align:left;">3年</td><td style="text-align:left;">パーティション改廃</td><td style="text-align:left;">✔</td><td style="text-align:left;">月次（25日23時）</td><td style="text-align:left;">保持期限超過</td><td style="text-align:left;"></td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">トランB</td><td style="text-align:left;">3年</td><td style="text-align:left;">DELETE改廃</td><td style="text-align:left;">✔</td><td style="text-align:left;">月次（25日23時）</td><td style="text-align:left;">保持期限超過 &amp;&amp; persistence_flg=false</td><td style="text-align:left;">✔</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">・・・</td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><h2 id="監視" tabindex="-1">監視 <a class="header-anchor" href="#監視" aria-label="Permalink to &quot;監視&quot;">​</a></h2><p>システムの中で最も重要な構成要素であるDBを適切な状態に保つため、メトリクスを収集することで、障害の予防やいち早い検知が求められる。本章ではPostgreSQL監視のための、対象項目・しきい値・通知レベル・実施手順といった一連の流れを記載する。</p><h3 id="ログ監視" tabindex="-1">ログ監視 <a class="header-anchor" href="#ログ監視" aria-label="Permalink to &quot;ログ監視&quot;">​</a></h3><p>PostgreSQLのサーバーサイドのメッセージを深刻度（下表を参考）ごとに制御できる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">深刻度</th><th style="text-align:left;">使用方法</th><th style="text-align:left;">ログ出力</th><th style="text-align:left;">監視対象</th></tr></thead><tbody><tr><td style="text-align:left;">DEBUG1 .. DEBUG5</td><td style="text-align:left;">開発者が使用する連続的かつより詳細な情報を提供。</td><td style="text-align:left;">ー</td><td style="text-align:left;">ー</td></tr><tr><td style="text-align:left;">INFO</td><td style="text-align:left;">VACUUM VERBOSEの出力などの、ユーザーによって暗黙的に要求された情報を提供</td><td style="text-align:left;">ー</td><td style="text-align:left;">ー</td></tr><tr><td style="text-align:left;">NOTICE</td><td style="text-align:left;">長い識別子の切り詰めに関する注意など、ユーザーの補助になる情報を提供</td><td style="text-align:left;">ー</td><td style="text-align:left;">ー</td></tr><tr><td style="text-align:left;">WARNING</td><td style="text-align:left;">トランザクションブロック外でのCOMMITの様な、ユーザーへの警告を提供</td><td style="text-align:left;">ー</td><td style="text-align:left;">ー</td></tr><tr><td style="text-align:left;">ERROR</td><td style="text-align:left;">現在のコマンドを中断させる原因となったエラーを報告</td><td style="text-align:left;">✔</td><td style="text-align:left;">ー</td></tr><tr><td style="text-align:left;">LOG</td><td style="text-align:left;">チェックポイントの活動の様な、管理者に関心のある情報を報告</td><td style="text-align:left;">ー</td><td style="text-align:left;">ー</td></tr><tr><td style="text-align:left;">FATAL</td><td style="text-align:left;">現在のセッションを中断させる原因となったエラーを報告</td><td style="text-align:left;">✔</td><td style="text-align:left;">ー</td></tr><tr><td style="text-align:left;">PANIC</td><td style="text-align:left;">全てのDBセッションを中断させる原因となったエラーを報告</td><td style="text-align:left;">✔</td><td style="text-align:left;">ー</td></tr></tbody></table><p>サーバーメッセージのログ管理について、推奨は以下の通り。</p><ul><li>ERROR以上をログ出力させる</li><li>サーバーのメッセージログを監視対象としない <ul><li>アプリケーション側でDBアクセスがあれば検知可能であるため</li><li>もし、メッセージ監視も行う場合は、アプリケーション側との重複検知を考慮して設計に加える</li></ul></li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://www.postgresql.jp/docs/16/runtime-config-logging.html" target="_blank" rel="noreferrer">20.8. エラー報告とログ取得</a></p></div><h3 id="メトリクス監視項目" tabindex="-1">メトリクス監視項目 <a class="header-anchor" href="#メトリクス監視項目" aria-label="Permalink to &quot;メトリクス監視項目&quot;">​</a></h3><p>推奨する監視項目を下表に示す。監視対象はAmazon Auroraを前提に記載する。</p><table tabindex="0"><thead><tr><th style="text-align:left;">分類</th><th style="text-align:left;">項目</th><th style="text-align:left;">監視対象</th><th style="text-align:left;">しきい値</th><th style="text-align:left;">備考</th></tr></thead><tbody><tr><td style="text-align:left;">性能</td><td style="text-align:left;">スロークエリ</td><td style="text-align:left;">pg_stat_statements</td><td style="text-align:left;">オンライン1分、バッチで10分など区別する</td><td style="text-align:left;">アプリケーション側で遅延チェック／門限チェックを入れる場合は、機能重複するため除外しても良い</td></tr><tr><td style="text-align:left;">リソース</td><td style="text-align:left;">CPU使用率</td><td style="text-align:left;">CPUUtilization</td><td style="text-align:left;">一定間隔で90％以上が継続した場合</td><td style="text-align:left;">発生頻度に応じて調整</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">メモリ使用量</td><td style="text-align:left;">FreeableMemory</td><td style="text-align:left;">一定間隔で5％未満が継続した場合</td><td style="text-align:left;">同上</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">ストレージ空き容量</td><td style="text-align:left;">FreeLocalStorage</td><td style="text-align:left;">10％未満になった場合</td><td style="text-align:left;">インスタンスタイプを上げないと、自動拡張されないため監視対象とする。</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">ストレージ容量</td><td style="text-align:left;">VolumeBytesUsed</td><td style="text-align:left;">予算見積もりで用いたデータ容量</td><td style="text-align:left;">自動拡張されるがコスト要因となるため、見積もりから大きく上振れ監視する。保守運用者により大きなテーブルがコピーを取られているなどを早めに検知する</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">コネクション数</td><td style="text-align:left;">DatabaseConnections</td><td style="text-align:left;">max_connections * 0.95 などの値</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">コネクション滞留</td><td style="text-align:left;">pg_stat_activity</td><td style="text-align:left;">3分など</td><td style="text-align:left;">定期ポーリングして、メンテナンスユーザーのコネクションが残り続けてないかチェックする。自動でコネクションをKillするかどうかは運用計画と合わせて検討する</td></tr></tbody></table><p>pg_stat_activity を利用したコネクション滞留は、例えば、下記のようなクエリで検知ができる。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pid,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       usename,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       application_name,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       client_addr,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       backend_start,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> backend_start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connection_duration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pg_stat_activity</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">usename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;foo_ope_%&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> -- メンテナンスユーザー名に絞り込み</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  AND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> backend_start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interval </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3 minutes&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://dev.classmethod.jp/articles/amazon-aurora-monitoring/" target="_blank" rel="noreferrer">Auroraの監視項目</a></li><li><a href="https://www.fujitsu.com/jp/products/software/resources/feature-stories/postgres/article-index/monitoring-overview/" target="_blank" rel="noreferrer">データベースシステムの監視 ～監視の概要～｜PostgreSQLインサイド : 富士通</a></li><li><a href="https://sysdig.jp/blog/top-5-key-metrics-for-monitoring-aws-rds/" target="_blank" rel="noreferrer">AWS RDSを監視するための重要なメトリクス Top 5 – Sysdig</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/Aurora.AuroraMonitoring.Metrics.html" target="_blank" rel="noreferrer">Amazon Aurora の Amazon CloudWatch メトリクス</a></li></ul></div><p>なお、DBの死活監視は、アプリケーション側でDeep Health Checkなどの外形監視が行われているとして、DB単体のサービス監視は実施しない想定とする。</p><p>上記メトリクス監視をスキップして良いケースが考えられる。</p><ul><li>スロークエリやCPU／メモリ使用率など性能目的の監視については、バッチ主体のシステムであれば「門限チェック」で代替可能であればスキップしても良い</li><li>自動拡張可能な「ストレージ容量」は、別途Billingのコスト監視をしている場合は外しても良い</li><li>「コネクション数」はバッチやWeb APIの性能監視やアプリケーション側のエラーログで確認が取れている場合は、スキップしても良い</li></ul><div class="tip custom-block"><p class="custom-block-title">Aurora Serverless v2の監視について</p><p><a href="https://dev.classmethod.jp/articles/monitor-amazon-aurora-serverless-v2-metrics/" target="_blank" rel="noreferrer">Aurora Serverless v2の監視項目</a> を参考にすること。</p></div><h3 id="通知方式-aws" tabindex="-1">通知方式（AWS） <a class="header-anchor" href="#通知方式-aws" aria-label="Permalink to &quot;通知方式（AWS）&quot;">​</a></h3><p>CloudWatch Metricsの場合は、CloudWatchアラームを設定することで必要な通知や課題管理システムへの起票を行う。コネクション滞留チェックのような、 <code>pg_stat_activity</code> を参照するような場合は、通常のアプリケーションと同様に、WARN／ERRORレベルでログを出力し、ログ監視側で通知や起票を行うと、監視周りの処理ルートが統一されるためお勧めである。</p><p>通知後のアクションや終了条件は、設定と同時に決める。それにより通知はされたがアクションがなされないといった監視運用の形骸化を防ぐ。</p><table tabindex="0"><thead><tr><th style="text-align:left;">項目</th><th style="text-align:left;">主な発生理由</th><th style="text-align:left;">アクション例</th></tr></thead><tbody><tr><td style="text-align:left;">CPU使用率</td><td style="text-align:left;">特定のクエリにより処理がスパイクし、他のアプリケーションに悪影響</td><td style="text-align:left;">・どの機能やクエリが問題を起こしたか確認し、対策を取る<br>・翌営業日に再現しなければクローズ</td></tr><tr><td style="text-align:left;">ストレージ空き容量</td><td style="text-align:left;">10％未満になった場合</td><td style="text-align:left;">・ログ改廃などの設定を確認<br>・正常な場合はインスタンスタイプを上げる<br>・コスト影響があるので利害関係者に共有する<br>・翌営業日に再現しなければクローズ</td></tr></tbody></table><h3 id="スロークエリの追跡" tabindex="-1">スロークエリの追跡 <a class="header-anchor" href="#スロークエリの追跡" aria-label="Permalink to &quot;スロークエリの追跡&quot;">​</a></h3><p>監視とは別にスロークエリをトレース可能にしておくことで、運用性が向上する。</p><p>例えば、以下のようなケースがある。</p><ul><li>あるジョブが想定時間通りに終わらなかったが、ジョブ中で複数のクエリが実行されており、各々はスロークエリの監視検知されなかった</li><li>アプリケーション側で処理遅延を検知したので、原因分析にSQLの状態を確認したい</li></ul><p>推奨は以下の通り。</p><ul><li>スロークエリをトレース可能にする。以下の設定を <code>postgresql.conf</code>（Amazon RDSの場合はパラメータグループ）に設定する</li></ul><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">設定例</th><th style="text-align:left;">備考</th></tr></thead><tbody><tr><td style="text-align:left;">log_min_duration_statement</td><td style="text-align:left;">300000</td><td style="text-align:left;">5分以上のクエリをログに出す</td></tr><tr><td style="text-align:left;">auto_explain.log_min_duration</td><td style="text-align:left;">300000</td><td style="text-align:left;">5分以上のクエリの実行計画を出す</td></tr><tr><td style="text-align:left;">auto_explain.log_format</td><td style="text-align:left;">text</td><td style="text-align:left;">text形式で出す。その他はjson/xmlなどを指定可能</td></tr></tbody></table><p>なお、「拡張機能」で紹介した <code>pg_stat_statements</code> を活用することでクエリの分析を合わせて実施することも可能。</p><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://www.postgresql.jp/docs/16/runtime-config-logging.html#GUC-LOG-MIN-DURATION-STATEMENT" target="_blank" rel="noreferrer">20.8. エラー報告とログ取得</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Reference.ParameterGroups.html" target="_blank" rel="noreferrer">Amazon Aurora PostgreSQL のパラメータ</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_PerfInsights.UsingDashboard.AnalyzeDBLoad.AdditionalMetrics.PostgreSQL.html" target="_blank" rel="noreferrer">RDS PostgreSQL での SQL 統計 - Amazon Relational Database Service</a></li></ul></div><h3 id="ログイン失敗の検知-aws" tabindex="-1">ログイン失敗の検知（AWS） <a class="header-anchor" href="#ログイン失敗の検知-aws" aria-label="Permalink to &quot;ログイン失敗の検知（AWS）&quot;">​</a></h3><p>ログインにN回失敗したら通知を出すなどの仕組みは、RDSとCloudWatch Logsのフィルター／アラーム の組み合わせで実現できる。厳密な回数に意味はなく普段と異なったアクティビティを検知する目的であれば、GuardDuty RDS Protectionを利用することで代用も考えられる。</p><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://repost.aws/ja/knowledge-center/track-failed-login-rds-postgresql" target="_blank" rel="noreferrer">Amazon RDS for PostgreSQL DB インスタンスへのログインに失敗したことを追跡する方法を教えてください。</a></li><li><a href="https://dev.classmethod.jp/articles/guardduty-rds-protection-finding-types/" target="_blank" rel="noreferrer">Amazon GuardDuty RDS Protection の具体的な検出タイプを調査しました | DevelopersIO</a></li></ul></div><h2 id="権限管理" tabindex="-1">権限管理 <a class="header-anchor" href="#権限管理" aria-label="Permalink to &quot;権限管理&quot;">​</a></h2><h3 id="ロール設計" tabindex="-1">ロール設計 <a class="header-anchor" href="#ロール設計" aria-label="Permalink to &quot;ロール設計&quot;">​</a></h3><p>PostgreSQLのロールはDB権限を持つことができ、通常DBユーザーに付与することで使用する。また、以下のような特徴を持つ。</p><ul><li>ロールを別のロールに付与できる</li><li>ロール自体もパスワードを持ち、ユーザーとしてログインさせることもできる</li></ul><p>推奨は以下の通り。</p><ul><li>ロールをユーザーとしての使用は禁止する（必ずユーザーに振り下ろす） <ul><li>ユーザーにロールを付与する、ロールベースアクセスコントロールとする</li></ul></li><li>ロールの継承は許可するが、ネストが深くなると権限状態の把握が難しくなるケースがあるため、厳密にやりすぎない <ul><li>例えば、メンテナロールに読み取り専用ロールを継承させて作成できるが、読み取り専用ロールの権限がスキーマ1つなどでシンプルであれば、継承せずフラットに管理する</li></ul></li></ul><p>以下は、ロールの継承における<strong>非推奨</strong>な例である。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- ベースとなる読み取り専用ロール</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--  デフォルトで WITH NOLOGIN オプション相当なので、ログイン不可</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ROLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo_readonly;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GRANT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ALL TABLES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">IN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SCHEMA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo_ope_readonly;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GRANT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ALL SEQUENCES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">IN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SCHEMA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo_ope_readonly;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 管理者ロール（読み取り専用ロールを継承しているが、可読性を含む管理メリットがさほど無いため非推奨）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ROLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo_ope_maintainer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GRANT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo_ope_readonly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo_ope_maintainer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GRANT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DELETE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TRUNCATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ALL TABLES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">IN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SCHEMA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo_ope_maintainer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GRANT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, USAGE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SEQUENCE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ALL SEQUENCES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">IN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SCHEMA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo_ope_maintainer;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>ロールの作成単位は以下の方針とする。</p><ul><li>「最小権限の原則」に従い、各ロールの権限を実用の範囲内で絞り込む</li><li>保守運用ユーザーも、管理者（DBA）と、DDLデプロイまたはデータパッチを適用する担当者、データ調査を目的とした読み取り専用など、属性ごとに分離</li></ul><p>下表はロール例である。fooはスキーマ名とする。</p><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">役割</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">foo_app</td><td style="text-align:left;">アプリケーションで使用するロール</td><td style="text-align:left;">もし、アプリケーション種別単位（Web API、Batch、I/F受信、I/F送信など）で権限レベルを分離する場合は、foo_app_webapi などというロールを作成する。 パスワードなどは暗号化され保持され（AWSではSecrets Managerなど）、厳格に管理される前提と、テーブル単位で細かく権限制御しすぎないようにする</td></tr><tr><td style="text-align:left;">foo_ope_admin</td><td style="text-align:left;">管理者ロール</td><td style="text-align:left;">ユーザー作成、ロール付与を含む全操作が可能</td></tr><tr><td style="text-align:left;">foo_ope_maintainer</td><td style="text-align:left;">メンテナンスロール リリース担当者向け</td><td style="text-align:left;">DDL、データ更新、データ参照が可能</td></tr><tr><td style="text-align:left;">foo_ope_readonly</td><td style="text-align:left;">メンテナンスロール 読み取り専用</td><td style="text-align:left;">データ参照が可能</td></tr></tbody></table><h3 id="dbユーザー管理" tabindex="-1">DBユーザー管理 <a class="header-anchor" href="#dbユーザー管理" aria-label="Permalink to &quot;DBユーザー管理&quot;">​</a></h3><p>DBユーザは一般的に以下の方針で管理することが望ましいとされる。</p><ul><li>アプリケーションユーザーと、保守運用ユーザーは分離</li><li>ユーザーへの権限付与は、必ずロールを経由して行う（ロールベースアクセスコントロール）</li><li>監査観点から、保守運用者ユーザーはなるべく細かい粒度で作成する</li></ul><p>保守運用者が用いるユーザーの払い出し単位は、以下のような方針が考えられる。</p>`,79)),s[8]||(s[8]=t("table",{tabindex:"0"},[t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"案"),t("th",{style:{"text-align":"left"}},"説明"),t("th",{style:{"text-align":"left"}},"判例")])]),t("tbody",null,[t("tr",null,[t("td",{style:{"text-align":"left"}},"（1）個人単位で払い出し"),t("td",{style:{"text-align":"left"}},[i("保守運用者1人ずつに払い出す方式。J-SOXに従うなど厳格に管理する必要がある場合に用いる。"),t("br"),i("メンテナンスロール以上を付与する場合は、同時に読み取り専用のユーザーも作成する")]),t("td",{style:{"text-align":"left"}},[i("{スキーマ}"),t("em",{会社名:""},"ope"),t("em",{会社名:""},[i("名称"),t("br"),i(" {スキーマ}_ope")]),i("_名称_readonly"),t("br"),i(" ---"),t("br"),i(" foo_ope_future_mano91"),t("br"),i(" foo_ope_future_mano91_readonly")])]),t("tr",null,[t("td",{style:{"text-align":"left"}},"（2）組織単位で払い出し ※1と組み合わせて利用"),t("td",{style:{"text-align":"left"}},"部署／会社などの組織単位で作成する。例えばメインで開発する会社と、一部外部の開発会社に依頼した場合を想定する。"),t("td",{style:{"text-align":"left"}},[i("{スキーマ}"),t("em",{会社名:""},"ope"),t("br"),i(" {スキーマ}"),t("em",{会社名:""},"ope"),i("_readonly")])]),t("tr",null,[t("td",{style:{"text-align":"left"}},"（3）アカウント共有"),t("td",{style:{"text-align":"left"}},"ロールごとに1つのユーザーを作成して共有する方式"),t("td",{style:{"text-align":"left"}},"foo_ope_maintener foo_ope_readonly")])])],-1)),s[9]||(s[9]=n('<p>推奨は以下の通り。</p><ul><li>基本的に（1）で管理する</li><li>人の入れ替わりが激しく実用に耐えない場合のみ2を組み合わせる</li><li>（3）は原則、禁止とする</li></ul><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://aws.amazon.com/jp/blogs/news/managing-postgresql-users-and-roles/" target="_blank" rel="noreferrer">PostgreSQL ユーザーとロールの管理 | Amazon Web Services ブログ</a></p></div><div class="tip custom-block"><p class="custom-block-title">踏み台サーバーとの組み合わせ</p><p>踏み台サーバーはユーザー単位で払い出し、DBユーザーは案2の組織単位を利用するハイブリッドな構成を取得することも多い。この場合は、踏み台サーバーの操作ログと、DB側の監査ログを突き合わせて、作業者を特定する必要がある。DBユーザー側のアカウント管理を省力化できるメリットがある。</p></div><div class="tip custom-block"><p class="custom-block-title">AWSの場合はIAMに寄せる方式について</p><p>DBユーザーが共有することになるため、IAMに寄せる方式の場合は監査上問題が無いような設計が必要である（参考: <a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html" target="_blank" rel="noreferrer">IAM データベース認証 - Amazon Aurora</a>）。</p></div><h2 id="監査" tabindex="-1">監査 <a class="header-anchor" href="#監査" aria-label="Permalink to &quot;監査&quot;">​</a></h2><p>本ガイドラインでは、「だれが」、「いつ」、「どのリソースに対して」、「どの操作」をして、「どうなったか」を監査ログという形で記録し、不審なアクセスを早期に発見、管理、検証可能とする仕組み構築する方針とする。</p><p>また、取得した監査ログを定期的に監視することで、被害を事前に防止し、万が一情報漏洩が発生したとしても早期の原因分析・影響範囲の特定できる。それにより、その後の被害を最小に抑えることに繋がる。</p><h3 id="監査ログ取得方法" tabindex="-1">監査ログ取得方法 <a class="header-anchor" href="#監査ログ取得方法" aria-label="Permalink to &quot;監査ログ取得方法&quot;">​</a></h3><p>Amazon Aurora PostgreSQLにおける監査ログの取得方法は、3種類存在する。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">説明</th><th style="text-align:left;">Pro</th><th style="text-align:left;">Cons</th></tr></thead><tbody><tr><td style="text-align:left;">（1）log_statement=all</td><td style="text-align:left;">postgresql.confに設定する。 DDL／DMLの全クエリをログ出力する。設定値には、none／ddl／mod／allが存在する</td><td style="text-align:left;">・設定が容易</td><td style="text-align:left;">・接続情報やスキーマ名などが出力されない<br> ・性能影響が大きい<br> ・ロールやオブジェクトに対する絞り込みができず、調査が困難</td></tr><tr><td style="text-align:left;">（2）pgAudit</td><td style="text-align:left;">拡張機能を用いた方法</td><td style="text-align:left;">・PostgreSQLで一般的な仕組みであるため、ナレッジ転用がしやすい</td><td style="text-align:left;">・性能影響を抑えるため、監査対象のイベントの見極めが必要<br> ・ログがDBのストレージを使用するため、要監視</td></tr><tr><td style="text-align:left;">（3）データベースアクティビティストリーム</td><td style="text-align:left;">AWS側で提供された仕組み。アクティビティログをKinesisデータストリームに準リアルタイムでプッシュするため、後続の作り込みが楽。</td><td style="text-align:left;">・性能影響が少ない <br>・Kinesis経由で連携がシームレス</td><td style="text-align:left;">・ベンダーロックイン</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>既存のノウハウが転用しやすく有識者も多いとされる、「2.pgAudit」の利用する</li></ul><h3 id="db監査対象" tabindex="-1">DB監査対象 <a class="header-anchor" href="#db監査対象" aria-label="Permalink to &quot;DB監査対象&quot;">​</a></h3><p>DBに対して全てのアクティビティログを出力すると、ストレージ費用高となり、またいざというときの調査時にノイズにもなる。監査ログ対象は以下の方針とする。</p><ul><li>アプリケーションで用いるDBユーザーはREAD／WRITEなど、通常使用するコマンドは対象外とする。理由はアプリケーションのサーバーサイドログ側でも必要なログを出力しているという前提を置いているため（もし、存在しない場合は追加で加える必要がある）</li><li>アプリケーションが、通常行わないと想定しているコマンドは、対象に加える（例えば、アプリケーションからDDLを流すなど）</li><li>ただし、権限上、実行が不可能な操作については、対象から除外し調査を容易とする</li><li>運用保守など手動でクエリを実行しうるDBユーザーに対して、原則全てを取得する</li></ul><h5 id="監視コマンド" tabindex="-1">監視コマンド <a class="header-anchor" href="#監視コマンド" aria-label="Permalink to &quot;監視コマンド&quot;">​</a></h5><p>pgAuditは2つの監査ログ取得方法が存在する。1、2の併用も可能。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">説明</th><th style="text-align:left;">指定対象</th></tr></thead><tbody><tr><td style="text-align:left;">（1）セッション監査</td><td style="text-align:left;">DBユーザー単位で、参照／更新などのクラスで監査ログ出力の有効／無効化が可能。DBユーザー×テーブル粒度の調整は不可。</td><td style="text-align:left;">DBユーザー単位</td></tr><tr><td style="text-align:left;">（2）オブジェクト監査</td><td style="text-align:left;">テーブル、列単位で監査ログ出力の有効／無効化が可能。DBユーザー×テーブル粒度の調整は不可。</td><td style="text-align:left;">テーブル、列単位</td></tr></tbody></table><p>基本的にはセッション監査のみを利用する方針とする。オブジェクト監査は、セッション監査でログ量が膨大になりえる場合に利用を検討する。</p><p>セッション監査のコマンド一覧は <a href="https://github.com/pgaudit/pgaudit?tab=readme-ov-file#pgauditlog" target="_blank" rel="noreferrer">https://github.com/pgaudit/pgaudit?tab=readme-ov-file#pgauditlog</a> から以下の通り。</p><table tabindex="0"><thead><tr><th style="text-align:left;">設定値</th><th style="text-align:left;">説明</th><th style="text-align:left;">例</th></tr></thead><tbody><tr><td style="text-align:left;">READ</td><td style="text-align:left;">参照</td><td style="text-align:left;">SELECT、COPY</td></tr><tr><td style="text-align:left;">WRITE</td><td style="text-align:left;">更新</td><td style="text-align:left;">INSERT、UPDATE、DELETE、TRUNCATE、COPY</td></tr><tr><td style="text-align:left;">FUNCTION</td><td style="text-align:left;">関数呼び出し</td><td style="text-align:left;">DO</td></tr><tr><td style="text-align:left;">ROLE</td><td style="text-align:left;">ロール権限の操作</td><td style="text-align:left;">GRANT、REVOKE、CREATE/ALTER/DROP ROLE</td></tr><tr><td style="text-align:left;">DDL</td><td style="text-align:left;">ロール以外のDDL</td><td style="text-align:left;">CREATE TABLE</td></tr><tr><td style="text-align:left;">MISC</td><td style="text-align:left;">その他のコマンド</td><td style="text-align:left;">DISCARD、FETCH、CHECKPOINT、VACUUM、SET</td></tr><tr><td style="text-align:left;">MISC_SET</td><td style="text-align:left;">SET系</td><td style="text-align:left;">SET ROLE</td></tr><tr><td style="text-align:left;">ALL</td><td style="text-align:left;">全て</td><td style="text-align:left;"></td></tr></tbody></table><p>これを踏まえ、以下のように監査出力項目を定義する。下表はあくまで「設計例」であり、実際の設定値は要件や監査方針に従い調整すること。</p><p>【判例】「✅️」監査有効、「⚙️」実行可能「-」権限上不可</p><table tabindex="0"><thead><tr><th style="text-align:left;">DBユーザー種別</th><th style="text-align:left;">READ</th><th style="text-align:left;">WRITE</th><th style="text-align:left;">FUNCTION</th><th style="text-align:left;">ROLE</th><th style="text-align:left;">DDL</th><th style="text-align:left;">MISC</th><th style="text-align:left;">MISC_SET</th><th style="text-align:left;">備考</th></tr></thead><tbody><tr><td style="text-align:left;">１．アプリケーションユーザー</td><td style="text-align:left;">⚙️</td><td style="text-align:left;">⚙️</td><td style="text-align:left;">⚙️</td><td style="text-align:left;">-</td><td style="text-align:left;">✅️</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td><td style="text-align:left;">READ/WRITEは通常利用が想定されるため除外。その他は権限上、許可している場合は対象とする</td></tr><tr><td style="text-align:left;">２．外部アプリケーションユーザー （dblink/fdw）</td><td style="text-align:left;">⚙️</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td><td style="text-align:left;">ロールとして参照のみを渡している前提のため。</td></tr><tr><td style="text-align:left;">３．運用保守ユーザー</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td><td style="text-align:left;">✅️</td><td style="text-align:left;">ALLを指定する</td></tr><tr><td style="text-align:left;">４．運用保守 データ調査用ユーザー</td><td style="text-align:left;">✅️</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td><td style="text-align:left;">権限上、READしか許容されないため。</td></tr></tbody></table><h3 id="監査ログの通知" tabindex="-1">監査ログの通知 <a class="header-anchor" href="#監査ログの通知" aria-label="Permalink to &quot;監査ログの通知&quot;">​</a></h3><p>監査ログの出力と同じ粒度で通知する必要はなく、何かしらアクションが必要な場合のみ通知する。例えば、PIIなど機微な情報が含まれるテーブルを、運用保守データ調査ユーザーが参照した場合に、それらが事前申請に含まれているかといったチェックをしたいといった運用がある場合に、通知する。</p><p>AWSであれば、以下のような構成が考えられる。</p><ol><li>Aurora</li><li>CloudWatch Logs</li><li>サブスクリプションフィルター</li><li>Lambda（だれが、どのようなテーブルに、何をしたかといった情報から通知対象をフィルター）</li><li>Slackやメールへ通知</li></ol><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/Appendix.PostgreSQL.CommonDBATasks.pgaudit.html" target="_blank" rel="noreferrer">pgAudit を使用してデータベースのアクティビティを記録する - Amazon Relational Database Service</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html" target="_blank" rel="noreferrer">データベースアクティビティストリームを使用した Amazon Aurora のモニタリング</a></li><li><a href="https://repost.aws/ja/knowledge-center/rds-postgresql-pgaudit" target="_blank" rel="noreferrer">pgAudit を使用して RDS for PostgreSQL DB インスタンスを監査する | AWS re:Post</a></li><li><a href="https://gihyo.jp/admin/feature/01/detabase-security/0004" target="_blank" rel="noreferrer">第4回 データベース監視のススメ［DB監査ログ取得編］ | gihyo.jp</a></li><li><a href="https://www.ntt-tx.co.jp/column/postgresql_blog/240403/" target="_blank" rel="noreferrer">pgaudit で PostgreSQL のオブジェクト監査をやってみよう！ | NTTテクノクロスブログ</a></li></ul></div><h2 id="bcp-dr" tabindex="-1">BCP/DR <a class="header-anchor" href="#bcp-dr" aria-label="Permalink to &quot;BCP/DR&quot;">​</a></h2><p>本ガイドラインにおけるBCP、DRは以下を指す。</p><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">BCP: Business Continuity Plan</td><td style="text-align:left;">災害やテロ、パンデミックなどの緊急事態が発生した際に損害を最小限にし、事業の継続や復旧を図るための計画のこと</td></tr><tr><td style="text-align:left;">DR: Disaster Recovery</td><td style="text-align:left;">災害復旧のことでシステムが壊滅的な状況になった際に損害が最小限で済むように備えること、速やかに復旧させる対策のこと</td></tr></tbody></table><p>事業の継続性のために、例えば災害を想定するとどこまで考慮するかが観点となる。</p><table tabindex="0"><thead><tr><th style="text-align:left;">想定する緊急事態</th><th style="text-align:left;">対策</th><th style="text-align:left;">対応コスト</th><th style="text-align:left;">対応必須</th></tr></thead><tbody><tr><td style="text-align:left;">DC内のサーバーが障害</td><td style="text-align:left;">オートヒーリング</td><td style="text-align:left;">低</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">落雷、竜巻でDCが停電／破損</td><td style="text-align:left;">マルチAZで構成を組む</td><td style="text-align:left;">低</td><td style="text-align:left;">✔</td></tr><tr><td style="text-align:left;">関東一帯で天災</td><td style="text-align:left;">東京／大阪のマルチリージョン構成</td><td style="text-align:left;">中～高</td><td style="text-align:left;">❓️</td></tr><tr><td style="text-align:left;">関東／関西で同時多発的な天災</td><td style="text-align:left;">シンガポールなど海外のマルチリージョン構成</td><td style="text-align:left;">中～高</td><td style="text-align:left;">❓️</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>オートヒーリング／マルチAZ 構成をできる限り構築する（SPOFはつくらない）</li><li>マルチリージョン構成は、各プロジェクトで決める</li></ul><p>理由は以下の通り。</p><ul><li>システムとしてどのレベルまで担保する方針にするかは、BCP計画次第でありシステムだけで閉じる話ではない（例えばビジネスが関東でのみ展開されている場合に、マルチリージョン構成を取るとバランスを欠く）</li><li>マルチリージョン構成は設計コスト／クラウド費用が通常、高くなるため</li></ul><h3 id="復旧要件" tabindex="-1">復旧要件 <a class="header-anchor" href="#復旧要件" aria-label="Permalink to &quot;復旧要件&quot;">​</a></h3><p>RPO、RTOを定義し、それにより復旧シナリオを4パターンに分類して検討を進めること。</p><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">RPO：Recovery Point Objective</td><td style="text-align:left;">目標復旧時点。どの時点までデータを戻す必要があるかということ</td></tr><tr><td style="text-align:left;">RTO：Recovery Time Objective</td><td style="text-align:left;">目標復旧時間。システムの復旧にどれぐらい時間をかけられるかということ</td></tr></tbody></table><p>復旧シナリオは下図の通り。</p><p><img src="'+b+'" alt=""></p><p>※上記画像は、<a href="https://aws.amazon.com/jp/blogs/news/disaster-recovery-strategy-in-the-cloud/" target="_blank" rel="noreferrer">事業継続性が求められる基幹システムの DR 戦略 | Amazon Web Services</a> より引用</p><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://docs.aws.amazon.com/ja_jp/wellarchitected/2022-03-31/framework/w44aac19b9c11c13.html" target="_blank" rel="noreferrer">REL 13 災害対策 (DR) はどのように計画するのですか? - AWS Well-Architected Framework</a></p></div><h3 id="バックアップ-リストア" tabindex="-1">バックアップ／リストア <a class="header-anchor" href="#バックアップ-リストア" aria-label="Permalink to &quot;バックアップ／リストア&quot;">​</a></h3><p>この節では、あるBCP計画に基づく一例を示す。</p><p>DR対策でRTO／RPOが以下のように決まったとする。</p><ul><li>RTO 4時間</li><li>RPO 4時間</li></ul><p>復旧の要件から、復旧シナリオは「バックアップ／リストア」に決めることができたとする。</p><p>Amazon RDS（Aurora） PostgreSQLにおいては、以下のデータバックアップ方法がある。</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">（1）自動バックアップ</td><td style="text-align:left;">指定した日時（1~35日）に戻すことができる機能</td></tr><tr><td style="text-align:left;">（2）手動スナップショット</td><td style="text-align:left;">1の保持期間外のデータを保存するために行ったバックアップ</td></tr></tbody></table><p>推奨は以下の通り。</p><ul><li>基本的には（1）を利用する</li><li>範囲外の断面を保存したい場合に（2）を利用する</li></ul><h3 id="世代管理-1" tabindex="-1">世代管理 <a class="header-anchor" href="#世代管理-1" aria-label="Permalink to &quot;世代管理&quot;">​</a></h3><p>世代管理とは、直近のデータだけでなく、それ以前のデータも保存するバックアップ方法のことを指す。RPOとしては直近の断面でリストアすることを想定するが、別の断面でのリストアも可能にしておくことで、リスクヘッジできる。誤操作でデータを書き換え発覚が数週間経過した後の場合や、ランサムウェアによるデータ汚染などを想定している。</p><p>推奨は以下の通り。</p><ul><li>コストとの兼ね合いであるが、直近保持（日次3世代など）以外の断面でバックアップ（週次4世代など）取得する <ul><li>上記の場合は自動バックアップで3日、手動スナップショットを週次で実行する</li></ul></li><li>手動バックアップしたデータを、別のリージョンにコピーする</li></ul><p>理由は以下の通り。</p><ul><li>DRリカバリーとしては直近世代のデータでリカバリー。何かしらのデータ汚染が発生したシナリオにおけるリカバリーは、直近であれば自動バックアップから、長期間経過して検知した場合は手動スナップショットからリストアできるため</li><li>手動バックアップを取るということは、データの安全性へ強い配慮があることから、マルチリージョンで保持し、信頼性を高める。S3間のデータコピーは手間がそこまでかからないため</li></ul><div class="warning custom-block"><p class="custom-block-title">バックアップの順序に気をつける</p><p>例えば、バックアップ開始前に古いバックアップを消すと、規定する世代数未満しか保持できていない瞬間が生まれてしまう。実行順序に気をつけること。</p></div><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/aurora-storage-backup.html" target="_blank" rel="noreferrer">Amazon Aurora バックアップストレージの使用状況を確認する - Amazon Aurora</a></li><li><a href="https://business.ntt-east.co.jp/service/coworkstorage/column/sedaikanri/index.html" target="_blank" rel="noreferrer">【バックアップ基礎知識】世代管理とは｜何世代まで取るのがおすすめか</a></li></ul></div><h2 id="謝辞" tabindex="-1">謝辞 <a class="header-anchor" href="#謝辞" aria-label="Permalink to &quot;謝辞&quot;">​</a></h2><p>このアーキテクチャガイドラインの作成にあたり、多大なるご協力をいただきました皆様に心より感謝申し上げます。</p><ul><li><strong>作成者</strong>（真野隼記、武田大輝、宮崎将太、澁川喜規、村田靖拓、岸本卓也、関根直弥、清水雄一郎）</li><li><strong>レビュアー</strong>（杉江伸祐、二村暢之、佐々木伸悟、辻大志郎、尾崎駿）</li></ul><p>皆様のご尽力なしには、本ガイドラインの完成はなしえませんでした。改めて深く感謝いたします。</p>',67))])}const C=g(u,[["render",f]]);export{L as __pageData,C as default};
