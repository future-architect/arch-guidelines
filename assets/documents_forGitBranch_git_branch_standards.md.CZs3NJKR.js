import{_ as s,C as e,c as i,o as l,G as n,a4 as r}from"./chunks/framework.BJEXY-5A.js";const d="/arch-guidelines/assets/branch_strategy_feature.drawio.Dx3_5kFX.png",p="/arch-guidelines/assets/branch_strategy_develop.drawio.BB9doEUP.png",o="/arch-guidelines/assets/branch_strategy_release.drawio.DosnswvU.png",h="/arch-guidelines/assets/branch_strategy_hotfix.drawio.RF4mmQSP.png",c="/arch-guidelines/assets/branch_strategy_topic.drawio._OMQxJxK.png",u="/arch-guidelines/assets/branch_strategy_multi_develop.drawio.BUj3y2B6.png",g="/arch-guidelines/assets/branch_strategy_release_multi_develop.drawio.D7tvE9S0.png",b="/arch-guidelines/assets/branch_strategy_multi_version.drawio.BALCIJus.png",k="/arch-guidelines/assets/merge_strategy_develop_to_feature_merge.drawio.Chi_3Oep.png",m="/arch-guidelines/assets/merge_strategy_develop_to_feature_rebase.drawio.Db0KPnu1.png",F="/arch-guidelines/assets/merge_strategy_feature_to_develop_merge_commit.drawio.ClfglnSw.png",f="/arch-guidelines/assets/merge_strategy_feature_to_develop_rebase_and_merge.drawio.C4YTK8Ke.png",y="/arch-guidelines/assets/merge_strategy_feature_to_develop_squash_and_merge.drawio.DNfqg4i8.png",v="/arch-guidelines/assets/merge_strategy_feature_to_develop_squash_and_merge_gitlab.drawio.DUmvz-tJ.png",C="/arch-guidelines/assets/release_overtaking.drawio.DPjD4_z3.png",_="/arch-guidelines/assets/release_overtaking_hotfix.drawio.BcV3VqPO.png",B="/arch-guidelines/assets/create_new_tag.vcx7NIW6.png",q="/arch-guidelines/assets/create_new_tag_title.DvuteGpB.png",E="/arch-guidelines/assets/no_diff.CIo3jTz9.png",x="/arch-guidelines/assets/vscode_git_clone1.qDoYJxim.png",P="/arch-guidelines/assets/vscode_git_clone2.CEP9JvgJ.png",G="/arch-guidelines/assets/vscode_git_graph1.B-QqvDRT.png",w="/arch-guidelines/assets/vscode_git_graph2.004hjEVr.png",A="/arch-guidelines/assets/vscode_git_fetch1.DRikG15J.png",D="/arch-guidelines/assets/vscode_git_fetch2.DAVY-Tc0.png",R="/arch-guidelines/assets/vscode_git_branch1.l8tVcgzj.png",L="/arch-guidelines/assets/vscode_git_branch2.Cwy7x_5O.png",S="/arch-guidelines/assets/vscode_git_stage.BcG6O3Ku.png",H="/arch-guidelines/assets/vscode_git_commit.BYQAFQn8.png",I="/arch-guidelines/assets/vscode_git_push1.BlFN6oO1.png",O="/arch-guidelines/assets/vscode_git_push2.BhX_AasB.png",j="/arch-guidelines/assets/vscode_git_push3.DjxvPuCO.png",z=JSON.parse('{"title":"Gitブランチフロー規約","description":"","frontmatter":{"sidebarDepth":4,"title":"Gitブランチフロー規約","author":"フューチャー株式会社","head":[["meta",{"name":"keywords","content":"Git"}]]},"headers":[],"relativePath":"documents/forGitBranch/git_branch_standards.md","filePath":"documents/forGitBranch/git_branch_standards.md"}'),T={name:"documents/forGitBranch/git_branch_standards.md"};function M(V,a,N,U,$,J){const t=e("page-title");return l(),i("div",null,[n(t),a[0]||(a[0]=r('<p>本ガイドラインは、世の中のシステム開発プロジェクトのために無償で提供する。<br> ただし、掲載内容および利用に際して発生した問題、それに伴う損害については、フューチャー株式会社（以下、フューチャー）は一切の責務を負わないものとする。<br> また、掲載している情報は予告なく変更する場合があるため、あらかじめご了承いただきたい。</p><div class="warning custom-block"><p class="custom-block-title">免責事項: 有志で作成したドキュメントである</p><ul><li>フューチャーには多様なプロジェクトが存在し、それぞれの状況に合わせて工夫された開発プロセスや高度な開発支援環境が存在する。本ガイドラインはフューチャーの全ての部署／プロジェクトで適用されているわけではなく、有志が観点を持ち寄って新たに整理したものである</li><li>相容れない部分があればその領域を書き換えて利用することを想定している <ul><li>プロジェクト固有の背景や要件への配慮は、ガイドライン利用者が最終的に判断すること</li></ul></li><li>本ガイドラインに必ず従うことは求めておらず、設計案の提示と、それらの評価観点を利用者に提供することを主目的としている</li></ul></div><h2 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h2><p>本規約はGitブランチ管理の標準的な運用ルールをまとめている。以下の想定で作成されているため留意すること。</p><ul><li>GitHub ／ GitLab の利用</li><li>トランクベース開発（フィーチャーフラグ）を <strong>採用しない</strong></li><li>ライブラリではなく、アプリケーション（CLIツール、Webアプリケーションなどの）開発で利用する</li></ul><h2 id="基本方針" tabindex="-1">基本方針 <a class="header-anchor" href="#基本方針" aria-label="Permalink to &quot;基本方針&quot;">​</a></h2><p>一般的なGitブランチ運用のプラクティスに従い、本規約も以下の方針に則る。</p><ul><li>すべての機能開発や不具合修正に、featureブランチを使用する</li><li>プルリクエストを経由してfeatureブランチの修正内容をマージする</li><li>永続ブランチは各環境にデプロイ可能となるよう整合性を保つ</li></ul><h2 id="ブランチの種類" tabindex="-1">ブランチの種類 <a class="header-anchor" href="#ブランチの種類" aria-label="Permalink to &quot;ブランチの種類&quot;">​</a></h2><p>本規約で想定する、ブランチの種類とその役割を説明する。</p><table tabindex="0"><thead><tr><th>ブランチ名称</th><th>役割</th><th>ライフサイクル</th><th>派生元ブランチ</th><th>命名規則</th><th>直プッシュ</th></tr></thead><tbody><tr><td><code>main</code></td><td>プロダクション環境との同期</td><td>永続的</td><td>-</td><td><code>main</code> 固定</td><td>❌️</td></tr><tr><td><code>feature</code></td><td>特定機能の追加/変更</td><td>短命</td><td><code>main</code>／<code>develop</code></td><td><code>feature/${チケット番号}</code>: 詳細は<a href="#featureブランチ">featureブランチ</a> を参照</td><td>✅️※1</td></tr><tr><td><code>develop</code></td><td>開発の大元</td><td>永続的</td><td><code>main</code></td><td><code>develop</code> 固定。複数必要な場合は <code>develop2</code> と連番にする</td><td>❌️</td></tr><tr><td><code>release</code></td><td>リリース作業用途</td><td>短命</td><td><code>develop</code></td><td><code>release/${yyyymmdd}</code> や <code>release/${リリースバージョン}</code> など</td><td>❌️</td></tr><tr><td><code>hotfix</code></td><td>mainブランチに対する即時修正</td><td>短命</td><td><code>main</code></td><td><code>hotfix/${チケット番号}</code>: featureブランチに準じる</td><td>✅️</td></tr><tr><td><code>topic</code></td><td>複数人での機能開発用途</td><td>短命</td><td><code>feature</code></td><td><code>topic/${チケット番号}</code>: featureブランチに準じる</td><td>✅️</td></tr></tbody></table><p>※1: topicブランチを利用する場合は、派生させたfeatureブランチへの直プッシュはNGとなる</p><h3 id="mainブランチ" tabindex="-1">mainブランチ <a class="header-anchor" href="#mainブランチ" aria-label="Permalink to &quot;mainブランチ&quot;">​</a></h3><p>Gitリポジトリを新規作成するとデフォルトで作成されるブランチ。masterからmainに改名された経緯を持つ<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。</p><p>マージ毎にプロダクション環境へデプロイし同期を取る。</p><h3 id="featureブランチ" tabindex="-1">featureブランチ <a class="header-anchor" href="#featureブランチ" aria-label="Permalink to &quot;featureブランチ&quot;">​</a></h3><p>機能追加や変更を行うブランチで、主な特徴は以下である。</p><ul><li>ひとつの変更に対してひとつのfeatureブランチを作成し、作業完了後に削除するため、開発中で最も使われる短命なブランチである</li><li>基本的に1人の開発者のみが利用する</li></ul><div class="img-bg-transparent"><p><img src="'+d+`" alt="feature branch"></p></div><p>以下の命名に従う。</p><ul><li><code>feature/</code> のプレフィックスを付ける</li><li>課題管理システムと紐付けられるようなブランチ名にする</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># OK（課題管理システムの課題番号をブランチ名に利用）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">feature/#12345</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># OK（GitHub Issue や JIRA や Backlog のプロジェクトIDをブランチ名に利用）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">feature/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;PROJECTID&gt;-9403</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># NG（プレフィックスが無い）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fixtypo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="developブランチ" tabindex="-1">developブランチ <a class="header-anchor" href="#developブランチ" aria-label="Permalink to &quot;developブランチ&quot;">​</a></h3><p>開発の中心となるブランチである。</p><div class="img-bg-transparent"><p><img src="`+p+'" alt="develop branch"></p></div><h3 id="releaseブランチ" tabindex="-1">releaseブランチ <a class="header-anchor" href="#releaseブランチ" aria-label="Permalink to &quot;releaseブランチ&quot;">​</a></h3><p>リリースするために使用するブランチで、主な特徴は以下である。</p><ul><li>リリース前の検証を開発と並行して実施する場合に利用する</li><li>releaseブランチではバグ修正、ドキュメント生成、その他のリリースに伴うタスクのみを実施する</li><li>mainブランチのマージコミットにリリースタグを打ち、mainブランチをdevelopブランチへマージ後、releaseブランチを削除する</li></ul><div class="img-bg-transparent"><p><img src="'+o+'" alt="release branch"></p></div><h3 id="hotfixブランチ" tabindex="-1">hotfixブランチ <a class="header-anchor" href="#hotfixブランチ" aria-label="Permalink to &quot;hotfixブランチ&quot;">​</a></h3><p>本番リリースに対して迅速にパッチを当てて修正する場合に使用するブランチで、主な特徴は以下である。</p><ul><li>修正が完了するとmainとdevelopの両方(あるいは進行中のreleaseブランチ)にマージされる</li><li>main／developブランチがあると必要になる可能性がある。main／featureブランチのみの運用では必須ではない（管理上の目的でfeatureとhotfixを分けることはあり得る）</li></ul><div class="img-bg-transparent"><p><img src="'+h+'" alt="hotfix branch"></p></div><h3 id="topicブランチ" tabindex="-1">topicブランチ <a class="header-anchor" href="#topicブランチ" aria-label="Permalink to &quot;topicブランチ&quot;">​</a></h3><p>featureブランチで実現する機能を複数人で開発する場合に使用するブランチである。</p><ul><li>topicブランチが必要なケースでは、featureブランチへの直接プッシュを行ってはならない</li><li>GitHub Flowではfeatureブランチのことをtopicブランチと呼称する場合があるが、本規約ではfeatureブランチから派生するブランチをtopicブランチと定義する</li></ul><div class="img-bg-transparent"><p><img src="'+c+'" alt="topic branch"></p></div><h2 id="ブランチ戦略の選定" tabindex="-1">ブランチ戦略の選定 <a class="header-anchor" href="#ブランチ戦略の選定" aria-label="Permalink to &quot;ブランチ戦略の選定&quot;">​</a></h2><p>ブランチ戦略は以下の方針で選定する。</p><ul><li>できるかぎりシンプルなモデルを選択し、運用コストを下げる</li><li>プロジェクトのフェーズや体制に応じて、変更を許容する</li></ul><p>有名なブランチ戦略として以下がある。</p><ul><li><a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noreferrer">git-flow</a></li><li><a href="https://docs.github.com/ja/get-started/using-github/github-flow" target="_blank" rel="noreferrer">GitHub flow</a></li><li><a href="https://docs.gitlab.co.jp/ee/topics/gitlab_flow.html" target="_blank" rel="noreferrer">GitLab Flow</a></li></ul><p>本規約で推奨するブランチ戦略は次の2パターンであり、これをベースとして選択する。</p><table tabindex="0"><thead><tr><th>名称</th><th>利用ブランチ</th><th>デフォルトブランチ</th><th>リリース作業ブランチ</th><th>備考</th></tr></thead><tbody><tr><td>Lite GitLab Flow<br>※1</td><td><code>main</code><br><code>develop</code><br><code>feature</code><br><code>topic</code><br> <code>hotfix</code></td><td><code>develop</code></td><td><code>develop</code></td><td>・GitLab Flowからreleaseブランチを除いたパターン<br>・リリース作業時にdevelopマージを止められる場合に利用する</td></tr><tr><td>GitLab Flow</td><td><code>main</code><br><code>develop</code><br><code>release</code> <br><code>feature</code><br><code>topic</code> <br> <code>hotfix</code><br>※2</td><td><code>develop</code></td><td><code>release</code></td><td>・リリース作業と開発作業が並行して行う必要があるか、<br>断面を指定して複数テスト環境にデプロイしたい場合に利用する</td></tr></tbody></table><ul><li>※1: 特定の呼称はないためLite GitLab Flowと命名する</li><li>※2: 本規約では、本来のGitLab Flowの呼称である <code>production</code>を<code>main</code>、<code>pre production</code>を<code>release</code>に言い換えている</li></ul><h2 id="ブランチ戦略とデプロイメント環境" tabindex="-1">ブランチ戦略とデプロイメント環境 <a class="header-anchor" href="#ブランチ戦略とデプロイメント環境" aria-label="Permalink to &quot;ブランチ戦略とデプロイメント環境&quot;">​</a></h2><p>各ブランチ戦略ごとに、デプロイメント環境に対応するブランチを整理する。プロダクション環境リリース前には、mainブランチでタグを打つこととする。</p><table tabindex="0"><thead><tr><th>名称</th><th>開発環境</th><th>ステージング環境</th><th>プロダクション環境</th><th>備考</th></tr></thead><tbody><tr><td>Lite GitLab Flow</td><td>develop</td><td>develop</td><td>main</td><td>・開発環境へはdevelopマージをトリガーにCI/CDでデプロイを推奨する<br>・開発環境へのデプロイ漏れを防ぐため定期的にCI/CDでdevelop断面をリリースすることを推奨する<br>・動作確認など理由がある場合はfeatureブランチから直接開発環境へのデプロイも許容する<br>・ステージング環境は日次など定期的なCI/CDによるデプロイを推奨する</td></tr><tr><td>GitLab Flow</td><td>develop</td><td>release</td><td>main</td><td>・開発環境へはdevelopマージをトリガーにCI/CDでデプロイを推奨する<br>・検証期間が長引きそうな場合は、PRレビュー承認後にfeatureブランチから開発環境へのデプロイを許容する</td></tr></tbody></table><h2 id="ブランチ戦略の拡張" tabindex="-1">ブランチ戦略の拡張 <a class="header-anchor" href="#ブランチ戦略の拡張" aria-label="Permalink to &quot;ブランチ戦略の拡張&quot;">​</a></h2><p>次のような要件があった場合には、ベースとなるブランチ戦略を拡張する必要がある。</p><ol><li>developブランチを複数作成する場合</li><li>過去バージョンをサポートする場合</li></ol><h3 id="developブランチを複数作成する場合" tabindex="-1">developブランチを複数作成する場合 <a class="header-anchor" href="#developブランチを複数作成する場合" aria-label="Permalink to &quot;developブランチを複数作成する場合&quot;">​</a></h3><div class="img-bg-transparent"><p><img src="'+u+'" alt="multi develop branch"></p></div><p>日々のエンハンス開発と並行して、数カ月後に大型リリースを行いたい場合がある。このときは複数リリースバージョンを並行して開発するため、 <code>develop</code>、<code>develop2</code> といった複数のdevelopブランチを作る必要がある。</p><p>概要:</p><ul><li><code>develop</code> の変更にはバグフィックスや軽微なUI向上が含まれ、日次／週次などの頻度でプロダクション環境へリリースされる</li><li><code>develop2</code> は<code>develop</code> ブランチの変更をすべて取り込んだ上で、大型機能の準備を行う必要がある</li></ul><p><code>develop2</code> 同期の注意点:</p><ul><li>リベースすると <code>develop2</code> を元にfeatureブランチを作成して開発している開発者が混乱することになるため、マージコミットを用いる</li><li>誤操作を避ける目的でcherry-pickは行わない</li><li><code>develop2</code> への同期は、 <code>develop</code> -&gt; <code>main</code> ブランチに反映されるタイミングで同期を行う（これにより、品質保証済みの変更のみ取り入れることができる）</li></ul><div class="img-bg-transparent"><p><img src="'+g+'" alt="release multi develop branch"></p></div><h4 id="develop2のリリース手順" tabindex="-1">develop2のリリース手順 <a class="header-anchor" href="#develop2のリリース手順" aria-label="Permalink to &quot;develop2のリリース手順&quot;">​</a></h4><ol><li><code>develop</code>から<code>develop2</code>へマージコミットする（2でコンフリクトが起こらないよう、前準備の意味合いで実施する。）</li><li><code>develop2</code>から<code>develop</code>にマージを行い、その後は通常のリリースフローに従う</li><li>問題なくリリースが完了し次第、<code>develop2</code>を削除する</li></ol><p><code>develop</code>から<code>develop2</code>へマージ後、<code>develop2</code>を<code>main</code>ブランチに反映させる手順も考えられるが、<code>develop2</code>から<code>develop</code>へのマージとすると以下のメリットがある。</p><ul><li>プロダクション環境（=<code>develop</code>）との差分を把握することができる</li><li>より一般的な名称である <code>develop</code> ブランチのみ残るため、新規参画者フレンドリーである</li></ul><h3 id="過去バージョンをサポートする場合" tabindex="-1">過去バージョンをサポートする場合 <a class="header-anchor" href="#過去バージョンをサポートする場合" aria-label="Permalink to &quot;過去バージョンをサポートする場合&quot;">​</a></h3><div class="img-bg-transparent"><p><img src="'+b+'" alt="multi version branch"></p></div><p>（社内外の）ライブラリでインターフェースの大型改善や仕様変更を受けて、メジャーバージョンを1→2に上げることがある。この時に過去バージョンもサポートする必要があると、バージョン別にsupportブランチを作成する。</p><p>概要:</p><ul><li>メインの更新はversion2（mainブランチ）に対して行っていくが、version1の利用ユーザーが存在する場合、バグfixやセキュリティアップデートを並行して行う <ul><li>version1を示すブランチ（<code>support/v1</code>）を別途作成、そのブランチからfeatureブランチを作成する</li></ul></li><li>featureブランチのマージ後、マイナーバージョン（あるいはパッチバージョン）を上げたタグをコミットし、リリースする <ul><li>※この例ではversion1とversion2が別リソースとして動いていることを前提としている。同一リソースで複数バージョンが稼働する場合はversion2のブランチで対応を行う必要がある。</li></ul></li></ul><h2 id="マージ戦略の選定" tabindex="-1">マージ戦略の選定 <a class="header-anchor" href="#マージ戦略の選定" aria-label="Permalink to &quot;マージ戦略の選定&quot;">​</a></h2><p>マージ戦略とは、複数のブランチ間で生じた変更の取り込み方針を指す。</p><p>具体的には次の3ケースそれぞれで、「マージコミット」 「リベース」 「スカッシュマージ」のどれを採用するか判断する。</p><ol><li>developブランチからfeatureブランチへ変更を取り込む</li><li>featureブランチからdevelopブランチへ変更を取り込む</li><li>永続ブランチ間で変更を取り込む</li></ol><p>以下に影響を与えるため、Gitの利用開始前に決めチームで統制を図ることが重要である。</p><ul><li>プロジェクトのコミット履歴の管理</li><li>開発プロセスの円滑な進行</li><li>最終的なソフトウェア品質</li></ul><h3 id="developブランチからfeatureブランチへ変更を取り込む" tabindex="-1">developブランチからfeatureブランチへ変更を取り込む <a class="header-anchor" href="#developブランチからfeatureブランチへ変更を取り込む" aria-label="Permalink to &quot;developブランチからfeatureブランチへ変更を取り込む&quot;">​</a></h3><p>featureブランチでの作業中に、developブランチが更新された場合、品質保証の観点でdevelopブランチの変更をfeatureブランチに取り込んだ上で、テストなどの検証作業を行う必要がある。</p><p>developブランチの変更をfeatureブランチに取り込む方法には、下表の2つの方法が存在する。</p><p>機能ブランチに対して開発ブランチの変更を取り込む方法は「マージ」 「リベース」2つの方法が考えられる。スカッシュマージはこのケースでは選択できない。</p><table tabindex="0"><thead><tr><th>1. マージコミット</th><th>2. リベース</th></tr></thead><tbody><tr><td><div class="img-bg-transparent"><img src="'+k+'" alt="マージ"></div></td><td><div class="img-bg-transparent"><img src="'+m+'" alt="リベース"></div></td></tr><tr><td><code>git fetch &amp; git merge</code>（≒ <code>git pull</code>）。マージコミットが作成される</td><td><code>git fetch &amp; git rebase</code>（≒ <code>git pull --rebase</code>）。最新の開発ブランチの先頭から新たにコミットを作り直され、マージコミットは作成されない</td></tr></tbody></table><p>本規約の推奨は「1. マージコミット」である。</p><p>理由は次の通り。</p><ul><li>リベース方式で設定すべき <code>rerere.enabled</code> オプションを有効にしても、1度解消したコンフリクトの再対応をゼロにすることはできないため</li><li>マージコミットが作成され履歴が複雑になるが、1度解消したコンフリクトの再対応がゼロにできる点を優先する</li></ul><div class="tip custom-block"><p class="custom-block-title">リベース方式を採用する場合</p><p>もし、リベース方式を採用する場合は、以下の設定を行う。</p><ol><li><code>git pull</code> 時の挙動がリベースになるよう <code>git config pull.rebase true</code> を実行する</li><li>developブランチの変更を取り込む場合、同じコンフリクトの解消を何度も求められることを解消するため、<code>git config rerere.enabled true</code> を実行する</li></ol><p>マージによる変更の取り込みが既存のブランチを変更しないのに対し、リベースは全く新しい（元のコミットIDとは別のコミットIDで）コミットを作成するため、次の1点に注意すること。</p><ol><li>リモートにプッシュ済のブランチがあり、developブランチからさらに変更をリベースで取り込んだ場合、強制プッシュ（Force Push）が必要になる <ul><li><code>git push origin HEAD --force-with-lease --force-if-includes</code> とすることで、意図せずリモートブランチの変更を上書きしないようにする <ul><li><code>--force-with-lease</code>: ローカルのリモート追跡ブランチの ref とリモートの ref を比較し、ローカルの状態が最新でない場合（プッシュ先のリモートブランチに変更が入ったが、ローカルで <code>git fetch</code> していない場合）は、プッシュに失敗する。逆にいうと、プッシュ前に <code>git fetch</code> を実行済みの場合は、リモートの変更を上書きする形で強制プッシュができてしまうため、これを防ぐには <code>--force-if-includes</code> フラグを併用する</li><li><code>--force-if-includes</code>: リモート追跡ブランチの変更がローカルに全て取り込まれていない場合は、プッシュに失敗する。これにより意図せず他の人のコミットを上書きすることを防ぎつつ、必要な変更を強制的にプッシュすることができる</li></ul></li></ul></li></ol></div><div class="tip custom-block"><p class="custom-block-title">強制プッシュでレビューコメントは消えるのか？</p><p>強制プッシュすることにより、レビューコメントが消えてしまわないかという懸念を聞くことがある。2024年7月に実施した調査結果では問題なかった。特にリベース方式では重要である。</p><ul><li>a.履歴保持: 強制プッシュを行い、GitHub投稿したレビューコメントが履歴として何かしらのページで取得できるかどうか。GitHubではConversationタブで確認</li><li>b.行単位の紐づけ（該当行の変更なし）: レビューコメントが付けられた行とは別の変更を行い、強制プッシュしたときにレビューコメントの紐づけが残るかどうか。GitHubではFile changedタブで確認</li><li>c.行単位の紐づけ（該当行の変更あり）: レビューコメントで付けられた行を修正し、強制プッシュ時の挙動。レビュー対応をしたとみなしレビューコメントのひも付きは解除されているべきである。GitHubではFile changedタブで確認</li></ul><table tabindex="0"><thead><tr><th>サービス</th><th>a.履歴保持</th><th>b.行単位の紐づけ（該当行の変更なし）</th><th>c.行単位の紐づけ（該当行の変更あり）</th></tr></thead><tbody><tr><td>GitHub</td><td>残る</td><td>残る</td><td>消える</td></tr><tr><td>GitLab</td><td>残る</td><td>残る</td><td>消える</td></tr></tbody></table></div><h4 id="プルリクエスト作成前にアップストリームをプルする" tabindex="-1">プルリクエスト作成前にアップストリームをプルする <a class="header-anchor" href="#プルリクエスト作成前にアップストリームをプルする" aria-label="Permalink to &quot;プルリクエスト作成前にアップストリームをプルする&quot;">​</a></h4><p>featureブランチの開発が終わり、プルリクエストを作成する際には、改めてアップストリーム（developブランチ）の変更をfeatureブランチに取り込み、差分が無いことを確認すべきである。</p><p>理由は次の通り。</p><ul><li>レビュアーの負荷軽減のため <ul><li>レビュアーがプルリクエストの差分以外の部分を参照した際に、それが古いバージョンであると、誤指摘、混乱してしまうなどの懸念がある</li></ul></li><li>マージ後のdevelopブランチでテスト失敗するリスクを減らすため <ul><li>コンフリクトせずにマージ可能だったとしても、何かしらの依存関係や整合性が狂い、マージ後のテストが失敗する可能性がある</li></ul></li></ul><h4 id="プルリクエストのレビュー依頼までにどこまでテストしておくべきか" tabindex="-1">プルリクエストのレビュー依頼までにどこまでテストしておくべきか <a class="header-anchor" href="#プルリクエストのレビュー依頼までにどこまでテストしておくべきか" aria-label="Permalink to &quot;プルリクエストのレビュー依頼までにどこまでテストしておくべきか&quot;">​</a></h4><p>本規約で推奨する <code>Lite GitLab Flow</code> <code>GitLab Flow</code> ともに、開発環境へはdevelopマージをトリガーにCI/CDでデプロイを推奨している。</p><p>そのため、プルリクエスト作成時点では開発環境（≒AWSなどクラウド環境の想定）へのデプロイ＋動作検証は不要である。</p><p>ローカルでの開発のみで品質担保が難しく手戻りが多い場合は、サンドボックス環境や開発環境にfeatureブランチからデプロイして動作検証する作業が必要になる。開発環境を共有する場合は、デプロイタイミングの制御がチーム内で必要になるため、運用ルールを検討する必要がある。</p><h4 id="terraformはレビュー依頼時点でどこまで確認しておくべきか" tabindex="-1">Terraformはレビュー依頼時点でどこまで確認しておくべきか <a class="header-anchor" href="#terraformはレビュー依頼時点でどこまで確認しておくべきか" aria-label="Permalink to &quot;Terraformはレビュー依頼時点でどこまで確認しておくべきか&quot;">​</a></h4><p>Terraformはplanが成功しても、applyが失敗することは多々あり（サブネットが足りなかった、force_destroy=trueを明示的な設定が必要だったなど）、レビューでの見極めは難しいことが多い。そのため、applyをどのタイミングで実施するかがチームの生産性の鍵となる。</p><p>大別すると以下の3方式が存在する</p><ol><li>マージ後にapply <ul><li>PR -&gt; CI（planを含む） -&gt; レビュー -&gt; developマージ -&gt; apply(CI)</li></ul></li><li>Approve後にapply <ul><li>PR -&gt; CI（planを含む） -&gt; レビュー -&gt; apply -&gt; developマージ -&gt; apply(CI)</li></ul></li><li>レビュー依頼前にapply <ul><li>apply -&gt; PR -&gt; CI(plan含む) -&gt; レビュー -&gt; developマージ -&gt; apply(CI)</li></ul></li></ol><p>それぞれの特徴を下表にまとめる。</p><table tabindex="0"><thead><tr><th>観点</th><th>①マージ後にapply</th><th>②Approve後にapply</th><th>③レビュー依頼前にapply</th></tr></thead><tbody><tr><td>説明</td><td>developブランチにマージ後にapply。アプリコードと同じメンタルモデルを共有可能</td><td>レビュアー承認後にapply。featureブランチからapplyするため、あるべき姿からは外れる</td><td>レビュー依頼前にapplyで成功したことを確認する方式</td></tr><tr><td>developブランチ品質</td><td>❌️一時的にapplyが失敗するコードが混入するリスク</td><td>✅️apply可能なコードのみに保つことができる</td><td>✅️apply可能なコードのみに保つことができる</td></tr><tr><td>レビュー負荷</td><td>❌️applyの成否は不明なので心理的負荷あり</td><td>❌️applyの成否は不明なので心理的負荷あり</td><td>✅️applyが成功している前提で対応可能。apply結果をコンソールからも確認可能</td></tr><tr><td>apply失敗時のコスト</td><td>❌️再度PRを作る必要があり手間</td><td>✅️同一PRを流用できる</td><td>✅️apply成功後にPR作成が可能</td></tr><tr><td>PRのトレーサビリティ</td><td>❌️PRが割れると面倒</td><td>✅️同一PRである</td><td>✅️同一PRである</td></tr><tr><td>環境のバッティング</td><td>✅️ない</td><td>⚠️Approveからdevelopマージまでの間に、他メンバーの作業と重複するとややこしい</td><td>❌️作業調整が必要</td></tr><tr><td>ガバナンス</td><td>✅️applyをCIのみに絞るなど自動化と相性が良い</td><td>⚠️レビュアー承認後のコードのみapply対象とできる</td><td>❌️ノーレビューのインフラ変更を適用するため、初学者が多いチームには適用が難しい</td></tr><tr><td>結論</td><td>applyの成功率が高く維持できる場合に有効</td><td>applyの成功率が低い場合に有効</td><td>少数精鋭の場合に採用可能な、上級者向けの方式</td></tr></tbody></table><p>本規約の推奨は以下。</p><ul><li>新規参画者が多く統制を取りたい場合や、applyの成功率が高く維持できる場合は①を選択</li><li>ある程度インフラメンバーが絞れ、かつapplyの失敗率が高くレビュー負荷が高くなってしまう懸念がある場合は②を選択</li><li>インフラメンバーが少数精鋭（通常、同時の作業はほぼ発生しない）の場合は必要に応じて、②をベースにしながら③を取り入れて生産性を上げる</li></ul><h3 id="featureブランチからdevelopブランチへ変更を取り込む" tabindex="-1">featureブランチからdevelopブランチへ変更を取り込む <a class="header-anchor" href="#featureブランチからdevelopブランチへ変更を取り込む" aria-label="Permalink to &quot;featureブランチからdevelopブランチへ変更を取り込む&quot;">​</a></h3><p>プルリクエスト（以下、PR）を経由して、開発が完了したfeatureブランチをメインのdevelopブランチに取り込むためには、GitHub（GitLab）上でPRを経由する運用を行う。</p><p>developブランチにfeatureブランチの変更を取り込む方法は下表のように3パターン存在する。</p><table tabindex="0"><thead><tr><th></th><th>1.マージコミット</th><th>2.リベース</th><th>3.スカッシュマージ</th></tr></thead><tbody><tr><td>名称</td><td>Create a merge commit</td><td>Rebase and merge</td><td>Squash and merge</td></tr><tr><td>流れ</td><td><div class="img-bg-transparent"><img src="'+F+'" alt="Merge Commit"></div></td><td><div class="img-bg-transparent"><img src="'+f+'" alt="Rebase and Merge"></div></td><td><div class="img-bg-transparent"><img src="'+y+'" alt="Squash and Merge"></div></td></tr><tr><td>説明</td><td><code>git merge --no-ff</code> で変更を取り込む</td><td>featureブランチを最新のdevelopブランチにリベースし、<code>git merge --ff</code> で変更を取り込む</td><td><code>git merge --squash</code> で変更を取り込む</td></tr><tr><td>特徴</td><td>developブランチにマージコミットが作成される</td><td>マージコミットは作成されず、履歴が一直線になる</td><td>featureブランチで行った変更YとZを1つにまとめたコミットがdevelopブランチに作成される</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">GitLabを利用する場合</p><p>GitLabでも開発ブランチに機能ブランチの変更を取り込む方法は3種類ある。</p><p>ただし、マージリクエスト上のオプションによってコミット履歴が変わる点が注意である。</p><table tabindex="0"><thead><tr><th></th><th>1. Merge commit</th><th>2. Merge commit with semi-linear history</th><th>3. Fast-forward merge</th></tr></thead><tbody><tr><td>流れ</td><td><div class="img-bg-transparent"><img src="'+v+'" alt="Merge commit with squash commits"></div></td><td>省略</td><td>省略</td></tr><tr><td>説明</td><td>GitHubにおける <code>Create a merge commit</code> と同様のマージ方法</td><td><code>Merge commit</code> と同じコマンドを使用して、機能ブランチの変更を取り込む方法</td><td>GitHubにおける <code>Rebase and merge</code> と同様のマージ方法</td></tr><tr><td>注意</td><td><code>Squash commits</code> を選択してマージした場合、<code>squash commit</code> と <code>merge commit</code> の2つのコミットが作成される</td><td>ソースブランチがターゲットブランチより古い場合はリベースしないとマージできない。</td><td>マージリクエスト上で <code>Squash commits</code> を選択してマージした場合、GitHubにおける <code>Squash and merge</code> と同様のマージ方法になる（※補足1）</td></tr></tbody></table><p>（※補足1）マージ方法で Merge commit を選択して、マージリクエスト上で Squash commits オプションを選択してマージした場合は以下と同義である</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge-base feature/A develop`</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --squash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature/A</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SOURCE_SHA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rev-parse HEAD`</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> develop</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-ff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $SOURCE_SHA</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><p>本規約の推奨は、「スカッシュマージ」による方法である。</p><p>理由は次の通り。</p><ul><li>featureブランチのコミットログが、汚れることは許容したいため</li><li>developブランチの履歴をクリーンに保てるため</li><li>PRをよりシンプルに保つインセンティブとしたいため（単一のコミットメッセージで表現できる程度の方がレビューコストも小さいため）</li></ul><p>「スカッシュマージ」を行うと、変更元のfeatureブランチのコミットをまとめたコミットが新たに作成されるため、元のfeatureブランチを再利用しPRを作成するとコンフリクトが発生する。そのためマージ後はリモート/ローカルの双方で速やかにfeatureブランチを削除させるため、以下の設定を加える。</p><ul><li>マージ後にfeatureブランチを自動削除する設定 <ul><li>リモート側: GitHubでは「Automatically delete head branches」を選択することで、マージ後に自動でブランチの削除が行われる（GitLabではプロジェクト設定で「Enable &quot;Delete source branch&quot; option by default」を選択する）</li><li>ローカル側: <code>git config --global fetch.prune true</code>: リモート側で削除されたブランチをローカル側でも削除する</li></ul></li></ul><p>「スカッシュマージ」による変更の取り込みを行う場合、次の2点に注意すること。</p><ol><li>部分的なコミットの取り消しができない <ul><li>履歴上は1つのコミットになるため、マージ後に一部の変更だけの取り消しが不可能。そのためPRをなるべく小さなまとまりにする</li></ul></li><li>Authorが失われる <ul><li>featureブランチにコミットを行った人がAuthorになるのではなく、「スカッシュマージ」を行った人がAuthorになる。OSS開発を行う場合など、厳密にコントリビューションを管理する必要がある場合は注意する</li><li>GitHubでは「スカッシュマージ」を行う場合、デフォルトでコミットメッセージに <code>co-authored-by</code> トレーラーが追加され、1つのコミットが複数の作成者に帰属するようにするようになっている<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。この記述は削除しないようにする</li></ul></li></ol><h4 id="マージはだれが行うべきか" tabindex="-1">マージはだれが行うべきか <a class="header-anchor" href="#マージはだれが行うべきか" aria-label="Permalink to &quot;マージはだれが行うべきか&quot;">​</a></h4><p>プルリクエストの承認（Approve）をもらった後、マージはレビュアー／レビュイーのどちらが行うべきか議論になる場合がある。</p><table tabindex="0"><thead><tr><th>観点</th><th>レビュアー派</th><th>レビュイー派</th></tr></thead><tbody><tr><td>説明</td><td>開発者の責務が、developブランチにマージするまでという役割分担の場合に有効</td><td>各開発者がその機能のリリースについて責任を負うモデルの場合に有効</td></tr><tr><td>生産性</td><td>⚠️レビュアーがブロッキングになりがち</td><td>✅️高い。コメントはあるがApproveしたので、適時対応してマージして、といった運用が可能</td></tr><tr><td>統制</td><td>✅️レビュアーが管理しやすい</td><td>✅️メンバーの自主性に依存</td></tr><tr><td>要求スキル</td><td>✅️低い。中央で統制を行いやすい</td><td>⚠️開発メンバーの練度が求められる</td></tr></tbody></table><p>上記にあるように、そのプルリクエストで実装した機能を、本番環境にデリバリーする責務をどちらに持たせるかという観点で、意思決定することが多い。</p><p>本規約の推奨は以下。</p><ul><li>プロダクトオーナー（業務側）などでリリースタイミングを完全にコントロールしたいといった分業制を取る場合は、レビュアーがマージする</li><li>各開発者により自律性を持たせ、アジャイル的に生産性を重視するのであれば、レビュイーがマージする</li></ul><h3 id="永続ブランチ間で変更を取り込む" tabindex="-1">永続ブランチ間で変更を取り込む <a class="header-anchor" href="#永続ブランチ間で変更を取り込む" aria-label="Permalink to &quot;永続ブランチ間で変更を取り込む&quot;">​</a></h3><p>永続ブランチ同士の変更を取り込むケースとして、<code>develop</code> ブランチを <code>main</code> ブランチや <code>release</code>ブランチにマージするといった場合がある。</p><p>ブランチ間の同期が取れないため「リベース」「スカッシュマージ」は選択できないため、「マージコミット」を採用する。</p><h2 id="ブランチ運用アンチパターン" tabindex="-1">ブランチ運用アンチパターン <a class="header-anchor" href="#ブランチ運用アンチパターン" aria-label="Permalink to &quot;ブランチ運用アンチパターン&quot;">​</a></h2><p>ブランチ運用でよく課題に上がるパターンとその対応を紹介する。</p><h3 id="追い抜きリリース" tabindex="-1">追い抜きリリース <a class="header-anchor" href="#追い抜きリリース" aria-label="Permalink to &quot;追い抜きリリース&quot;">​</a></h3><p>以下のような状況とする。</p><ul><li>2つのチケット（issue-312、issue-394とする）があり、どちらも同じファイルの修正を含む</li><li>先にissue-312がdevelopにマージされ、その後に着手されたissue-394がマージされた</li><li>以下のような条件があるため、issue-394分を先にリリースしたい <ul><li>issue-312のリリースは業務上の合意が得られていない（エンドユーザ操作に影響があるため、事前告知した日時でリリースしたいなど）</li><li>issue-394は不具合修正であり業務上の優先度が高いため、なるべく早くリリースしたい</li></ul></li></ul><div class="img-bg-transparent"><p><img src="'+C+'" alt="同一ファイルを複数"></p></div><p>よく陥りがちな対策としては次の2点が考えられる。</p><ol><li>issue-312をリバートする</li><li>issue-394のコミットのみをcherry pick してmainブランチにマージする</li></ol><p>1のリバートはGitHubの機能で提供されていることもあり簡単に行えるが、手戻りであることは間違いないし、コミットの履歴が汚れるため、保守運用の視点ではマイナスである。2のcherry pickは操作、管理ともに煩雑でミスが出やすいという課題がある。</p><p>処方箋だが、前提条件によって別の対応策が考えられる。</p><ol><li>issue-312のマージがおかしいとするケース <ul><li>本来想定していたリリーススケジュールから見て、issue-312がdevelopにマージされている状態が正しくないのであれば、issue-312はdevelopにマージせず待機しておくべきだった</li><li>誤ってissue-312をマージしてしまったことが原因であれば、リバートを行うことが正しい</li></ul></li><li>issue-394のマージがおかしいとするケース <ul><li>本来想定していたリリーススケジュールを破って、issue-394を優先してリリースしたいというのであれば、<code>feature</code> ではなく <code>hotfix</code> ブランチで対応すべきであった</li></ul></li></ol><p>2の例を以下に図示する</p><div class="img-bg-transparent"><p><img src="'+_+'" alt="hotfixで追い抜き"></p></div><h2 id="ブランチ命名規則" tabindex="-1">ブランチ命名規則 <a class="header-anchor" href="#ブランチ命名規則" aria-label="Permalink to &quot;ブランチ命名規則&quot;">​</a></h2><p>ブランチ名の命名規則は、<a href="#ブランチの種類">ブランチの種類</a> 章に従うこと。</p><h2 id="タグ規則" tabindex="-1">タグ規則 <a class="header-anchor" href="#タグ規則" aria-label="Permalink to &quot;タグ規則&quot;">​</a></h2><p>Gitには<a href="https://git-scm.com/book/ja/v2/Git-%e3%81%ae%e5%9f%ba%e6%9c%ac-%e3%82%bf%e3%82%b0" target="_blank" rel="noreferrer">タグ</a>機能があり、リリースポイントとしてタグを作成する運用とする。</p><p>これにより、リリースしたアプリケーションやライブラリに何か不具合があれば、切り戻しや原因追求が容易になる利点がある。</p><h3 id="タグの運用ルール" tabindex="-1">タグの運用ルール <a class="header-anchor" href="#タグの運用ルール" aria-label="Permalink to &quot;タグの運用ルール&quot;">​</a></h3><ul><li>リリースごとに新しいバージョンを示したタグを発行する</li><li>(推奨) GitHubなどの画面経由でタグを作成する</li><li>mainブランチにてタグを作成する</li><li>入力間違えなどのケースを除き、一度タグをつけた後は削除しない</li><li>後述する「タグの命名規則」に従う</li></ul><p><img src="'+B+`" alt="GitHub画面でbackend/v1.6.0のタグを作成する"></p><p>何かしらの理由で、コマンドラインからタグを作成する必要がある場合は、以下に注意する。画面経由・コマンドライン経由でのタグ作成は混ぜないようにし、運用手順は統一する。</p><ul><li>軽量 (lightweight) 版ではなく、注釈付き (annotated) 版のタグを利用する</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># OK（注釈付きタグを利用する）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;v1.0.4&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;v1.0.4 🐛Fix item api log&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># NG（軽量タグは利用しない）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;v1.0.4&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">タグが迷子になる？</p><p>タグはmainなど永続ブランチで作成する必要がある。例えばfeatureブランチでタグを作成し、<code>git push origin {tag_name}</code> でリモートにプッシュしたとしても、<code>rebase</code> でその紐付けが消えてしまう。なぜなら、タグはコミットのハッシュに付与されるラベルであり、<code>rebase</code> でコミットのハッシュが変わると、どのコミットに対するタグなのか分からなくなってしまうからである。</p></div><h3 id="タグの命名規則" tabindex="-1">タグの命名規則 <a class="header-anchor" href="#タグの命名規則" aria-label="Permalink to &quot;タグの命名規則&quot;">​</a></h3><ul><li><code>v1.2.4</code> などの <a href="https://semver.org/lang/ja/" target="_blank" rel="noreferrer">セマンティックバージョニング</a> を基本とする</li><li>モノリポの場合は <code>frontend/v1.0.0</code>、<code>backend/v2.0.1</code> など領域ごとにプレフィックスを付与する形式を取る <ul><li>プレフィックスにすることで、タグをリスト表示した場合に視認性を上げることができる</li></ul></li></ul><p>命名に従うと、次のようなコマンドで絞り込みで表示できる。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sort=-version:refname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;frontend/v*&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frontend/v2.0.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frontend/v1.3.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frontend/v1.2.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frontend/v1.1.0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>また、Gitクライアントによっては <code>/</code> を使うことでフォルダのように階層表示ができるため、プレフィックスの区切り文字は <code>-</code> ハイフンではなく、スラッシュとする。</p><h3 id="タグメッセージの規則" tabindex="-1">タグメッセージの規則 <a class="header-anchor" href="#タグメッセージの規則" aria-label="Permalink to &quot;タグメッセージの規則&quot;">​</a></h3><ul><li>(推奨) GitHubを利用中の場合、「<a href="https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes" target="_blank" rel="noreferrer">Generate release notes</a>」を用いて、タイトルや本文を自動生成する</li><li>フロントエンド・バックエンドで整合性を保っているのであれば、メモ目的でバージョンを記載する運用を推奨とする</li><li>実用的な利用用途が思いつかない場合は、開発者視点での楽しみリリースの大きなマイルストーンの名称など、チームの関心事を記入することを推奨とする</li></ul><p><img src="`+q+`" alt="create new tag"></p><p>何かしらの理由で、コマンドラインからタグを作成する必要がある場合は、GitHub利用時の規則に合わせて次のように作成する。</p><p>入力例:</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> backend/v1.8.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;backend/v1.8.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> backend/v1.9.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;backend/v1.9.0 🚀Release with frontend-v3.0.1&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> backend/v2.0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;backend/v2.0.0 ✨Android版アプリリリース対応&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># NG</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> backend/v3.0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;🚀Release version v2.0.0&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="バージョンアップ規則" tabindex="-1">バージョンアップ規則 <a class="header-anchor" href="#バージョンアップ規則" aria-label="Permalink to &quot;バージョンアップ規則&quot;">​</a></h3><ul><li>開発しているプロダクトがライブラリの場合、セマンティックバージョニングに厳密に従う</li><li>開発しているプロダクトがシステム（アプリケーション）の場合、その成熟度や初回リリースの区切りでバージョンアップを行うことを推奨する。適切なバージョンアップを行うことで視認性が上がり、運用負荷を下げることができる <ul><li>例1: 初回リリース、カットオーバーで <code>v1.0.0</code> に上げる</li><li>例2: 稼働後1年以上経過し、中規模以上の大きな機能アップデートがあったので、 <code>v2.0.0</code> に上げる</li></ul></li></ul><h2 id="ラベル規則" tabindex="-1">ラベル規則 <a class="header-anchor" href="#ラベル規則" aria-label="Permalink to &quot;ラベル規則&quot;">​</a></h2><p>IssueやPRを分類することができるラベルについての利用は自由とする。</p><p>PRに適切なラベルを設定し、 <a href="https://docs.github.com/ja/repositories/releasing-projects-on-github/automatically-generated-release-notes" target="_blank" rel="noreferrer">自動生成リリースノート - GitHub Docs</a> に記載があるように <code>.github/release.yml</code> への設定を行うことで、リリースノートの生成をラベル単位にグルーピングできる。</p><p>PRを後で探しやすくするための検索キーとしての位置づけと、リリースノート自動生成という観点でラベルを準備すること。</p><h2 id="コミットメッセージ規則" tabindex="-1">コミットメッセージ規則 <a class="header-anchor" href="#コミットメッセージ規則" aria-label="Permalink to &quot;コミットメッセージ規則&quot;">​</a></h2><p>Gitのコミットメッセージは原則自由とする。理由は以下である。</p><ul><li>通常、作業はチケット管理システムを駆動に開発するため、情報が重複する</li><li>リリースノートの自動生成での扱いは、どちらかといえばラベルとPRのタイトルが重要</li><li>メンバーによっては粒度の小さいコミットを好む場合も多く、運用の徹底化を図る負荷が高い</li></ul><p>チーム規模や特性によっては、Gitのコミットメッセージをルール化することによるメリットが見込まれる場合は、 <code>Conventional Commits</code> をベースとした以下の規約を推奨する。</p><div class="tip custom-block"><p class="custom-block-title">Conventional Commitsの勧め</p><p>Gitのコミットメッセージの書式についてルール化することで、コミットの目的がわかりやすくなる、履歴からのトラッキングの容易になる利点がある。</p><p>本規約のコミットメッセージの書式としては、<code>Conventional Commits</code>をベースとした規約としている。</p><p>以下の形式でコミットメッセージを記載することとする。</p><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;type&gt;: &lt;subject&gt; &lt;gitmoji&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>コミットメッセージは type、subject、gitmojiの最大3つの要素から構成され、それぞれは後述する書式に従うものとする。 この中でも、type、subjectについては必須とし、ほかの要素についてはプロジェクトの運用にしたがい任意とする。</p><h3 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h3><p>typeについては必須の要素となり、以下のいずれかを選択するものとする。</p><table tabindex="0"><thead><tr><th>type</th><th>説明</th></tr></thead><tbody><tr><td><code>feat</code></td><td>新機能の追加</td></tr><tr><td><code>fix</code></td><td>バグの修正</td></tr><tr><td><code>docs</code></td><td>ドキュメンテーションの更新</td></tr><tr><td><code>refactor</code></td><td>リファクタリング</td></tr></tbody></table><h3 id="subject" tabindex="-1">subject <a class="header-anchor" href="#subject" aria-label="Permalink to &quot;subject&quot;">​</a></h3><p>subjectについては必須の要素となり、変更内容を簡潔に記載するものとする。 issue idについては、PRから参照する運用を想定し、コミットメッセージの必須要素とはしないこととする。</p><h3 id="gitmoji" tabindex="-1">gitmoji <a class="header-anchor" href="#gitmoji" aria-label="Permalink to &quot;gitmoji&quot;">​</a></h3><p>gitmojiについては任意の要素となり、変更内容を視認しやすい絵文字の使用を可能とする。</p><p>変更内容と選択される絵文字の対応については厳密とせず、開発者が任意に選択するものとする。</p><p>type(feat, fix, docs, refactorなど)に基づく、選択例を以下に示す。</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> ==== Emojis ====</span></span>
<span class="line"><span> :ambulance:  🚑致命的なバグ修正(fix)</span></span>
<span class="line"><span> :bug:  🐛バグ修正(fix)</span></span>
<span class="line"><span> :+1: 👍機能改善・機能修正(fix)</span></span>
<span class="line"><span> :cop: 👮セキュリティ関連の修正(fix)</span></span>
<span class="line"><span> :art: 🎨レイアウト関連の修正(fix)</span></span>
<span class="line"><span> :green_heart: 💚テストやCIの修正・改善(fix)</span></span>
<span class="line"><span> :wrench: 🔧設定ファイルの修正(fix)</span></span>
<span class="line"><span> :building_construction: 🏗️アーキテクチャの変更(fix)</span></span>
<span class="line"><span> :tada: 🎉大きな機能追加(feat)</span></span>
<span class="line"><span> :sparkles: ✨部分的な機能追加(feat)</span></span>
<span class="line"><span> :up:   🆙依存パッケージ等のアップデート(feat)</span></span>
<span class="line"><span> :memo: 📝ドキュメント修正(docs)</span></span>
<span class="line"><span> :bulb: 💡ソースコードへのコメント追加や修正(docs)</span></span>
<span class="line"><span> :lipstick: 💄Lintエラーの修正やコードスタイルの修正(refactor)</span></span>
<span class="line"><span> :recycle: ♻️リファクタリング(refactor)</span></span>
<span class="line"><span> :fire: 🔥コードやファイルの削除(refactor)</span></span>
<span class="line"><span> :rocket: 🚀パフォーマンス改善(refactor)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="コミットメッセージ例" tabindex="-1">コミットメッセージ例 <a class="header-anchor" href="#コミットメッセージ例" aria-label="Permalink to &quot;コミットメッセージ例&quot;">​</a></h3><p>上記のルールに従った、コミットメッセージのサンプルは以下のようなものとなる。 以下のようなコミットをルールとすることで、変更内容を視覚的に把握しやすくなる利点がある。</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>feat: カレンダー機能の追加 🎉</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fix: メモリリークの修正 🚑</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docs: デプロイフローをドキュメント化 📝</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>refactor: Lintエラーの修正 💄</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div><h2 id="git-config推奨設定" tabindex="-1">git config推奨設定 <a class="header-anchor" href="#git-config推奨設定" aria-label="Permalink to &quot;git config推奨設定&quot;">​</a></h2><p><code>git config</code> の推奨設定を紹介する。特にGitワークフローの設定が重要である。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基礎</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your Name&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;your_email@example.com&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># プロキシ設定（存在する場合）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http.proxy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://id:password@proxy.example.co.jp:8000/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https.proxy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://id:password@proxy.example.co.jp:8000/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># プロキシが独自の証明書を持っている場合は、git config http.sslVerify false ではなく、証明書を設定する</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http.sslCAInfo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/custom_ca_sha2.cer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Gitワークフロー</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull.rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rerere.enabled</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch.prune</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># エイリアス（メンバーそれぞれで別のエイリアスを登録されると、チャットなどのトラブルシュート時に混乱をきすため、ベーシックなものはチームで統一して、認識齟齬を減らす目的で設定を推奨する）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alias.st</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alias.co</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alias.ci</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alias.br</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">git workflowの補足説明</p><ul><li><code>pull.rebase</code>: pull時にリベースする</li><li><code>rerere.enabled</code>: コンフリクトの解決を記録しておき、再び同様のコンフリクトが発生した場合に自動適用する</li><li><code>fetch.prune</code>: リモートリポジトリで削除されたブランチを削除する</li></ul></div><h2 id="クレデンシャル情報の混入防止" tabindex="-1">クレデンシャル情報の混入防止 <a class="header-anchor" href="#クレデンシャル情報の混入防止" aria-label="Permalink to &quot;クレデンシャル情報の混入防止&quot;">​</a></h2><h3 id="git-secrets" tabindex="-1">git-secrets <a class="header-anchor" href="#git-secrets" aria-label="Permalink to &quot;git-secrets&quot;">​</a></h3><p><a href="https://github.com/awslabs/git-secrets" target="_blank" rel="noreferrer">git-secrets</a>を用いることで、ユーザーパスワードや AWS アクセスキーなどの機密情報が含まれる可能性のあるコードなどをGit リポジトリに追加されないようにできる。</p><p>本規約の推奨と理由は以下。</p><ul><li>チームメンバー全員にgit-secretsを導入する <ul><li>Push Protection によってクレデンシャルのリモートへの Push は防げるが、ローカルにクレデンシャルを含むコミット履歴が残っていると復元される可能性がある。そこで、git-secrets を用いてコミット段階でクレデンシャルを拒否する設定を行っておく</li></ul></li></ul><h3 id="push-protection" tabindex="-1">Push Protection <a class="header-anchor" href="#push-protection" aria-label="Permalink to &quot;Push Protection&quot;">​</a></h3><p>Push Protectionを有効化することで、コードをプッシュする際にクレデンシャルが含まれていないかチェックする。 もしクレデンシャルが検知されると、プッシュが拒否されるようになる。 メンバー全員がgit-secretsを設定していれば不要であるが、設定漏れなどでプッシュされてしまうことを防ぐために、本規約では有効化しておくことを推奨する。</p><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://docs.gitlab.com/user/application_security/secret_detection/secret_push_protection/" target="_blank" rel="noreferrer">GitLab Docs | Secret push protection</a></li><li><a href="https://docs.github.com/ja/code-security/secret-scanning/introduction/about-push-protection" target="_blank" rel="noreferrer">GitHub | プッシュ保護について</a></li></ul></div><h3 id="secret-scanning" tabindex="-1">Secret Scanning <a class="header-anchor" href="#secret-scanning" aria-label="Permalink to &quot;Secret Scanning&quot;">​</a></h3><p>Secret Scanningを利用することで、Git リポジトリにクレデンシャルが存在するとメールなどでアラートを送ってくれるようにできる。 Secret Scanningではコードだけでなく、IssueやPull Requestなどもスキャンできるため、本規約では利用することを推奨する。</p><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://docs.github.com/ja/code-security/secret-scanning/introduction/about-secret-scanning" target="_blank" rel="noreferrer">GitHub | シークレットスキャンについて</a></li><li><a href="https://docs.gitlab.com/user/application_security/secret_detection/" target="_blank" rel="noreferrer">GitLab | Secret Detection</a></li></ul></div><h2 id="コミットフックでテスト実行は行わない" tabindex="-1">コミットフックでテスト実行は行わない <a class="header-anchor" href="#コミットフックでテスト実行は行わない" aria-label="Permalink to &quot;コミットフックでテスト実行は行わない&quot;">​</a></h2><p><a href="https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA-Git-%E3%83%95%E3%83%83%E3%82%AF" target="_blank" rel="noreferrer">git hooks</a> を用いて、コミットやプッシュ時に単体テスト実行などのカスタム処理を追加することができる。これを用いると、ローカルでの動作検証などを未実施な状態でレビュー依頼をしてしまうといった状況を未然に防ぎ、開発フローを強制的に適用することができる。</p><p>本規約の推奨と理由は以下。</p><ul><li>git hooksを用いたテスト実行は行わない <ul><li>gitのコマンドを実行するライフサイクルと、動作検証を行いたいライフサイクルは同じでないため、軽微な修正の度にテストが実行されると、作業効率が下がるため</li><li>CI側でテストが実行されるため、最悪CIで検知が可能</li><li>開発者にとって作業効率を考えると、CIで検知ではなくローカルでテスト実行を通してからプッシュするため、CIが整備されている前提ではgit hooksで強制する必然性がないため</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">git hooksで何を行うべきか</p><p>テスト、コード生成、リンターなど、実行時間が長いものは行うべきではない。</p><p>実行時間が短いフォーマットであれば、git hooksで実行させると便利なことが多く（CIで違反に気づいて対応する手戻りが減るためである）、必要に応じて導入しても良い。</p></div><h2 id="gitattributes" tabindex="-1">.gitattributes <a class="header-anchor" href="#gitattributes" aria-label="Permalink to &quot;.gitattributes&quot;">​</a></h2><h3 id="eol" tabindex="-1">eol <a class="header-anchor" href="#eol" aria-label="Permalink to &quot;eol&quot;">​</a></h3><p>チーム開発において開発環境がWindows/Macなど複数存在することは少なくなく、また、Gitリポジトリ上の改行コードは統一した方が余計な差分が生じず扱いやすくなる。このときよく用いるのが、 <code>core.autocrlf</code> という設定である。</p><table tabindex="0"><thead><tr><th>名称</th><th>設定値</th><th>チェックアウト時の挙動</th><th>コミット時の挙動</th></tr></thead><tbody><tr><td>core.autocrlf</td><td>true</td><td>改行コードをCRLFに変換</td><td>改行コードをLFに変換</td></tr><tr><td></td><td>input</td><td>何もしない</td><td>改行コードをLFに変換</td></tr><tr><td></td><td>false</td><td>何もしない</td><td>何もしない</td></tr></tbody></table><p>特にWindowsでの開発者の作業ミスを防ぐため、 <code>git config --global core.autocrlf input</code> のような設定を行うチームも多い。</p><p>しかし、上記の設定漏れや手順が増えてしまうため、本規約では <code>.gitattributes</code> での対応を推奨する。</p><p><code>.gitattributes</code> というファイルをGitリポジトリのルートにコミットしておけば、そのGitリポジトリを使う全員で改行コードの扱いをLFに統一できる。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通常、改行コードやインデントの設定は<a href="https://editorconfig.org/" target="_blank" rel="noreferrer">EditorConfig</a>で行うことが多く、 <code>.gitattributes</code> の設定とは重複する。しかし、環境構築ミスなど何らかのトラブルで動作しなかった場合に改行コードミスで特にジュニアクラスのメンバーが困る状況もゼロとは言えないため、本規約では <code>.gitattributes</code> も作成しておくことを推奨する。</p><div class="warning custom-block"><p class="custom-block-title">特定のファイルのみCRLFでコミットしたい</p><p>テスト目的であるファイルだけCRLFで読み込ませたいとする。さきほどの <code>.gitattributes</code> の設定ではチェックアウト時に強制的にLFに変換されてしまうため、CRLFのファイルのみ個別で改行コードを指定する必要がある。例えば、<code>testdata/eol</code>配下のCSVをCRLFで扱いたい場合は、以下となる。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 個別で指定</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testdata/eol/*.csv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eol=crlf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>前の行に書いた設定は、後ろの行に書いた設定によって上書きされるため、記載順は「全体に適用する原則」→「個別設定」となるように注意する。</p><p>この指定がちゃんと効いているか確認する場合は、 <code>git check-attr</code> コマンドを用いると良い。以下のように eolがcrlfで設定されたことが分かる。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> check-attr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testdata/eol/input1.csv</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testdata/eol/input1.csv:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testdata/eol/input1.csv:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eol:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crlf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://docs.github.com/ja/get-started/getting-started-with-git/configuring-git-to-handle-line-endings" target="_blank" rel="noreferrer">行終端を処理するようGitを設定する - GitHub Docs</a></li><li><a href="https://chryfopp.hatenablog.com/entry/2013/04/13/113754" target="_blank" rel="noreferrer">.gitattributesのeol=crlfは改行コードをCRLFに変換してチェックインするものではない - エンジニア的考察ブログ</a></li></ul></div></div><h3 id="linguist-generated" tabindex="-1">linguist-generated <a class="header-anchor" href="#linguist-generated" aria-label="Permalink to &quot;linguist-generated&quot;">​</a></h3><p>自動生成で変更が発生し、かつ大量の変更が頻繁に発生する場合には、レビュワーが毎回レビューをすることは効率的でない。</p><p><code>.gitattributes</code> で <code>linguist-generated=true</code> の設定を行うことで、差分をデフォルトで表示させず、プルリクエストの可視性を向上させることができる。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 自動生成されたHTMLファイルの差分を無視する</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/path/to/generated/*.html</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linguist-generated=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上記の設定で <code>/path/to/generated/main.html</code> をコミットすると、差分が以下のように非表示となる（Load diffをクリックすることで差分表示は可能）。</p><p><img src="`+E+`" alt="プルリクエストのFile changedでmain.htmlの差分がLoad diffと表示"></p><p>本規約の推奨は以下の通り。</p><ul><li>ツールなどによる生成ファイルをレビュー対象外とする場合は、<code>linguist-generated=true</code> を設定し、レビュアーの負荷を下げる</li><li>レビュアーは差分が省略された場合は、レビュー対象外としてファイルの中身の確認は任意とする</li></ul><div class="tip custom-block"><p class="custom-block-title">生成コードをレビュー対象としたい場合</p><p>GitHubでは、<a href="https://github.com/github-linguist/linguist/blob/v9.0.0/lib/linguist/generated.rb" target="_blank" rel="noreferrer">言語毎に生成ファイルと判定する処理</a>があり、例えツールで作成されたファイルであっても、レビュー確認を必須としたい場合には、クリックする手間が増える分、逆に非効率になる。</p><p>例えば、Javaなど複数の言語では3行目までに <code>Generated by the protocol buffer compiler. DO NOT EDIT!</code> が含まれていると<a href="https://github.com/github-linguist/linguist/blob/63cfd70d54ee8f76c41a73fe56689ed8229c9622/lib/linguist/generated.rb#L348-L359" target="_blank" rel="noreferrer">Protocol Bufferの生成コードとみなされる</a>。</p><p>もし、明示的に差分を表示させたい場合、<code>linguist-generated=false</code> を設定する必要がある。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 以下はコード生成されたファイルだが、レビュー対象としたいためlinguist-generated=falseを設定し、差分を表示させる</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/path/to/generated/*.java</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linguist-generated=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div><div class="info custom-block"><p class="custom-block-title">参考</p><ul><li><a href="https://docs.github.com/ja/repositories/working-with-files/managing-files/customizing-how-changed-files-appear-on-github" target="_blank" rel="noreferrer">変更したファイルの GitHub での表示方法をカスタマイズする - GitHub Docs</a></li><li><a href="https://zenn.dev/hacobell_dev/articles/show-diff-in-github" target="_blank" rel="noreferrer">GitHubでファイル差分が表示されない！？レビューを快適にするための差分の非表示ロジックを解説</a></li></ul></div><h2 id="gitignore" tabindex="-1">.gitignore <a class="header-anchor" href="#gitignore" aria-label="Permalink to &quot;.gitignore&quot;">​</a></h2><p>Gitで管理したくないファイル名のルールを定義する<code>.gitignore</code>ファイルも入れる。ウェブフロントエンドであれば新規プロジェクトを作成すると大抵作成されるのでそれを登録すれば良いが、もしない場合、あるいは複数の言語を使っている場合などは<a href="https://github.com/github/gitignore" target="_blank" rel="noreferrer">GitHubが提供するテンプレート</a>を元に作成すると良い。GlobalフォルダにはWindows/macOSのOS固有設定や、エディタ設定などもある。</p><p>環境設定を<code>.env</code>で行うのが一般的になってきているが、<code>.env.local</code>、<code>.env.dev.local</code>といった<code>.local</code>がついたファイルはクレデンシャルなどの機微な情報を扱うファイルとして定着しているため、 <code>*.local</code>も追加すると良い。</p><h2 id="個人用のファイルをgit管理対象外とする" tabindex="-1">個人用のファイルをGit管理対象外とする <a class="header-anchor" href="#個人用のファイルをgit管理対象外とする" aria-label="Permalink to &quot;個人用のファイルをGit管理対象外とする&quot;">​</a></h2><p><code>.gitignore</code> を用いると、チームでGit対象外とするファイルを一律で設定できる。</p><p>一方で、動作確認用のちょっとしたスクリプトなどで以下の要件が出てくることがある。</p><ul><li>個人的にGitリポジトリ配下のフォルダに格納したいが、コミットしたくない（≒自分のローカルリポジトリのみ必要である）</li><li>あくまで個人用途であるため <code>.gitignore</code> に追記したくない</li></ul><p>上記の場合は、<code>.git/info/exclude</code> を利用することを推奨する。</p><div class="info custom-block"><p class="custom-block-title">参考</p><p><a href="https://qiita.com/hichika/items/f3c980dd069df0f3a56e" target="_blank" rel="noreferrer">個人的Gitおすすめtips 7選 #GitHub - Qiita</a></p></div><h2 id="pull-request-merge-request-テンプレート" tabindex="-1">Pull Request / Merge Request テンプレート <a class="header-anchor" href="#pull-request-merge-request-テンプレート" aria-label="Permalink to &quot;Pull Request / Merge Request テンプレート&quot;">​</a></h2><p>GitHubやGitLabでは、プルリクエスト作成時のテンプレートを作ることができる。チームでプルリクエストで書いてほしいことを明示的にすることで、レビュー効率の向上や障害調査に役立てることができる。</p><p>GitHubでは <code>.github/PULL_REQUEST_TEMPLATE.md</code> に記載する。（GitLabでは <code>.gitlab/merge_request_templates/{your_template}.md</code> を配置する。）</p><p>テンプレートの例を以下にあげる。</p><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## チケットURL</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 特に見てほしいレビューポイント</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 残課題（別チケットで対応予定の内容、別プルリクエストで対応予定の内容）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 動作確認内容（画面キャプチャなど）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## セルフチェックリスト</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] 開発規約(DEVELOPMENT.md) を確認した</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] Files changed を開き、変更内容を確認した</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] コードの変更に伴い、同期必要な設計ドキュメントを更新した</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ ] 今回のPRでは未対応の残課題があればIssueに起票した</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="github推奨設定" tabindex="-1">GitHub推奨設定 <a class="header-anchor" href="#github推奨設定" aria-label="Permalink to &quot;GitHub推奨設定&quot;">​</a></h2><p>業務利用でのチーム開発を想定しており、リポジトリは以下の条件を満たす前提とする。</p><ul><li>プライベートリポジトリ</li><li>Organization配下に作成</li><li>Teamsプラン以上の有料契約（※プロテクトブランチの機能などを利用するために必要）</li></ul><h3 id="general" tabindex="-1">General <a class="header-anchor" href="#general" aria-label="Permalink to &quot;General&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Category</th><th>Item</th><th>Value</th><th>Memo</th></tr></thead><tbody><tr><td>General</td><td>Require contributors to sign off on web-based commits</td><td>チェックなし</td><td>著作権・ライセンス承諾の場合に用いるが、業務アプリ開発では不要</td></tr><tr><td></td><td>Default branch</td><td>develop</td><td></td></tr><tr><td>Pull Requests</td><td>Allow merge commits</td><td>✅️</td><td>main &lt;- developなどのマージ時に必要</td></tr><tr><td></td><td>Allow squash merging</td><td>✅️</td><td>develop &lt;- feature はSquash mergeを推奨</td></tr><tr><td></td><td>Allow rebase merging</td><td>-</td><td>利用しないため、チェックを外す</td></tr><tr><td></td><td>Allow suggest updating pull request branches</td><td>✅️</td><td>Pull Request作成後、ベースブランチが更新された場合、ソースブランチの更新を提案してくれる</td></tr><tr><td></td><td>Automatically delete head branches</td><td>✅️</td><td>マージ後にfeature branchを削除するため有効にする</td></tr><tr><td>Pushes</td><td>Limit how many branches and tags can be updated in a single push</td><td>5</td><td>git push origin –mirrorで誤ってリモートブランチを破壊しないようにする。推奨値の5を設定する</td></tr><tr><td>Security</td><td>Secret scanning</td><td>✅️</td><td>コードやIssue、コメント等のクレデンシャル情報を検知し、通知を行う</td></tr><tr><td></td><td>Push Protection</td><td>✅️</td><td>プッシュ時にクレデンシャル情報が検知された場合、プッシュをブロックする</td></tr></tbody></table><h3 id="access" tabindex="-1">Access <a class="header-anchor" href="#access" aria-label="Permalink to &quot;Access&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Category</th><th>Item</th><th>Value</th><th>Memo</th></tr></thead><tbody><tr><td>Collaborators and teams</td><td>Choose a role</td><td>任意の権限</td><td>※後述</td></tr></tbody></table><ul><li>各ロールの権限については、公式ドキュメントを参照</li><li>通常、開発者には「Write」ロールを付与する</li><li>開発を行わない、例えばスキーマファイルの参照のみ必要であれば、「Read」権限を、Issueの起票などのみ実施するマネージャーであれば「Triage」ロールを付与する</li><li>「Maintain」権限は、付与しない</li><li>「Admin」権限は、マネージャークラスに対して合計2~3名を付与し、属人化しないようにする <ul><li>1名でも、4名以上でもNGとする</li></ul></li></ul><h3 id="code-and-automation" tabindex="-1">Code and automation <a class="header-anchor" href="#code-and-automation" aria-label="Permalink to &quot;Code and automation&quot;">​</a></h3><h4 id="branches" tabindex="-1">Branches <a class="header-anchor" href="#branches" aria-label="Permalink to &quot;Branches&quot;">​</a></h4><p>Branch protection rules にdevelop, mainなど永続的なブランチに保護設定を追加する。</p><table tabindex="0"><thead><tr><th>Category</th><th>Item</th><th>Value</th><th>Memo</th></tr></thead><tbody><tr><td>Protect matching branches</td><td>Require a pull request before merging</td><td>✅️</td><td>プルリクエストを必須とする</td></tr><tr><td></td><td>Require approvals</td><td>✅️</td><td>レビューを必須とする</td></tr><tr><td></td><td>Required number of approvals before merging</td><td>1</td><td>最低1名以上の承認を必須とする</td></tr><tr><td></td><td>Dismiss stale pull request approvals when new commits are pushed</td><td>-</td><td>レビュー承認後のPushで再承認を必要とするかだが、レビュー運用上に支障となることも多く、チェックを外す</td></tr><tr><td></td><td>Require status checks to pass before merging</td><td>✅️</td><td>CIの成功を条件とする</td></tr><tr><td></td><td>Require branches to be up to date before merging</td><td>任意</td><td>CIパイプラインのワークフロー名を指定</td></tr><tr><td></td><td>Require conversation resolution before merging</td><td>-</td><td>レビューコメントがすべて解決していることを条件とする。チェックを外す</td></tr><tr><td></td><td>Require signed commits</td><td>✅️</td><td>署名付きコミットを必須化し、セキュアな設定にする</td></tr><tr><td></td><td>Require linear history</td><td>✅️/-</td><td>mainブランチの場合はOFFとするが、developの場合はSquash mergeを求めるため有効にする</td></tr><tr><td></td><td>Do not allow bypassing the above settings</td><td>✅️</td><td>パイパスを許容しない</td></tr></tbody></table><p>developブランチに対し「require linear history」を選択することを推奨することで、「Create a merge commit」が選択できないようにする。</p><p>また、意図しない方法でのマージを避けるためにブランチごとにマージ戦略を設定しておき、想定外のマージ戦略が選択された時に警告色を表示するというサードパーティ製のChrome拡張<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>も存在する。必要に応じて導入を検討する。</p><h4 id="tags" tabindex="-1">Tags <a class="header-anchor" href="#tags" aria-label="Permalink to &quot;Tags&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Category</th><th>Item</th><th>Value</th><th>Memo</th></tr></thead><tbody><tr><td></td><td>Protect tags</td><td>v[0-9]+.[0-9]+.[0-9]</td><td>セマンティックバージョニングに則ったタグのみ、削除を防ぐ</td></tr></tbody></table><h4 id="github-actions" tabindex="-1">GitHub Actions <a class="header-anchor" href="#github-actions" aria-label="Permalink to &quot;GitHub Actions&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Category</th><th>Item</th><th>Value</th><th>Memo</th></tr></thead><tbody><tr><td>Actions permissions</td><td>Allow asset-taskforce, and select non-asset-taskforce, actions and reusable workflows &gt; Allow actions created by GitHub</td><td>✅️</td><td></td></tr><tr><td></td><td>Allow asset-taskforce, and select non-asset-taskforce, actions and reusable workflows &gt; Allow actions Marketplace verified creators</td><td>✅️</td><td></td></tr></tbody></table><h4 id="code-security-and-analysis" tabindex="-1">Code security and analysis <a class="header-anchor" href="#code-security-and-analysis" aria-label="Permalink to &quot;Code security and analysis&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Category</th><th>Item</th><th>Value</th><th>Memo</th></tr></thead><tbody><tr><td>Dependabot</td><td>Dependabot alerts</td><td>✅️</td><td>依存パッケージのアップデートを検知するため</td></tr><tr><td></td><td>Dependabot security updates</td><td>✅️</td><td></td></tr><tr><td></td><td>Dependabot version updates</td><td>✅️</td><td></td></tr></tbody></table><h2 id="gitlab推奨設定" tabindex="-1">GitLab推奨設定 <a class="header-anchor" href="#gitlab推奨設定" aria-label="Permalink to &quot;GitLab推奨設定&quot;">​</a></h2><ul><li>GitHubの「Automatically delete head branches」 <ul><li>マージリクエストから「Delete source branch」オプションを有効にすることが該当</li><li>プロジェクトの設定で「Enable &quot;Delete source branch&quot; option by default」を選択しておくとデフォルトで有効になる</li></ul></li></ul><h2 id="ローカルでのgit操作" tabindex="-1">ローカルでのGit操作 <a class="header-anchor" href="#ローカルでのgit操作" aria-label="Permalink to &quot;ローカルでのGit操作&quot;">​</a></h2><h3 id="gitコマンド" tabindex="-1">gitコマンド <a class="header-anchor" href="#gitコマンド" aria-label="Permalink to &quot;gitコマンド&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 変更作業</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branchnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># リモートブランチの変更を同期</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> develop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># コンフリクト対応</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">1&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">2&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># リモートブランチへプッシュ（pullした際にリベースしているため、オプションは必須である）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force-with-lease</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force-if-includes</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="vs-code" tabindex="-1">VS Code <a class="header-anchor" href="#vs-code" aria-label="Permalink to &quot;VS Code&quot;">​</a></h3><p>利用頻度が高いとされるGitクライアントである、VS Code上でのGit操作を紹介する。</p><div class="tip custom-block"><p class="custom-block-title">VSCode上でのGit操作の紹介</p><p>VSCode上でのGit操作は、サイドバーの &quot;Source Control&quot; から行うことができる。ほとんど全ての操作はコマンドパレットからも実行可能だが、説明は割愛する。</p><h4 id="推奨する拡張機能" tabindex="-1">推奨する拡張機能 <a class="header-anchor" href="#推奨する拡張機能" aria-label="Permalink to &quot;推奨する拡張機能&quot;">​</a></h4><p>GUIでのGit操作にあたり、次の2つの拡張機能をインストールしておくと利便性が高い。業務上はほぼ必須と見て良い。</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens" target="_blank" rel="noreferrer">GitLens</a><ul><li>Gitに関する様々な機能を提供する拡張機能</li><li>詳細： <a href="https://future-architect.github.io/articles/%EF%BC%8920240415a/" target="_blank" rel="noreferrer">VSCodeでGitLensを使う - フューチャー技術ブログ</a></li></ul></li><li><a href="https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph" target="_blank" rel="noreferrer">Git Graph</a><ul><li>コミットグラフを表示する拡張機能</li><li>GitLensにもコミットグラフはありますが、Pro（有料版）限定の提供のため、ここではこちらの拡張機能を使用する</li></ul></li></ul><p>以降では、これらの拡張機能がインストールされていることを前提に説明を行う。</p><h4 id="リポジトリのクローン-git-clone" tabindex="-1">リポジトリのクローン (<code>git clone</code>) <a class="header-anchor" href="#リポジトリのクローン-git-clone" aria-label="Permalink to &quot;リポジトリのクローン (\`git clone\`)&quot;">​</a></h4><ol><li>サイドバー &gt; Explorer か Source Control &gt; Clone Repository ボタンをクリック</li><li>URLを入力すると、リポジトリをクローンできる</li></ol><table tabindex="0"><thead><tr><th>1</th><th>2</th></tr></thead><tbody><tr><td><img src="`+x+'" alt="Clone1"></td><td><img src="'+P+'" alt="Clone2"></td></tr></tbody></table><h4 id="コミットグラフの表示" tabindex="-1">コミットグラフの表示 <a class="header-anchor" href="#コミットグラフの表示" aria-label="Permalink to &quot;コミットグラフの表示&quot;">​</a></h4><ol><li>SOURCE CONTROL パネル &gt; 黒丸のグラフアイコン (View Git Graph (git log)) をクリック</li><li>コミットグラフが表示される</li></ol><table tabindex="0"><thead><tr><th>1</th><th>2</th></tr></thead><tbody><tr><td><img src="'+G+'" alt="Graph1"></td><td><img src="'+w+'" alt="Graph2"></td></tr></tbody></table><p>白丸のグラフアイコン (Show Commit Graph) はGitLensのコミットグラフだが、冒頭の記述通り、Pro版でのみの提供となる。</p><h4 id="リモートのフェッチ-プル-git-fetch-git-pull" tabindex="-1">リモートのフェッチ／プル (<code>git fetch</code> / <code>git pull</code>) <a class="header-anchor" href="#リモートのフェッチ-プル-git-fetch-git-pull" aria-label="Permalink to &quot;リモートのフェッチ／プル (`git fetch` / `git pull`)&quot;">​</a></h4><p>以下のいずれかの操作を実行すると、リモートリポジトリをフェッチできる。</p><ul><li>(a) SOURCE CONTROL パネル &gt; 三点リーダーアイコン (More Actions...) をクリックし、 Fetch を選択</li><li>(b) コミットグラフ &gt; 雲アイコン (Fetch from Remote(s)) をクリック</li></ul><table tabindex="0"><thead><tr><th>a, bの手順両方を記載</th></tr></thead><tbody><tr><td><img src="'+A+'" alt="Fetch1"></td></tr></tbody></table><p>なお、フェッチ後に以下のようなダイアログが表示される場合があるが、 &quot;Yes&quot; を選択すると、自動で定期的にフェッチを行う。</p><p><img src="'+D+'" alt="Fetch2"></p><h4 id="ブランチの作成-チェックアウト-git-branch-git-checkout" tabindex="-1">ブランチの作成／チェックアウト (<code>git branch</code> / <code>git checkout</code>) <a class="header-anchor" href="#ブランチの作成-チェックアウト-git-branch-git-checkout" aria-label="Permalink to &quot;ブランチの作成／チェックアウト (`git branch` / `git checkout`)&quot;">​</a></h4><p>以下のいずれかの操作を実行すると、ブランチを作成できる。</p><ul><li>(a) SOURCE CONTROL パネル &gt; 三点リーダーアイコン (More Actions...) をクリックし、Branch &gt; Create Branch... を選択 <ul><li>現在チェックアウトしているブランチから新規ブランチが作成されますが、Create Branch From... を選択すると、作成元のブランチを選択することができる</li><li>作成したブランチに自動的にチェックアウトする</li></ul></li><li>(b) コミットグラフ &gt; 作成元コミットの行上で右クリックし、Create Branch... を選択 <ul><li>&quot;Check out&quot; にチェックを入れると、作成したブランチにチェックアウトする</li></ul></li></ul><table tabindex="0"><thead><tr><th>a</th><th>b</th></tr></thead><tbody><tr><td><img src="'+R+'" alt="Branch1"></td><td><img src="'+L+'" alt="Branch2"></td></tr></tbody></table><h4 id="ステージ-コミット-プッシュ-git-add-git-commit-git-push" tabindex="-1">ステージ／コミット／プッシュ (<code>git add</code> / <code>git commit</code> / <code>git push</code>) <a class="header-anchor" href="#ステージ-コミット-プッシュ-git-add-git-commit-git-push" aria-label="Permalink to &quot;ステージ／コミット／プッシュ (`git add` / `git commit` / `git push`)&quot;">​</a></h4><ol><li>SOURCE CONTROL パネル &gt; 変更ファイルの行 &gt; +アイコン (Stage Changes) をクリックすると、対象ファイルをステージできる。（Changes &gt; +アイコン (Stage All Changes) をクリックすると、すべての変更をステージする）</li><li>必要な変更をステージ後、 SOURCE CONTROL パネル内でコミットメッセージを入力し、 Commit ボタンをクリックすると、コミットを作成できる</li></ol><table tabindex="0"><thead><tr><th>1</th><th>2</th></tr></thead><tbody><tr><td><img src="'+S+'" alt="Stage"></td><td><img src="'+H+'" alt="Commit"></td></tr></tbody></table><p>以下のa～cいずれかの操作を実行すると、作成したコミットをリモートリポジトリにプッシュできる。</p><ul><li>(a) SOURCE CONTROL パネル &gt; 三点リーダーアイコン (More Actions...) をクリックし、Push を選択</li><li>(b) BRANCHES パネル &gt; 対象ブランチの行 &gt; 雲アイコン (Publish Branch) をクリック</li><li>(c) コミットグラフ &gt; 対象ブランチの上で右クリックし、Push Branch... を選択</li></ul><table tabindex="0"><thead><tr><th>a</th><th>b</th><th>c</th></tr></thead><tbody><tr><td><img src="'+I+'" alt="push1"></td><td><img src="'+O+'" alt="push2"></td><td><img src="'+j+'" alt="push3"></td></tr></tbody></table></div><h2 id="謝辞" tabindex="-1">謝辞 <a class="header-anchor" href="#謝辞" aria-label="Permalink to &quot;謝辞&quot;">​</a></h2><p>このアーキテクチャガイドラインの作成にあたり、多大なるご協力をいただきました皆様に心より感謝申し上げます。</p><ul><li><strong>作成者</strong>（宮崎将太、真野隼記、武田大輝、澁川喜規、清水 雄一郎）</li><li><strong>レビュアー</strong>（藤田春佳、中村眞之介）</li></ul><p>皆様のご尽力なしには、本ガイドラインの完成はなしえませんでした。改めて深く感謝いたします。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://github.com/github/renaming" target="_blank" rel="noreferrer">github/renaming: Guidance for changing the default branch name for GitHub repositories</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://docs.github.com/ja/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors" target="_blank" rel="noreferrer">複数の作者を持つコミットを作成する - GitHub Docs</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://zenn.dev/daku10/articles/github-merge-guardian" target="_blank" rel="noreferrer">GitHubで誤ったマージ戦略のマージを防ぐChrome拡張機能の開発をした</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>',256))])}const W=s(T,[["render",M]]);export{z as __pageData,W as default};
